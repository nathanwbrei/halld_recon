/*
 * hddm_r.hpp - DO NOT EDIT THIS FILE
 *
 * This file was generated automatically by hddm-cpp from the file
 * libraries/HDDM/rest.xml

 * This header file defines the c++ classes that hold the data
 * described in the data model (from libraries/HDDM/rest.xml). 
 *
 * The hddm data model tool set was written by
 * Richard Jones, University of Connecticut.
 *
 * For more information see the following web site
 *
 * http://zeus.phys.uconn.edu/halld/datamodel/doc
 *
 */

#ifndef SAW_r_HDDM
#define SAW_r_HDDM

#include <list>
#include <deque>
#include <vector>
#include <string>
#include <atomic>
#include <sstream>
#include <stdexcept>
#include <streambuf>
#include <xstream/z.h>
#include <xstream/bz.h>
#include <xstream/xdr.h>
#include <xstream/digest.h>
#include <particleType.h>
#include <pthread.h>
#include <assert.h>

#define MY_SETUP thread_private_data *my_private = lookup_private_data();
#define MY(VAR) my_private->m_ ## VAR

namespace hddm_r {

const int k_default_status = 0x0;
const int k_bits_compression = 0xf0;
const int k_no_compression = 0x00;
const int k_z_compression = 0x10;
const int k_bz2_compression = 0x20;
const int k_bits_integrity = 0x0f;
const int k_no_integrity = 0x00;
const int k_crc32_integrity = 0x01;
const int k_bits_randomaccess = 0xf00;
const int k_can_reposition = 0x100;

enum hddm_type {
   k_hddm_unknown,
   k_hddm_int,
   k_hddm_long,
   k_hddm_float,
   k_hddm_double,
   k_hddm_boolean,
   k_hddm_string,
   k_hddm_anyURI,
   k_hddm_Particle_t
};

class HDDM;
class istream;
class ostream;

class streamable {
 public:
   virtual ~streamable() {}
   virtual void streamer(istream &istr) {}
   virtual void streamer(ostream &ostr) {}
};

class streamposition {
 public:
   uint64_t block_start;
   uint32_t block_offset;
   uint32_t block_status;
   streamposition();
   streamposition(uint64_t start, uint32_t offset, uint32_t status);
   bool operator==(const streamposition src) const {
      return (block_start == src.block_start &&
              block_offset == src.block_offset &&
              block_status == src.block_status);
   }
   bool operator!=(const streamposition src) const {
      return !(*this == src);
   }
   bool operator>(const streamposition src) const {
      return (block_start > src.block_start ||
              (block_start == src.block_start &&
               block_offset > src.block_offset));
   }
   bool operator>=(const streamposition src) const {
      return (*this > src || *this == src);
   }
   bool operator<(const streamposition src) const {
      return !(*this >= src);
   }
   bool operator<=(const streamposition src) const {
      return !(*this > src);
   }
};

class threads {
 public:
   static thread_local int ID;
   static int getID() {
      // protected access to the ID tls data member
      if (ID == 0) {
         if (ID >= max_threads) {
            throw std::runtime_error("hddm_r::threads::getID - "
                                     "thread count exceeds max_threads");
         }
         ID = ++next_unique_ID;
      }
      return ID;
   }
   static const int max_threads = 999;
 protected:
   static std::atomic<int> next_unique_ID;
};

class istreambuffer : public std::streambuf {
 public:
   istreambuffer(char* buffer, std::streamsize bufferLength) {
      setg(buffer, buffer, buffer + bufferLength);
   }

   std::streampos tellg() {
      return gptr() - eback();
   }

   void seekg(std::streampos pos) {
      reset();
      gbump(pos);
   }

   int size() {
      return egptr() - gptr();
   }

   void reset() {
      char *gbegin = eback();
      char *gend = egptr();
      setg(gbegin, gbegin, gend);
   }

   char *getbuf() {
      return eback();
   }
};

class ostreambuffer : public std::streambuf {
 public:
   ostreambuffer(char* buffer, std::streamsize bufferLength) {
      setp(buffer, buffer + bufferLength);
   }

   std::streampos tellp() {
      return pptr() - pbase();
   }

   void seekp(std::streampos pos) {
      reset();
      pbump(pos);
   }

   int size() {
      return pptr() - pbase();
   }

   void reset() {
      char *pbegin = pbase();
      char *pend = epptr();
      setp(pbegin, pend);
   }

   char *getbuf() {
      return pbase();
   }
};

class ostream {
 public:
   ostream(std::ostream &src);
   ~ostream();
   ostream &operator<<(HDDM &record);
   int getCompression() const;
   void setCompression(int flags);
   int getIntegrityChecks() const;
   void setIntegrityChecks(int flags);
   streamposition getPosition();
   int getBytesWritten() const;
   int getRecordsWritten() const;
 //protected:
   xstream::xdr::ostream *getXDRostream() {
      return my_thread_private[threads::ID]->m_xstr;
   }
   ostream &operator<<(streamable &object);
 private:
   void configure_streambufs();
   void update_streambufs();
   void lock_streambufs();
   void unlock_streambufs();
   std::ostream &m_ostr;
   std::atomic<int> m_status_bits;
   pthread_mutex_t m_streambuf_mutex;

   typedef struct {
      xstream::xdr::ostream *m_xstr;
      std::ostream *m_ostr;
      ostreambuffer *m_sbuf;
      std::streambuf *m_xcmp;
      char *m_event_buffer;
      int m_event_buffer_size;
      std::streampos m_last_start;
      std::streamoff m_last_offset;
      int m_status_bits;
      int m_mutex_lock;
      int m_bytes_written;
      int m_records_written;
   } thread_private_data;

   thread_private_data *my_thread_private[threads::max_threads];
   thread_private_data *lookup_private_data();
   void init_private_data();
};

class codon {
 public:
   codon(): m_order(0) {}
   int m_order;
   std::string m_tagname;
   std::vector<codon> m_sequence;
   std::deque<streamable*> m_target;
};

typedef std::vector<codon> chromosome;

class istream {
 public:
   istream(std::istream &src);
   ~istream();
   istream &operator>>(HDDM &record);
   void skip(int count);
   int getCompression() const;
   int getIntegrityChecks() const;
   streamposition getPosition();
   void setPosition(const streamposition &pos);
   int getBytesRead() const;
   int getRecordsRead() const;
   bool eof();
   bool operator!();
   operator void*();
 //protected:
   void reset_sequencer();
   void sequencer(streamable &object);
   istream &operator>>(streamable &object);
   xstream::xdr::istream *getXDRistream() {
      return my_thread_private[threads::ID]->m_xstr;
   }

 private:
   std::string m_documentString;
   chromosome synthesize(const std::string &src, int p_src,
                         const std::string &ref, int p_ref);
   int getTag(const std::string &src, int p_src, std::string &tag, int &level);
   int getEndTag(const std::string &src, int p_src, const std::string &tag);
   void collide(const std::string &itag, const std::string &rtag);
   void configure_streambufs();
   void update_streambufs();
   void lock_streambufs();
   void unlock_streambufs();
   std::istream &m_istr;
   std::atomic<int> m_status_bits;
   pthread_mutex_t m_streambuf_mutex;
   int m_leftovers[100];

   typedef struct {
      codon m_genome;
      codon *m_codon;
      int m_sequencing;
      xstream::xdr::istream *m_xstr;
      std::istream *m_istr;
      istreambuffer *m_sbuf;
      std::streambuf *m_xcmp;
      int m_events_to_skip;
      char *m_event_buffer;
      int m_event_buffer_size;
      int m_event_size;
      std::streampos m_last_start;
      std::streamoff m_last_offset;
      std::streamoff m_next_start;
      int m_status_bits;
      int m_mutex_lock;
      int m_bytes_read;
      int m_records_read;
      bool m_hit_eof;
   } thread_private_data;

   thread_private_data *my_thread_private[threads::max_threads];
   thread_private_data *lookup_private_data();
   void init_private_data();
};

template <class T> class HDDM_ElementList;

class HDDM_Element: public streamable {
 public:
   ~HDDM_Element() {}
   virtual const void *getAttribute(const std::string &name,
                                    hddm_type *atype=0) const {
      return 0;
   }
   virtual std::string toString(int indent=0) {
      return "bad apple";
   }
   virtual std::string toXML(int indent=0) {
      return "<!--bad apple-->";
   }
   friend class HDDM_ElementList<HDDM_Element>;
 protected:
   HDDM_Element() : m_parent(0), m_host(0) {}
   HDDM_Element(HDDM_Element *parent)
    : m_parent(parent),
      m_host(parent->m_host)
    {}
   HDDM_Element(HDDM_Element &src)
    : m_parent(src.m_parent),
      m_host(src.m_host)
   {}
   HDDM_Element *m_parent;
   HDDM *m_host;
};

template <class T>
class HDDM_ElementList: public streamable {
 public:
   HDDM_ElementList(typename std::list<T*> *plist,
                    typename std::list<T*>::iterator begin,
                    typename std::list<T*>::iterator end,
                    HDDM_Element *parent=0)
    : m_host_plist(plist),
      m_first_iter(begin),
      m_last_iter(end),
      m_parent(parent)
   {
      for (m_size = 0; begin != end; ++m_size, ++begin) {}
      if (m_size) {
         --m_last_iter;
      }
   }

   HDDM_ElementList(const HDDM_ElementList<T> &src)
    : m_host_plist(src.m_host_plist),
      m_first_iter(src.m_first_iter),
      m_last_iter(src.m_last_iter),
      m_parent(0),
      m_size(src.m_size)
   {}

   bool empty() const { return (m_size == 0); }
   int size() const { return m_size; }
   T &front() const { return *m_first_iter; }
   T &back() const { return *m_last_iter; }
   T &operator()() { return *m_first_iter; }
   T &operator()(int index) {
      if (index == 0) {
         return *m_first_iter;
      }
      else if (index == -1) {
         return *m_last_iter;
      }
      else if (index > 0) {
         return *(m_first_iter + index);
      }
      else {
         return *(m_last_iter + (++index));
      }
   }

   class iterator: public std::list<T*>::iterator {
    public:
      iterator() {}
      iterator(typename std::list<T*>::iterator src)
       : std::list<T*>::iterator(src) {}

      T *operator->() const { 
         return *(typename std::list<T*>::iterator)(*this);
      }

      T &operator*() const {
         return **(typename std::list<T*>::iterator)(*this);
      }

      iterator operator+=(int offset) {
         if (offset > 0) {
            for (int i=0; i<offset; ++i, ++(*this)) {}
         }
         else if (offset < 0) {
            for (int i=0; i>offset; --i, --(*this)) {}
         }
         return *this;
      }

      iterator operator-=(int offset) {
         if (offset > 0) {
            for (int i=0; i<offset; ++i, --(*this)) {}
         }
         else if (offset < 0) {
            for (int i=0; i>offset; --i, ++(*this)) {}
         }
         return *this;
      }

      iterator operator+(int offset) const {
         iterator iter(*this);
         return iter += offset;
      }

      iterator operator-(int offset) const {
         iterator iter(*this);
         return iter -= offset;
      }

      int operator-(iterator iter) const {
         if (*this == iter) {
            return 0;
         }
         iterator iter2(iter);
         for (int n=1; n < m_size; ++n) {
            if (++iter == *this) {
               return n;
            }
            else if (--iter2 == *this) {
               return -n;
            }
         }
         return m_size;
      }
   };

   class const_iterator: public std::list<T*>::const_iterator {
    public:
      const_iterator() {}
      const_iterator(const typename std::list<T*>::const_iterator src)
       : std::list<T*>::const_iterator(src) {}

      const_iterator(const typename std::list<T*>::iterator src)
       : std::list<T*>::const_iterator(src) {}

      const T *operator->() const { 
         return *(typename std::list<T*>::const_iterator)(*this);
      }

      const T &operator*() const { 
         return **(typename std::list<T*>::const_iterator)(*this);
      }

      const const_iterator operator+=(int offset) {
         if (offset > 0) {
            for (int i=0; i<offset; ++i, ++(*this)) {}
         }
         else if (offset < 0) {
            for (int i=0; i>offset; --i, --(*this)) {}
         }
         return *this;
      }

      const const_iterator operator-=(int offset) {
         if (offset > 0) {
            for (int i=0; i<offset; ++i, --(*this)) {}
         }
         else if (offset > 0) {
            for (int i=0; i>offset; --i, ++(*this)) {}
         }
         return *this;
      }

      const const_iterator operator+(int offset) const {
         const_iterator iter(*this);
         return iter += offset;
      }

      const const_iterator operator-(int offset) const {
         const_iterator iter(*this);
         return iter -= offset;
      }

      int operator-(const_iterator iter) const {
         if (*this == iter) {
            return 0;
         }
         const_iterator iter2(iter);
         for (int n=1; n < m_size; ++n) {
            if (++iter == *this) {
               return n;
            }
            else if (--iter2 == *this) {
               return -n;
            }
         }
         return m_size;
      }
   };

   iterator begin() const { return m_first_iter; }
   iterator end() const { return (m_size)? m_last_iter + 1 : m_last_iter; }
   void clear() { del(); }

   HDDM_ElementList add(int count=1, int start=-1) {
      if (m_parent == 0) {
         throw std::runtime_error("HDDM_ElementList error - "
                                  "attempt to add to immutable list");
      }
      iterator it = insert(start, count);
      typename std::list<T*>::iterator iter(it);
      for (int n=0; n<count; ++n, ++iter) {
         *iter = new T(m_parent);
      }
      return HDDM_ElementList(m_host_plist, it, it+count, m_parent);
   }

   void del(int count=-1, int start=0) {
      if (m_parent == 0) {
         throw std::runtime_error("HDDM_ElementList error - "
                                  "attempt to delete from immutable list");
      }
      if (m_size == 0 || count == 0) {
         return;
      }
      iterator iter_begin(begin());
      iterator iter_end(end());
      if (start < 0) {
         iter_begin = iter_end + start;
         if (count >= 0) {
            iter_end = iter_begin + count;
         }
      }
      else {
         iter_begin += start;
         if (count >= 0) {
            iter_end = iter_begin + count;
         }
      }
      typename std::list<T*>::iterator iter;
      for (iter = iter_begin; iter != iter_end; ++iter) {
         delete *iter;
      }
      erase(start, count);
   }

   HDDM_ElementList slice(int first=0, int last=-1) {
      int n1 = (first < 0)? first + m_size : first;
      int n2 = (last < 0)? last + m_size + 1 : last + 1;
      int count = n2 - n1;
      iterator iter_begin;
      if (first > 0)
         iter_begin = begin() + first;
      else if (first < 0)
         iter_begin = end() + first;
      iterator iter_end(iter_begin + count);
      return HDDM_ElementList(m_host_plist, iter_begin, iter_end);
   }

   void streamer(istream &istr) {
      clear();
      int size;
      *istr.getXDRistream() >> size;
      if (size) {
         iterator iter = add(size).begin();
         for (int n=0; n < size; ++n, ++iter) {
            istr.sequencer(*iter);
         }
      }
      istr.reset_sequencer();
   }

   void streamer(ostream &ostr) {
      if (m_size) {
         *ostr.getXDRostream() << m_size;
         for (iterator iter = begin(); iter != end(); ++iter) {
            iter->streamer(ostr);
         }
      }
   }
   std::string toString(int indent=0) {
      std::string result;
      if (m_size) {
         for (iterator iter = begin(); iter != end(); ++iter) {
            result += iter->toString(indent);
         }
      }
      return result;
   }
   std::string toXML(int indent=0) {
      std::string result;
      if (m_size) {
         for (iterator iter = begin(); iter != end(); ++iter) {
            result += iter->toXML(indent);
         }
      }
      return result;
   }

 private:
   HDDM_ElementList() {}

   iterator insert(int start, int count) {
      if (m_size == 0) {
         if (count > 0) {
            if (m_first_iter == m_host_plist->begin()) {
               m_host_plist->insert(m_first_iter,count,(T*)0);
               m_first_iter = m_host_plist->begin();
            }
            else {
               m_host_plist->insert(m_first_iter--,count,(T*)0);
               ++m_first_iter;
            }
            --m_last_iter;
            m_size = count;
         }
         return m_first_iter;
      }
      else if (start == 0) {
         if (count > 0) {
            if (m_first_iter == m_host_plist->begin()) {
               m_host_plist->insert(m_first_iter,count,(T*)0);
               m_first_iter = m_host_plist->begin();
            }
            else {
               m_host_plist->insert(m_first_iter--,count,(T*)0);
               ++m_first_iter;
            }
            m_size += count;
         }
         return m_first_iter;
      }
      else if (start == -1) {
         if (count > 0) {
            iterator pos(m_last_iter);
            m_host_plist->insert(++m_last_iter,count,(T*)0);
            --m_last_iter;
            m_size += count;
            return ++pos;
         }
         return m_last_iter;
      }
      else if (start > 0) {
         if (count > 0) {
            iterator pos(m_first_iter);
            iterator pos2(pos += start-1);
            m_host_plist->insert(++pos,count,(T*)0);
            if (m_last_iter == pos2) {
               m_last_iter = --pos;
            }
            m_size += count;
            return ++pos2;
         }
         return m_first_iter + start;
      }
      else {
         if (count > 0) {
            iterator pos(m_last_iter);
            iterator pos2(pos += start+1);
            m_host_plist->insert(++pos,count,(T*)0);
            m_size += count;
            return ++pos2;
         }
         return m_last_iter + (start+1);
      }
   }

   iterator erase(int start, int count) {
      start = (start < 0)? start + m_size :
              (start < m_size)? start : m_size;
      count = (count == -1)? m_size - start : count;
      assert(start >= 0 && count > 0 && start + count <= m_size);
      if (count == m_size) {
         m_first_iter = m_host_plist->erase(m_first_iter,++m_last_iter);
         m_last_iter = m_first_iter;
         m_size = 0;
         return m_first_iter;
      }
      else if (start > 0 && count + start == m_size) {
         iterator pos(m_first_iter + start);
         m_last_iter = m_host_plist->erase(pos,pos+count);
         iterator pos2(m_last_iter);
         if (m_last_iter != m_first_iter) {
            --m_last_iter;
         }
         m_size -= count;
         return pos2;
      }
      else if (start == 0) {
         iterator pos(m_first_iter);
         m_first_iter = m_host_plist->erase(pos,pos+count);
         m_size -= count;
         return m_first_iter;
      }
      else {
         iterator pos(m_first_iter + start);
         iterator pos2 = m_host_plist->erase(pos,pos+count);
         m_size -= count;
         return pos2;
      }
   }

 protected:
   std::list<T*> *m_host_plist;
   iterator m_first_iter;
   iterator m_last_iter;
   HDDM_Element *m_parent;
   int m_size;
};

template <class T>
class HDDM_ElementLink: public HDDM_ElementList<T> {
 public:
   HDDM_ElementLink(typename std::list<T*> *plist,
                    typename std::list<T*>::iterator begin,
                    typename std::list<T*>::iterator end,
                    HDDM_Element *parent)
    : HDDM_ElementList<T>(plist,begin,end,parent)
   {}
   HDDM_ElementLink(const HDDM_ElementList<T> &src)
    : HDDM_ElementList<T>(src)
   {}

   void streamer(istream &istr) {
      HDDM_ElementList<T>::clear();
      HDDM_ElementList<T>::add().begin()->streamer(istr);
   }

   void streamer(ostream &ostr) {
      if (HDDM_ElementList<T>::m_size) {
         HDDM_ElementList<T>::begin()->streamer(ostr);
      }
   }

 protected:
   HDDM_ElementLink() {}
};

class Comment: public HDDM_Element {
 public:
   ~Comment();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   std::string getText() const;
   void setText(const std::string &text);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<Comment>;
   friend class HDDM_ElementLink<Comment>;
 private:
   Comment(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   std::string m_text;
};

typedef HDDM_ElementList<Comment> CommentList;
typedef HDDM_ElementLink<Comment> CommentLink;

class DataVersionString: public HDDM_Element {
 public:
   ~DataVersionString();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   std::string getText() const;
   void setText(const std::string &text);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<DataVersionString>;
   friend class HDDM_ElementLink<DataVersionString>;
 private:
   DataVersionString(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   std::string m_text;
};

typedef HDDM_ElementList<DataVersionString> DataVersionStringList;
typedef HDDM_ElementLink<DataVersionString> DataVersionStringLink;

class CcdbContext: public HDDM_Element {
 public:
   ~CcdbContext();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   std::string getText() const;
   void setText(const std::string &text);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<CcdbContext>;
   friend class HDDM_ElementLink<CcdbContext>;
 private:
   CcdbContext(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   std::string m_text;
};

typedef HDDM_ElementList<CcdbContext> CcdbContextList;
typedef HDDM_ElementLink<CcdbContext> CcdbContextLink;

class Origin: public HDDM_Element {
 public:
   ~Origin();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getEbeam() const;
   std::string getEunit() const;
   std::string getJtag() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   Particle_t getTargetType() const;
   int getType() const;
   float getWeight() const;
   std::string getLunit() const;
   float getT() const;
   void setT(float t);
   float getVx() const;
   void setVx(float vx);
   float getVy() const;
   void setVy(float vy);
   float getVz() const;
   void setVz(float vz);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<Origin>;
   friend class HDDM_ElementLink<Origin>;
 private:
   Origin(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_t;
   float m_vx;
   float m_vy;
   float m_vz;
};

typedef HDDM_ElementList<Origin> OriginList;
typedef HDDM_ElementLink<Origin> OriginLink;

class Momentum: public HDDM_Element {
 public:
   ~Momentum();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getEbeam() const;
   std::string getJtag() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   Particle_t getTargetType() const;
   int getType() const;
   float getWeight() const;
   int getId() const;
   int getParentId() const;
   int getPdgtype() const;
   float getE() const;
   void setE(float E);
   std::string getEunit() const;
   std::string getPunit() const;
   float getPx() const;
   void setPx(float px);
   float getPy() const;
   void setPy(float py);
   float getPz() const;
   void setPz(float pz);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<Momentum>;
   friend class HDDM_ElementLink<Momentum>;
 private:
   Momentum(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_E;
   float m_px;
   float m_py;
   float m_pz;
};

typedef HDDM_ElementList<Momentum> MomentumList;
typedef HDDM_ElementLink<Momentum> MomentumLink;

class Product: public HDDM_Element {
 public:
   ~Product();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getEbeam() const;
   std::string getEunit() const;
   std::string getJtag() const;
   int getMinOccurs() const;
   Particle_t getTargetType() const;
   int getType() const;
   float getWeight() const;
   int getId() const;
   void setId(int id);
   std::string getMaxOccurs() const;
   int getParentId() const;
   void setParentId(int parentId);
   int getPdgtype() const;
   void setPdgtype(int pdgtype);
   Momentum &getMomentum();
   MomentumList &getMomenta();
   MomentumList addMomenta(int count=1, int start=-1);
   void deleteMomenta(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<Product>;
   friend class HDDM_ElementLink<Product>;
 private:
   Product(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_id;
   int m_parentId;
   int m_pdgtype;
   MomentumLink m_momentum_link;
};

typedef HDDM_ElementList<Product> ProductList;
typedef HDDM_ElementLink<Product> ProductLink;

class Vertex: public HDDM_Element {
 public:
   ~Vertex();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getEbeam() const;
   std::string getEunit() const;
   std::string getJtag() const;
   int getMinOccurs() const;
   Particle_t getTargetType() const;
   int getType() const;
   float getWeight() const;
   std::string getMaxOccurs() const;
   Origin &getOrigin();
   OriginList &getOrigins();
   OriginList addOrigins(int count=1, int start=-1);
   void deleteOrigins(int count=-1, int start=0);
   Product &getProduct(int index=0);
   ProductList &getProducts();
   ProductList addProducts(int count=1, int start=-1);
   void deleteProducts(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<Vertex>;
   friend class HDDM_ElementLink<Vertex>;
 private:
   Vertex(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   OriginLink m_origin_link;
   ProductList m_product_list;
};

typedef HDDM_ElementList<Vertex> VertexList;
typedef HDDM_ElementLink<Vertex> VertexLink;

class Reaction: public HDDM_Element {
 public:
   ~Reaction();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getEbeam() const;
   void setEbeam(float Ebeam);
   std::string getEunit() const;
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   Particle_t getTargetType() const;
   void setTargetType(Particle_t targetType);
   int getType() const;
   void setType(int type);
   float getWeight() const;
   void setWeight(float weight);
   Vertex &getVertex(int index=0);
   VertexList &getVertices();
   VertexList addVertices(int count=1, int start=-1);
   void deleteVertices(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<Reaction>;
   friend class HDDM_ElementLink<Reaction>;
 private:
   Reaction(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_Ebeam;
   std::string m_jtag;
   int m_targetType;
   int m_type;
   float m_weight;
   VertexList m_vertex_list;
};

typedef HDDM_ElementList<Reaction> ReactionList;
typedef HDDM_ElementLink<Reaction> ReactionLink;

class TagmBeamPhoton: public HDDM_Element {
 public:
   ~TagmBeamPhoton();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   void setE(float E);
   std::string getEunit() const;
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   float getT() const;
   void setT(float t);
   std::string getTunit() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<TagmBeamPhoton>;
   friend class HDDM_ElementLink<TagmBeamPhoton>;
 private:
   TagmBeamPhoton(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_E;
   std::string m_jtag;
   float m_t;
};

typedef HDDM_ElementList<TagmBeamPhoton> TagmBeamPhotonList;
typedef HDDM_ElementLink<TagmBeamPhoton> TagmBeamPhotonLink;

class TaghBeamPhoton: public HDDM_Element {
 public:
   ~TaghBeamPhoton();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   void setE(float E);
   std::string getEunit() const;
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   float getT() const;
   void setT(float t);
   std::string getTunit() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<TaghBeamPhoton>;
   friend class HDDM_ElementLink<TaghBeamPhoton>;
 private:
   TaghBeamPhoton(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_E;
   std::string m_jtag;
   float m_t;
};

typedef HDDM_ElementList<TaghBeamPhoton> TaghBeamPhotonList;
typedef HDDM_ElementLink<TaghBeamPhoton> TaghBeamPhotonLink;

class FcalCorrelations: public HDDM_Element {
 public:
   ~FcalCorrelations();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   float getEerr() const;
   std::string getEunit() const;
   float getEzcorr() const;
   std::string getJtag() const;
   std::string getLunit() const;
   float getT() const;
   float getTerr() const;
   std::string getTunit() const;
   float getTzcorr() const;
   float getX() const;
   float getXerr() const;
   float getXycorr() const;
   float getXzcorr() const;
   float getY() const;
   float getYerr() const;
   float getYzcorr() const;
   float getZ() const;
   float getZerr() const;
   float getEtcorr() const;
   void setEtcorr(float Etcorr);
   float getExcorr() const;
   void setExcorr(float Excorr);
   float getEycorr() const;
   void setEycorr(float Eycorr);
   int getMaxOccurs() const;
   int getMinOccurs() const;
   float getTxcorr() const;
   void setTxcorr(float txcorr);
   float getTycorr() const;
   void setTycorr(float tycorr);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<FcalCorrelations>;
   friend class HDDM_ElementLink<FcalCorrelations>;
 private:
   FcalCorrelations(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_Etcorr;
   float m_Excorr;
   float m_Eycorr;
   float m_txcorr;
   float m_tycorr;
};

typedef HDDM_ElementList<FcalCorrelations> FcalCorrelationsList;
typedef HDDM_ElementLink<FcalCorrelations> FcalCorrelationsLink;

class FcalShowerClassification: public HDDM_Element {
 public:
   ~FcalShowerClassification();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   float getEerr() const;
   std::string getEunit() const;
   float getEzcorr() const;
   std::string getJtag() const;
   std::string getLunit() const;
   std::string getMaxOccurs() const;
   float getT() const;
   float getTerr() const;
   std::string getTunit() const;
   float getTzcorr() const;
   float getX() const;
   float getXerr() const;
   float getXycorr() const;
   float getXzcorr() const;
   float getY() const;
   float getYerr() const;
   float getYzcorr() const;
   float getZ() const;
   float getZerr() const;
   float getClassifierOuput() const;
   void setClassifierOuput(float classifierOuput);
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<FcalShowerClassification>;
   friend class HDDM_ElementLink<FcalShowerClassification>;
 private:
   FcalShowerClassification(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_classifierOuput;
};

typedef HDDM_ElementList<FcalShowerClassification> FcalShowerClassificationList;
typedef HDDM_ElementLink<FcalShowerClassification> FcalShowerClassificationLink;

class FcalShowerProperties: public HDDM_Element {
 public:
   ~FcalShowerProperties();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   float getEerr() const;
   std::string getEunit() const;
   float getEzcorr() const;
   std::string getJtag() const;
   std::string getLunit() const;
   float getT() const;
   float getTerr() const;
   std::string getTunit() const;
   float getTzcorr() const;
   float getX() const;
   float getXerr() const;
   float getXycorr() const;
   float getXzcorr() const;
   float getY() const;
   float getYerr() const;
   float getYzcorr() const;
   float getZ() const;
   float getZerr() const;
   float getE1E9() const;
   void setE1E9(float E1E9);
   float getE9E25() const;
   void setE9E25(float E9E25);
   float getDocaTrack() const;
   void setDocaTrack(float docaTrack);
   int getMaxOccurs() const;
   int getMinOccurs() const;
   float getSumU() const;
   void setSumU(float sumU);
   float getSumV() const;
   void setSumV(float sumV);
   float getTimeTrack() const;
   void setTimeTrack(float timeTrack);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<FcalShowerProperties>;
   friend class HDDM_ElementLink<FcalShowerProperties>;
 private:
   FcalShowerProperties(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_E1E9;
   float m_E9E25;
   float m_docaTrack;
   float m_sumU;
   float m_sumV;
   float m_timeTrack;
};

typedef HDDM_ElementList<FcalShowerProperties> FcalShowerPropertiesList;
typedef HDDM_ElementLink<FcalShowerProperties> FcalShowerPropertiesLink;

class FcalShowerNBlocks: public HDDM_Element {
 public:
   ~FcalShowerNBlocks();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   float getEerr() const;
   std::string getEunit() const;
   float getEzcorr() const;
   std::string getJtag() const;
   std::string getLunit() const;
   std::string getMaxOccurs() const;
   float getT() const;
   float getTerr() const;
   std::string getTunit() const;
   float getTzcorr() const;
   float getX() const;
   float getXerr() const;
   float getXycorr() const;
   float getXzcorr() const;
   float getY() const;
   float getYerr() const;
   float getYzcorr() const;
   float getZ() const;
   float getZerr() const;
   int getMinOccurs() const;
   int getNumBlocks() const;
   void setNumBlocks(int numBlocks);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<FcalShowerNBlocks>;
   friend class HDDM_ElementLink<FcalShowerNBlocks>;
 private:
   FcalShowerNBlocks(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_numBlocks;
};

typedef HDDM_ElementList<FcalShowerNBlocks> FcalShowerNBlocksList;
typedef HDDM_ElementLink<FcalShowerNBlocks> FcalShowerNBlocksLink;

class FcalShower: public HDDM_Element {
 public:
   ~FcalShower();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   void setE(float E);
   float getEerr() const;
   void setEerr(float Eerr);
   std::string getEunit() const;
   float getEzcorr() const;
   void setEzcorr(float Ezcorr);
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   std::string getLunit() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   float getT() const;
   void setT(float t);
   float getTerr() const;
   void setTerr(float terr);
   std::string getTunit() const;
   float getTzcorr() const;
   void setTzcorr(float tzcorr);
   float getX() const;
   void setX(float x);
   float getXerr() const;
   void setXerr(float xerr);
   float getXycorr() const;
   void setXycorr(float xycorr);
   float getXzcorr() const;
   void setXzcorr(float xzcorr);
   float getY() const;
   void setY(float y);
   float getYerr() const;
   void setYerr(float yerr);
   float getYzcorr() const;
   void setYzcorr(float yzcorr);
   float getZ() const;
   void setZ(float z);
   float getZerr() const;
   void setZerr(float zerr);
   FcalCorrelations &getFcalCorrelations();
   FcalCorrelationsList &getFcalCorrelationses();
   FcalCorrelationsList addFcalCorrelationses(int count=1, int start=-1);
   void deleteFcalCorrelationses(int count=-1, int start=0);
   FcalShowerClassification &getFcalShowerClassification();
   FcalShowerClassificationList &getFcalShowerClassifications();
   FcalShowerClassificationList addFcalShowerClassifications(int count=1, int start=-1);
   void deleteFcalShowerClassifications(int count=-1, int start=0);
   FcalShowerProperties &getFcalShowerProperties();
   FcalShowerPropertiesList &getFcalShowerPropertiesList();
   FcalShowerPropertiesList addFcalShowerPropertiesList(int count=1, int start=-1);
   void deleteFcalShowerPropertiesList(int count=-1, int start=0);
   FcalShowerNBlocks &getFcalShowerNBlocks();
   FcalShowerNBlocksList &getFcalShowerNBlockses();
   FcalShowerNBlocksList addFcalShowerNBlockses(int count=1, int start=-1);
   void deleteFcalShowerNBlockses(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<FcalShower>;
   friend class HDDM_ElementLink<FcalShower>;
 private:
   FcalShower(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_E;
   float m_Eerr;
   float m_Ezcorr;
   std::string m_jtag;
   float m_t;
   float m_terr;
   float m_tzcorr;
   float m_x;
   float m_xerr;
   float m_xycorr;
   float m_xzcorr;
   float m_y;
   float m_yerr;
   float m_yzcorr;
   float m_z;
   float m_zerr;
   FcalCorrelationsLink m_fcalCorrelations_link;
   FcalShowerClassificationLink m_fcalShowerClassification_link;
   FcalShowerPropertiesLink m_fcalShowerProperties_link;
   FcalShowerNBlocksLink m_fcalShowerNBlocks_link;
};

typedef HDDM_ElementList<FcalShower> FcalShowerList;
typedef HDDM_ElementLink<FcalShower> FcalShowerLink;

class Preshower: public HDDM_Element {
 public:
   ~Preshower();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   float getEerr() const;
   std::string getEunit() const;
   float getEzcorr() const;
   std::string getJtag() const;
   std::string getLunit() const;
   float getT() const;
   float getTerr() const;
   std::string getTunit() const;
   float getTzcorr() const;
   float getX() const;
   float getXerr() const;
   float getXycorr() const;
   float getXzcorr() const;
   float getY() const;
   float getYerr() const;
   float getYzcorr() const;
   float getZ() const;
   float getZerr() const;
   int getMaxOccurs() const;
   int getMinOccurs() const;
   float getPreshowerE() const;
   void setPreshowerE(float preshowerE);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<Preshower>;
   friend class HDDM_ElementLink<Preshower>;
 private:
   Preshower(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_preshowerE;
};

typedef HDDM_ElementList<Preshower> PreshowerList;
typedef HDDM_ElementLink<Preshower> PreshowerLink;

class Width: public HDDM_Element {
 public:
   ~Width();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   float getEerr() const;
   std::string getEunit() const;
   float getEzcorr() const;
   std::string getJtag() const;
   std::string getLunit() const;
   float getT() const;
   float getTerr() const;
   std::string getTunit() const;
   float getTzcorr() const;
   float getX() const;
   float getXerr() const;
   float getXycorr() const;
   float getXzcorr() const;
   float getY() const;
   float getYerr() const;
   float getYzcorr() const;
   float getZ() const;
   float getZerr() const;
   int getMaxOccurs() const;
   int getMinOccurs() const;
   float getSigLong() const;
   void setSigLong(float sigLong);
   float getSigTheta() const;
   void setSigTheta(float sigTheta);
   float getSigTrans() const;
   void setSigTrans(float sigTrans);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<Width>;
   friend class HDDM_ElementLink<Width>;
 private:
   Width(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_sigLong;
   float m_sigTheta;
   float m_sigTrans;
};

typedef HDDM_ElementList<Width> WidthList;
typedef HDDM_ElementLink<Width> WidthLink;

class BcalCluster: public HDDM_Element {
 public:
   ~BcalCluster();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   float getEerr() const;
   std::string getEunit() const;
   float getEzcorr() const;
   std::string getJtag() const;
   std::string getLunit() const;
   float getT() const;
   float getTerr() const;
   std::string getTunit() const;
   float getTzcorr() const;
   float getX() const;
   float getXerr() const;
   float getXycorr() const;
   float getXzcorr() const;
   float getY() const;
   float getYerr() const;
   float getYzcorr() const;
   float getZ() const;
   float getZerr() const;
   int getMaxOccurs() const;
   int getMinOccurs() const;
   int getNcell() const;
   void setNcell(int ncell);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<BcalCluster>;
   friend class HDDM_ElementLink<BcalCluster>;
 private:
   BcalCluster(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_ncell;
};

typedef HDDM_ElementList<BcalCluster> BcalClusterList;
typedef HDDM_ElementLink<BcalCluster> BcalClusterLink;

class BcalCorrelations: public HDDM_Element {
 public:
   ~BcalCorrelations();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   float getEerr() const;
   std::string getEunit() const;
   float getEzcorr() const;
   std::string getJtag() const;
   std::string getLunit() const;
   float getT() const;
   float getTerr() const;
   std::string getTunit() const;
   float getTzcorr() const;
   float getX() const;
   float getXerr() const;
   float getXycorr() const;
   float getXzcorr() const;
   float getY() const;
   float getYerr() const;
   float getYzcorr() const;
   float getZ() const;
   float getZerr() const;
   float getEtcorr() const;
   void setEtcorr(float Etcorr);
   float getExcorr() const;
   void setExcorr(float Excorr);
   float getEycorr() const;
   void setEycorr(float Eycorr);
   int getMaxOccurs() const;
   int getMinOccurs() const;
   float getTxcorr() const;
   void setTxcorr(float txcorr);
   float getTycorr() const;
   void setTycorr(float tycorr);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<BcalCorrelations>;
   friend class HDDM_ElementLink<BcalCorrelations>;
 private:
   BcalCorrelations(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_Etcorr;
   float m_Excorr;
   float m_Eycorr;
   float m_txcorr;
   float m_tycorr;
};

typedef HDDM_ElementList<BcalCorrelations> BcalCorrelationsList;
typedef HDDM_ElementLink<BcalCorrelations> BcalCorrelationsLink;

class BcalLayers: public HDDM_Element {
 public:
   ~BcalLayers();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   float getEerr() const;
   std::string getEunit() const;
   float getEzcorr() const;
   std::string getJtag() const;
   std::string getLunit() const;
   float getT() const;
   float getTerr() const;
   std::string getTunit() const;
   float getTzcorr() const;
   float getX() const;
   float getXerr() const;
   float getXycorr() const;
   float getXzcorr() const;
   float getY() const;
   float getYerr() const;
   float getYzcorr() const;
   float getZ() const;
   float getZerr() const;
   float getE_L2() const;
   void setE_L2(float E_L2);
   float getE_L3() const;
   void setE_L3(float E_L3);
   float getE_L4() const;
   void setE_L4(float E_L4);
   int getMaxOccurs() const;
   int getMinOccurs() const;
   float getRmsTime() const;
   void setRmsTime(float rmsTime);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<BcalLayers>;
   friend class HDDM_ElementLink<BcalLayers>;
 private:
   BcalLayers(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_E_L2;
   float m_E_L3;
   float m_E_L4;
   float m_rmsTime;
};

typedef HDDM_ElementList<BcalLayers> BcalLayersList;
typedef HDDM_ElementLink<BcalLayers> BcalLayersLink;

class BcalShower: public HDDM_Element {
 public:
   ~BcalShower();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   void setE(float E);
   float getEerr() const;
   void setEerr(float Eerr);
   std::string getEunit() const;
   float getEzcorr() const;
   void setEzcorr(float Ezcorr);
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   std::string getLunit() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   float getT() const;
   void setT(float t);
   float getTerr() const;
   void setTerr(float terr);
   std::string getTunit() const;
   float getTzcorr() const;
   void setTzcorr(float tzcorr);
   float getX() const;
   void setX(float x);
   float getXerr() const;
   void setXerr(float xerr);
   float getXycorr() const;
   void setXycorr(float xycorr);
   float getXzcorr() const;
   void setXzcorr(float xzcorr);
   float getY() const;
   void setY(float y);
   float getYerr() const;
   void setYerr(float yerr);
   float getYzcorr() const;
   void setYzcorr(float yzcorr);
   float getZ() const;
   void setZ(float z);
   float getZerr() const;
   void setZerr(float zerr);
   Preshower &getPreshower();
   PreshowerList &getPreshowers();
   PreshowerList addPreshowers(int count=1, int start=-1);
   void deletePreshowers(int count=-1, int start=0);
   Width &getWidth();
   WidthList &getWidths();
   WidthList addWidths(int count=1, int start=-1);
   void deleteWidths(int count=-1, int start=0);
   BcalCluster &getBcalCluster();
   BcalClusterList &getBcalClusters();
   BcalClusterList addBcalClusters(int count=1, int start=-1);
   void deleteBcalClusters(int count=-1, int start=0);
   BcalCorrelations &getBcalCorrelations();
   BcalCorrelationsList &getBcalCorrelationses();
   BcalCorrelationsList addBcalCorrelationses(int count=1, int start=-1);
   void deleteBcalCorrelationses(int count=-1, int start=0);
   BcalLayers &getBcalLayers();
   BcalLayersList &getBcalLayerses();
   BcalLayersList addBcalLayerses(int count=1, int start=-1);
   void deleteBcalLayerses(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<BcalShower>;
   friend class HDDM_ElementLink<BcalShower>;
 private:
   BcalShower(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_E;
   float m_Eerr;
   float m_Ezcorr;
   std::string m_jtag;
   float m_t;
   float m_terr;
   float m_tzcorr;
   float m_x;
   float m_xerr;
   float m_xycorr;
   float m_xzcorr;
   float m_y;
   float m_yerr;
   float m_yzcorr;
   float m_z;
   float m_zerr;
   PreshowerLink m_preshower_link;
   WidthLink m_width_link;
   BcalClusterLink m_bcalCluster_link;
   BcalCorrelationsLink m_bcalCorrelations_link;
   BcalLayersLink m_bcalLayers_link;
};

typedef HDDM_ElementList<BcalShower> BcalShowerList;
typedef HDDM_ElementLink<BcalShower> BcalShowerLink;

class CcalShower: public HDDM_Element {
 public:
   ~CcalShower();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   float getE() const;
   void setE(float E);
   float getEerr() const;
   void setEerr(float Eerr);
   float getEmax() const;
   void setEmax(float Emax);
   std::string getEunit() const;
   float getChi2() const;
   void setChi2(float chi2);
   int getDime() const;
   void setDime(int dime);
   int getId() const;
   void setId(int id);
   int getIdmax() const;
   void setIdmax(int idmax);
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   std::string getLunit() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   float getT() const;
   void setT(float t);
   float getTerr() const;
   void setTerr(float terr);
   std::string getTunit() const;
   int getType() const;
   void setType(int type);
   float getX() const;
   void setX(float x);
   float getX1() const;
   void setX1(float x1);
   float getY() const;
   void setY(float y);
   float getY1() const;
   void setY1(float y1);
   float getZ() const;
   void setZ(float z);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<CcalShower>;
   friend class HDDM_ElementLink<CcalShower>;
 private:
   CcalShower(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_E;
   float m_Eerr;
   float m_Emax;
   float m_chi2;
   int m_dime;
   int m_id;
   int m_idmax;
   std::string m_jtag;
   float m_t;
   float m_terr;
   int m_type;
   float m_x;
   float m_x1;
   float m_y;
   float m_y1;
   float m_z;
};

typedef HDDM_ElementList<CcalShower> CcalShowerList;
typedef HDDM_ElementLink<CcalShower> CcalShowerLink;

class TrackFit: public HDDM_Element {
 public:
   ~TrackFit();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   int getCandidateId() const;
   std::string getJtag() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   Particle_t getPtype() const;
   int getNdof() const;
   void setNdof(int Ndof);
   float getChisq() const;
   void setChisq(float chisq);
   float getE11() const;
   void setE11(float e11);
   float getE12() const;
   void setE12(float e12);
   float getE13() const;
   void setE13(float e13);
   float getE14() const;
   void setE14(float e14);
   float getE15() const;
   void setE15(float e15);
   float getE22() const;
   void setE22(float e22);
   float getE23() const;
   void setE23(float e23);
   float getE24() const;
   void setE24(float e24);
   float getE25() const;
   void setE25(float e25);
   float getE33() const;
   void setE33(float e33);
   float getE34() const;
   void setE34(float e34);
   float getE35() const;
   void setE35(float e35);
   float getE44() const;
   void setE44(float e44);
   float getE45() const;
   void setE45(float e45);
   float getE55() const;
   void setE55(float e55);
   std::string getLunit() const;
   std::string getPunit() const;
   float getPx() const;
   void setPx(float px);
   float getPy() const;
   void setPy(float py);
   float getPz() const;
   void setPz(float pz);
   float getT0() const;
   void setT0(float t0);
   int getT0det() const;
   void setT0det(int t0det);
   float getT0err() const;
   void setT0err(float t0err);
   std::string getTunit() const;
   float getX0() const;
   void setX0(float x0);
   float getY0() const;
   void setY0(float y0);
   float getZ0() const;
   void setZ0(float z0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<TrackFit>;
   friend class HDDM_ElementLink<TrackFit>;
 private:
   TrackFit(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_Ndof;
   float m_chisq;
   float m_e11;
   float m_e12;
   float m_e13;
   float m_e14;
   float m_e15;
   float m_e22;
   float m_e23;
   float m_e24;
   float m_e25;
   float m_e33;
   float m_e34;
   float m_e35;
   float m_e44;
   float m_e45;
   float m_e55;
   float m_px;
   float m_py;
   float m_pz;
   float m_t0;
   int m_t0det;
   float m_t0err;
   float m_x0;
   float m_y0;
   float m_z0;
};

typedef HDDM_ElementList<TrackFit> TrackFitList;
typedef HDDM_ElementLink<TrackFit> TrackFitLink;

class TrackFlags: public HDDM_Element {
 public:
   ~TrackFlags();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   int getCandidateId() const;
   std::string getJtag() const;
   Particle_t getPtype() const;
   int getFlags() const;
   void setFlags(int flags);
   int getMaxOccurs() const;
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<TrackFlags>;
   friend class HDDM_ElementLink<TrackFlags>;
 private:
   TrackFlags(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_flags;
};

typedef HDDM_ElementList<TrackFlags> TrackFlagsList;
typedef HDDM_ElementLink<TrackFlags> TrackFlagsLink;

class Hitlayers: public HDDM_Element {
 public:
   ~Hitlayers();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   int getCandidateId() const;
   std::string getJtag() const;
   Particle_t getPtype() const;
   int getCDCrings() const;
   void setCDCrings(int CDCrings);
   int getFDCplanes() const;
   void setFDCplanes(int FDCplanes);
   int getMaxOccurs() const;
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<Hitlayers>;
   friend class HDDM_ElementLink<Hitlayers>;
 private:
   Hitlayers(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_CDCrings;
   int m_FDCplanes;
};

typedef HDDM_ElementList<Hitlayers> HitlayersList;
typedef HDDM_ElementLink<Hitlayers> HitlayersLink;

class Expectedhits: public HDDM_Element {
 public:
   ~Expectedhits();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   int getCandidateId() const;
   std::string getJtag() const;
   Particle_t getPtype() const;
   int getExpectedCDChits() const;
   void setExpectedCDChits(int expectedCDChits);
   int getExpectedFDChits() const;
   void setExpectedFDChits(int expectedFDChits);
   int getMaxOccurs() const;
   int getMeasuredCDChits() const;
   void setMeasuredCDChits(int measuredCDChits);
   int getMeasuredFDChits() const;
   void setMeasuredFDChits(int measuredFDChits);
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<Expectedhits>;
   friend class HDDM_ElementLink<Expectedhits>;
 private:
   Expectedhits(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_expectedCDChits;
   int m_expectedFDChits;
   int m_measuredCDChits;
   int m_measuredFDChits;
};

typedef HDDM_ElementList<Expectedhits> ExpectedhitsList;
typedef HDDM_ElementLink<Expectedhits> ExpectedhitsLink;

class Mcmatch: public HDDM_Element {
 public:
   ~Mcmatch();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   int getCandidateId() const;
   std::string getJtag() const;
   Particle_t getPtype() const;
   int getIthrown() const;
   void setIthrown(int ithrown);
   int getMaxOccurs() const;
   int getMinOccurs() const;
   int getNumhitsmatch() const;
   void setNumhitsmatch(int numhitsmatch);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<Mcmatch>;
   friend class HDDM_ElementLink<Mcmatch>;
 private:
   Mcmatch(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_ithrown;
   int m_numhitsmatch;
};

typedef HDDM_ElementList<Mcmatch> McmatchList;
typedef HDDM_ElementLink<Mcmatch> McmatchLink;

class CDCAmpdEdx: public HDDM_Element {
 public:
   ~CDCAmpdEdx();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   int getCandidateId() const;
   std::string getJtag() const;
   std::string getMaxOccurs() const;
   Particle_t getPtype() const;
   int getNsampleCDC() const;
   int getNsampleFDC() const;
   float getDEdxCDC() const;
   float getDEdxFDC() const;
   std::string getDEdx_unit() const;
   float getDxCDC() const;
   float getDxFDC() const;
   std::string getLunit() const;
   float getDEdxCDCAmp() const;
   void setDEdxCDCAmp(float dEdxCDCAmp);
   float getDxCDCAmp() const;
   void setDxCDCAmp(float dxCDCAmp);
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<CDCAmpdEdx>;
   friend class HDDM_ElementLink<CDCAmpdEdx>;
 private:
   CDCAmpdEdx(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_dEdxCDCAmp;
   float m_dxCDCAmp;
};

typedef HDDM_ElementList<CDCAmpdEdx> CDCAmpdEdxList;
typedef HDDM_ElementLink<CDCAmpdEdx> CDCAmpdEdxLink;

class DEdxDC: public HDDM_Element {
 public:
   ~DEdxDC();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   int getCandidateId() const;
   std::string getJtag() const;
   std::string getMaxOccurs() const;
   Particle_t getPtype() const;
   int getNsampleCDC() const;
   void setNsampleCDC(int NsampleCDC);
   int getNsampleFDC() const;
   void setNsampleFDC(int NsampleFDC);
   float getDEdxCDC() const;
   void setDEdxCDC(float dEdxCDC);
   float getDEdxFDC() const;
   void setDEdxFDC(float dEdxFDC);
   std::string getDEdx_unit() const;
   float getDxCDC() const;
   void setDxCDC(float dxCDC);
   float getDxFDC() const;
   void setDxFDC(float dxFDC);
   std::string getLunit() const;
   int getMinOccurs() const;
   CDCAmpdEdx &getCDCAmpdEdx();
   CDCAmpdEdxList &getCDCAmpdEdxs();
   CDCAmpdEdxList addCDCAmpdEdxs(int count=1, int start=-1);
   void deleteCDCAmpdEdxs(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<DEdxDC>;
   friend class HDDM_ElementLink<DEdxDC>;
 private:
   DEdxDC(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_NsampleCDC;
   int m_NsampleFDC;
   float m_dEdxCDC;
   float m_dEdxFDC;
   float m_dxCDC;
   float m_dxFDC;
   CDCAmpdEdxLink m_CDCAmpdEdx_link;
};

typedef HDDM_ElementList<DEdxDC> DEdxDCList;
typedef HDDM_ElementLink<DEdxDC> DEdxDCLink;

class ExitParams: public HDDM_Element {
 public:
   ~ExitParams();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   int getCandidateId() const;
   std::string getJtag() const;
   Particle_t getPtype() const;
   std::string getLunit() const;
   int getMaxOccurs() const;
   int getMinOccurs() const;
   std::string getPunit() const;
   float getPx1() const;
   void setPx1(float px1);
   float getPy1() const;
   void setPy1(float py1);
   float getPz1() const;
   void setPz1(float pz1);
   float getT1() const;
   void setT1(float t1);
   std::string getTunit() const;
   float getX1() const;
   void setX1(float x1);
   float getY1() const;
   void setY1(float y1);
   float getZ1() const;
   void setZ1(float z1);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<ExitParams>;
   friend class HDDM_ElementLink<ExitParams>;
 private:
   ExitParams(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_px1;
   float m_py1;
   float m_pz1;
   float m_t1;
   float m_x1;
   float m_y1;
   float m_z1;
};

typedef HDDM_ElementList<ExitParams> ExitParamsList;
typedef HDDM_ElementLink<ExitParams> ExitParamsLink;

class ChargedTrack: public HDDM_Element {
 public:
   ~ChargedTrack();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   int getCandidateId() const;
   void setCandidateId(int candidateId);
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   Particle_t getPtype() const;
   void setPtype(Particle_t ptype);
   TrackFit &getTrackFit();
   TrackFitList &getTrackFits();
   TrackFitList addTrackFits(int count=1, int start=-1);
   void deleteTrackFits(int count=-1, int start=0);
   TrackFlags &getTrackFlags();
   TrackFlagsList &getTrackFlagses();
   TrackFlagsList addTrackFlagses(int count=1, int start=-1);
   void deleteTrackFlagses(int count=-1, int start=0);
   Hitlayers &getHitlayers();
   HitlayersList &getHitlayerses();
   HitlayersList addHitlayerses(int count=1, int start=-1);
   void deleteHitlayerses(int count=-1, int start=0);
   Expectedhits &getExpectedhits();
   ExpectedhitsList &getExpectedhitses();
   ExpectedhitsList addExpectedhitses(int count=1, int start=-1);
   void deleteExpectedhitses(int count=-1, int start=0);
   Mcmatch &getMcmatch();
   McmatchList &getMcmatchs();
   McmatchList addMcmatchs(int count=1, int start=-1);
   void deleteMcmatchs(int count=-1, int start=0);
   DEdxDC &getDEdxDC();
   DEdxDCList &getDEdxDCs();
   DEdxDCList addDEdxDCs(int count=1, int start=-1);
   void deleteDEdxDCs(int count=-1, int start=0);
   ExitParams &getExitParams();
   ExitParamsList &getExitParamses();
   ExitParamsList addExitParamses(int count=1, int start=-1);
   void deleteExitParamses(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<ChargedTrack>;
   friend class HDDM_ElementLink<ChargedTrack>;
 private:
   ChargedTrack(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_candidateId;
   std::string m_jtag;
   int m_ptype;
   TrackFitLink m_trackFit_link;
   TrackFlagsLink m_trackFlags_link;
   HitlayersLink m_hitlayers_link;
   ExpectedhitsLink m_expectedhits_link;
   McmatchLink m_mcmatch_link;
   DEdxDCLink m_dEdxDC_link;
   ExitParamsLink m_exitParams_link;
};

typedef HDDM_ElementList<ChargedTrack> ChargedTrackList;
typedef HDDM_ElementLink<ChargedTrack> ChargedTrackLink;

class StartHit: public HDDM_Element {
 public:
   ~StartHit();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getEunit() const;
   float getDE() const;
   void setDE(float dE);
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   int getSector() const;
   void setSector(int sector);
   float getT() const;
   void setT(float t);
   std::string getTunit() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<StartHit>;
   friend class HDDM_ElementLink<StartHit>;
 private:
   StartHit(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_dE;
   std::string m_jtag;
   int m_sector;
   float m_t;
};

typedef HDDM_ElementList<StartHit> StartHitList;
typedef HDDM_ElementLink<StartHit> StartHitLink;

class TofStatus: public HDDM_Element {
 public:
   ~TofStatus();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getEunit() const;
   float getDE() const;
   std::string getJtag() const;
   std::string getLunit() const;
   float getT() const;
   float getTerr() const;
   std::string getTunit() const;
   float getX() const;
   float getY() const;
   float getZ() const;
   int getMaxOccurs() const;
   int getMinOccurs() const;
   int getStatus() const;
   void setStatus(int status);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<TofStatus>;
   friend class HDDM_ElementLink<TofStatus>;
 private:
   TofStatus(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_status;
};

typedef HDDM_ElementList<TofStatus> TofStatusList;
typedef HDDM_ElementLink<TofStatus> TofStatusLink;

class TofEnergyDeposition: public HDDM_Element {
 public:
   ~TofEnergyDeposition();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getEunit() const;
   float getDE() const;
   std::string getJtag() const;
   std::string getLunit() const;
   float getT() const;
   float getTerr() const;
   std::string getTunit() const;
   float getX() const;
   float getY() const;
   float getZ() const;
   float getDE1() const;
   void setDE1(float dE1);
   float getDE2() const;
   void setDE2(float dE2);
   int getMaxOccurs() const;
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<TofEnergyDeposition>;
   friend class HDDM_ElementLink<TofEnergyDeposition>;
 private:
   TofEnergyDeposition(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_dE1;
   float m_dE2;
};

typedef HDDM_ElementList<TofEnergyDeposition> TofEnergyDepositionList;
typedef HDDM_ElementLink<TofEnergyDeposition> TofEnergyDepositionLink;

class TofPoint: public HDDM_Element {
 public:
   ~TofPoint();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getEunit() const;
   float getDE() const;
   void setDE(float dE);
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   std::string getLunit() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   float getT() const;
   void setT(float t);
   float getTerr() const;
   void setTerr(float terr);
   std::string getTunit() const;
   float getX() const;
   void setX(float x);
   float getY() const;
   void setY(float y);
   float getZ() const;
   void setZ(float z);
   TofStatus &getTofStatus();
   TofStatusList &getTofStatuses();
   TofStatusList addTofStatuses(int count=1, int start=-1);
   void deleteTofStatuses(int count=-1, int start=0);
   TofEnergyDeposition &getTofEnergyDeposition();
   TofEnergyDepositionList &getTofEnergyDepositions();
   TofEnergyDepositionList addTofEnergyDepositions(int count=1, int start=-1);
   void deleteTofEnergyDepositions(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<TofPoint>;
   friend class HDDM_ElementLink<TofPoint>;
 private:
   TofPoint(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_dE;
   std::string m_jtag;
   float m_t;
   float m_terr;
   float m_x;
   float m_y;
   float m_z;
   TofStatusLink m_tofStatus_link;
   TofEnergyDepositionLink m_tofEnergyDeposition_link;
};

typedef HDDM_ElementList<TofPoint> TofPointList;
typedef HDDM_ElementLink<TofPoint> TofPointLink;

class DircHit: public HDDM_Element {
 public:
   ~DircHit();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   int getCh() const;
   void setCh(int ch);
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   float getT() const;
   void setT(float t);
   float getTot() const;
   void setTot(float tot);
   std::string getTunit() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<DircHit>;
   friend class HDDM_ElementLink<DircHit>;
 private:
   DircHit(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_ch;
   std::string m_jtag;
   float m_t;
   float m_tot;
};

typedef HDDM_ElementList<DircHit> DircHitList;
typedef HDDM_ElementLink<DircHit> DircHitLink;

class RFtime: public HDDM_Element {
 public:
   ~RFtime();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   int getMinOccurs() const;
   float getTsync() const;
   void setTsync(float tsync);
   std::string getTunit() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<RFtime>;
   friend class HDDM_ElementLink<RFtime>;
 private:
   RFtime(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   std::string m_jtag;
   float m_tsync;
};

typedef HDDM_ElementList<RFtime> RFtimeList;
typedef HDDM_ElementLink<RFtime> RFtimeLink;

class TriggerEnergySums: public HDDM_Element {
 public:
   ~TriggerEnergySums();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   int getL1_fp_trig_bits() const;
   int getL1_trig_bits() const;
   int getMaxOccurs() const;
   float getBCALEnergySum() const;
   void setBCALEnergySum(float BCALEnergySum);
   float getFCALEnergySum() const;
   void setFCALEnergySum(float FCALEnergySum);
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<TriggerEnergySums>;
   friend class HDDM_ElementLink<TriggerEnergySums>;
 private:
   TriggerEnergySums(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_BCALEnergySum;
   float m_FCALEnergySum;
};

typedef HDDM_ElementList<TriggerEnergySums> TriggerEnergySumsList;
typedef HDDM_ElementLink<TriggerEnergySums> TriggerEnergySumsLink;

class Trigger: public HDDM_Element {
 public:
   ~Trigger();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   int getL1_fp_trig_bits() const;
   void setL1_fp_trig_bits(int l1_fp_trig_bits);
   int getL1_trig_bits() const;
   void setL1_trig_bits(int l1_trig_bits);
   int getMaxOccurs() const;
   int getMinOccurs() const;
   TriggerEnergySums &getTriggerEnergySums();
   TriggerEnergySumsList &getTriggerEnergySumses();
   TriggerEnergySumsList addTriggerEnergySumses(int count=1, int start=-1);
   void deleteTriggerEnergySumses(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<Trigger>;
   friend class HDDM_ElementLink<Trigger>;
 private:
   Trigger(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   std::string m_jtag;
   int m_l1_fp_trig_bits;
   int m_l1_trig_bits;
   TriggerEnergySumsLink m_triggerEnergySums_link;
};

typedef HDDM_ElementList<Trigger> TriggerList;
typedef HDDM_ElementLink<Trigger> TriggerLink;

class BcalMatchParams: public HDDM_Element {
 public:
   ~BcalMatchParams();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   float getDeltaphi() const;
   void setDeltaphi(float deltaphi);
   float getDeltaz() const;
   void setDeltaz(float deltaz);
   float getDx() const;
   void setDx(float dx);
   std::string getLunit() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   float getPathlength() const;
   void setPathlength(float pathlength);
   int getShower() const;
   void setShower(int shower);
   float getTflight() const;
   void setTflight(float tflight);
   float getTflightvar() const;
   void setTflightvar(float tflightvar);
   int getTrack() const;
   void setTrack(int track);
   std::string getTunit() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<BcalMatchParams>;
   friend class HDDM_ElementLink<BcalMatchParams>;
 private:
   BcalMatchParams(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_deltaphi;
   float m_deltaz;
   float m_dx;
   float m_pathlength;
   int m_shower;
   float m_tflight;
   float m_tflightvar;
   int m_track;
};

typedef HDDM_ElementList<BcalMatchParams> BcalMatchParamsList;
typedef HDDM_ElementLink<BcalMatchParams> BcalMatchParamsLink;

class FcalMatchParams: public HDDM_Element {
 public:
   ~FcalMatchParams();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   float getDoca() const;
   void setDoca(float doca);
   float getDx() const;
   void setDx(float dx);
   std::string getLunit() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   float getPathlength() const;
   void setPathlength(float pathlength);
   int getShower() const;
   void setShower(int shower);
   float getTflight() const;
   void setTflight(float tflight);
   float getTflightvar() const;
   void setTflightvar(float tflightvar);
   int getTrack() const;
   void setTrack(int track);
   std::string getTunit() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<FcalMatchParams>;
   friend class HDDM_ElementLink<FcalMatchParams>;
 private:
   FcalMatchParams(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_doca;
   float m_dx;
   float m_pathlength;
   int m_shower;
   float m_tflight;
   float m_tflightvar;
   int m_track;
};

typedef HDDM_ElementList<FcalMatchParams> FcalMatchParamsList;
typedef HDDM_ElementLink<FcalMatchParams> FcalMatchParamsLink;

class TofDedx: public HDDM_Element {
 public:
   ~TofDedx();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   float getDEdx() const;
   std::string getDEdx_unit() const;
   float getDeltax() const;
   float getDeltay() const;
   float getEhit() const;
   int getHit() const;
   std::string getLunit() const;
   float getPathlength() const;
   float getTflight() const;
   float getTflightvar() const;
   float getThit() const;
   float getThitvar() const;
   int getTrack() const;
   std::string getTunit() const;
   float getDEdx1() const;
   void setDEdx1(float dEdx1);
   float getDEdx2() const;
   void setDEdx2(float dEdx2);
   int getMaxOccurs() const;
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<TofDedx>;
   friend class HDDM_ElementLink<TofDedx>;
 private:
   TofDedx(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_dEdx1;
   float m_dEdx2;
};

typedef HDDM_ElementList<TofDedx> TofDedxList;
typedef HDDM_ElementLink<TofDedx> TofDedxLink;

class TofMatchParams: public HDDM_Element {
 public:
   ~TofMatchParams();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   float getDEdx() const;
   void setDEdx(float dEdx);
   std::string getDEdx_unit() const;
   float getDeltax() const;
   void setDeltax(float deltax);
   float getDeltay() const;
   void setDeltay(float deltay);
   float getEhit() const;
   void setEhit(float ehit);
   int getHit() const;
   void setHit(int hit);
   std::string getLunit() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   float getPathlength() const;
   void setPathlength(float pathlength);
   float getTflight() const;
   void setTflight(float tflight);
   float getTflightvar() const;
   void setTflightvar(float tflightvar);
   float getThit() const;
   void setThit(float thit);
   float getThitvar() const;
   void setThitvar(float thitvar);
   int getTrack() const;
   void setTrack(int track);
   std::string getTunit() const;
   TofDedx &getTofDedx();
   TofDedxList &getTofDedxs();
   TofDedxList addTofDedxs(int count=1, int start=-1);
   void deleteTofDedxs(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<TofMatchParams>;
   friend class HDDM_ElementLink<TofMatchParams>;
 private:
   TofMatchParams(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_dEdx;
   float m_deltax;
   float m_deltay;
   float m_ehit;
   int m_hit;
   float m_pathlength;
   float m_tflight;
   float m_tflightvar;
   float m_thit;
   float m_thitvar;
   int m_track;
   TofDedxLink m_tofDedx_link;
};

typedef HDDM_ElementList<TofMatchParams> TofMatchParamsList;
typedef HDDM_ElementLink<TofMatchParams> TofMatchParamsLink;

class ScMatchParams: public HDDM_Element {
 public:
   ~ScMatchParams();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   std::string getEunit() const;
   std::string getAunit() const;
   float getDEdx() const;
   void setDEdx(float dEdx);
   std::string getDEdx_unit() const;
   float getDeltaphi() const;
   void setDeltaphi(float deltaphi);
   float getEhit() const;
   void setEhit(float ehit);
   int getHit() const;
   void setHit(int hit);
   std::string getLunit() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   float getPathlength() const;
   void setPathlength(float pathlength);
   float getTflight() const;
   void setTflight(float tflight);
   float getTflightvar() const;
   void setTflightvar(float tflightvar);
   float getThit() const;
   void setThit(float thit);
   float getThitvar() const;
   void setThitvar(float thitvar);
   int getTrack() const;
   void setTrack(int track);
   std::string getTunit() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<ScMatchParams>;
   friend class HDDM_ElementLink<ScMatchParams>;
 private:
   ScMatchParams(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_dEdx;
   float m_deltaphi;
   float m_ehit;
   int m_hit;
   float m_pathlength;
   float m_tflight;
   float m_tflightvar;
   float m_thit;
   float m_thitvar;
   int m_track;
};

typedef HDDM_ElementList<ScMatchParams> ScMatchParamsList;
typedef HDDM_ElementLink<ScMatchParams> ScMatchParamsLink;

class DircMatchParams: public HDDM_Element {
 public:
   ~DircMatchParams();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   float getDeltat() const;
   void setDeltat(float deltat);
   float getExpectthetac() const;
   void setExpectthetac(float expectthetac);
   float getLele() const;
   void setLele(float lele);
   float getLk() const;
   void setLk(float lk);
   float getLp() const;
   void setLp(float lp);
   float getLpi() const;
   void setLpi(float lpi);
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   int getNphotons() const;
   void setNphotons(int nphotons);
   float getPx() const;
   void setPx(float px);
   float getPy() const;
   void setPy(float py);
   float getPz() const;
   void setPz(float pz);
   float getT() const;
   void setT(float t);
   float getThetac() const;
   void setThetac(float thetac);
   int getTrack() const;
   void setTrack(int track);
   float getX() const;
   void setX(float x);
   float getY() const;
   void setY(float y);
   float getZ() const;
   void setZ(float z);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<DircMatchParams>;
   friend class HDDM_ElementLink<DircMatchParams>;
 private:
   DircMatchParams(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_deltat;
   float m_expectthetac;
   float m_lele;
   float m_lk;
   float m_lp;
   float m_lpi;
   int m_nphotons;
   float m_px;
   float m_py;
   float m_pz;
   float m_t;
   float m_thetac;
   int m_track;
   float m_x;
   float m_y;
   float m_z;
};

typedef HDDM_ElementList<DircMatchParams> DircMatchParamsList;
typedef HDDM_ElementLink<DircMatchParams> DircMatchParamsLink;

class DircMatchHit: public HDDM_Element {
 public:
   ~DircMatchHit();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   int getHit() const;
   void setHit(int hit);
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   int getTrack() const;
   void setTrack(int track);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<DircMatchHit>;
   friend class HDDM_ElementLink<DircMatchHit>;
 private:
   DircMatchHit(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_hit;
   int m_track;
};

typedef HDDM_ElementList<DircMatchHit> DircMatchHitList;
typedef HDDM_ElementLink<DircMatchHit> DircMatchHitLink;

class BcalDOCAtoTrack: public HDDM_Element {
 public:
   ~BcalDOCAtoTrack();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   float getDeltaphi() const;
   void setDeltaphi(float deltaphi);
   float getDeltaz() const;
   void setDeltaz(float deltaz);
   std::string getLunit() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   int getShower() const;
   void setShower(int shower);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<BcalDOCAtoTrack>;
   friend class HDDM_ElementLink<BcalDOCAtoTrack>;
 private:
   BcalDOCAtoTrack(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_deltaphi;
   float m_deltaz;
   int m_shower;
};

typedef HDDM_ElementList<BcalDOCAtoTrack> BcalDOCAtoTrackList;
typedef HDDM_ElementLink<BcalDOCAtoTrack> BcalDOCAtoTrackLink;

class FcalDOCAtoTrack: public HDDM_Element {
 public:
   ~FcalDOCAtoTrack();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   float getDoca() const;
   void setDoca(float doca);
   std::string getLunit() const;
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   int getShower() const;
   void setShower(int shower);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<FcalDOCAtoTrack>;
   friend class HDDM_ElementLink<FcalDOCAtoTrack>;
 private:
   FcalDOCAtoTrack(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_doca;
   int m_shower;
};

typedef HDDM_ElementList<FcalDOCAtoTrack> FcalDOCAtoTrackList;
typedef HDDM_ElementLink<FcalDOCAtoTrack> FcalDOCAtoTrackLink;

class TflightPCorrelation: public HDDM_Element {
 public:
   ~TflightPCorrelation();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   float getCorrelation() const;
   void setCorrelation(float correlation);
   std::string getMaxOccurs() const;
   int getMinOccurs() const;
   std::string getPunit() const;
   int getSystem() const;
   void setSystem(int system);
   int getTrack() const;
   void setTrack(int track);
   std::string getTunit() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<TflightPCorrelation>;
   friend class HDDM_ElementLink<TflightPCorrelation>;
 private:
   TflightPCorrelation(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   float m_correlation;
   int m_system;
   int m_track;
};

typedef HDDM_ElementList<TflightPCorrelation> TflightPCorrelationList;
typedef HDDM_ElementLink<TflightPCorrelation> TflightPCorrelationLink;

class DetectorMatches: public HDDM_Element {
 public:
   ~DetectorMatches();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   int getMaxOccurs() const;
   int getMinOccurs() const;
   BcalMatchParams &getBcalMatchParams(int index=0);
   BcalMatchParamsList &getBcalMatchParamses();
   BcalMatchParamsList addBcalMatchParamses(int count=1, int start=-1);
   void deleteBcalMatchParamses(int count=-1, int start=0);
   FcalMatchParams &getFcalMatchParams(int index=0);
   FcalMatchParamsList &getFcalMatchParamses();
   FcalMatchParamsList addFcalMatchParamses(int count=1, int start=-1);
   void deleteFcalMatchParamses(int count=-1, int start=0);
   TofMatchParams &getTofMatchParams(int index=0);
   TofMatchParamsList &getTofMatchParamses();
   TofMatchParamsList addTofMatchParamses(int count=1, int start=-1);
   void deleteTofMatchParamses(int count=-1, int start=0);
   ScMatchParams &getScMatchParams(int index=0);
   ScMatchParamsList &getScMatchParamses();
   ScMatchParamsList addScMatchParamses(int count=1, int start=-1);
   void deleteScMatchParamses(int count=-1, int start=0);
   DircMatchParams &getDircMatchParams(int index=0);
   DircMatchParamsList &getDircMatchParamses();
   DircMatchParamsList addDircMatchParamses(int count=1, int start=-1);
   void deleteDircMatchParamses(int count=-1, int start=0);
   DircMatchHit &getDircMatchHit(int index=0);
   DircMatchHitList &getDircMatchHits();
   DircMatchHitList addDircMatchHits(int count=1, int start=-1);
   void deleteDircMatchHits(int count=-1, int start=0);
   BcalDOCAtoTrack &getBcalDOCAtoTrack(int index=0);
   BcalDOCAtoTrackList &getBcalDOCAtoTracks();
   BcalDOCAtoTrackList addBcalDOCAtoTracks(int count=1, int start=-1);
   void deleteBcalDOCAtoTracks(int count=-1, int start=0);
   FcalDOCAtoTrack &getFcalDOCAtoTrack(int index=0);
   FcalDOCAtoTrackList &getFcalDOCAtoTracks();
   FcalDOCAtoTrackList addFcalDOCAtoTracks(int count=1, int start=-1);
   void deleteFcalDOCAtoTracks(int count=-1, int start=0);
   TflightPCorrelation &getTflightPCorrelation(int index=0);
   TflightPCorrelationList &getTflightPCorrelations();
   TflightPCorrelationList addTflightPCorrelations(int count=1, int start=-1);
   void deleteTflightPCorrelations(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<DetectorMatches>;
   friend class HDDM_ElementLink<DetectorMatches>;
 private:
   DetectorMatches(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   std::string m_jtag;
   BcalMatchParamsList m_bcalMatchParams_list;
   FcalMatchParamsList m_fcalMatchParams_list;
   TofMatchParamsList m_tofMatchParams_list;
   ScMatchParamsList m_scMatchParams_list;
   DircMatchParamsList m_dircMatchParams_list;
   DircMatchHitList m_dircMatchHit_list;
   BcalDOCAtoTrackList m_bcalDOCAtoTrack_list;
   FcalDOCAtoTrackList m_fcalDOCAtoTrack_list;
   TflightPCorrelationList m_tflightPCorrelation_list;
};

typedef HDDM_ElementList<DetectorMatches> DetectorMatchesList;
typedef HDDM_ElementLink<DetectorMatches> DetectorMatchesLink;

class StartCounters: public HDDM_Element {
 public:
   ~StartCounters();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   int getCount() const;
   void setCount(int count);
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<StartCounters>;
   friend class HDDM_ElementLink<StartCounters>;
 private:
   StartCounters(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_count;
};

typedef HDDM_ElementList<StartCounters> StartCountersList;
typedef HDDM_ElementLink<StartCounters> StartCountersLink;

class CdcStraws: public HDDM_Element {
 public:
   ~CdcStraws();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   int getCount() const;
   void setCount(int count);
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<CdcStraws>;
   friend class HDDM_ElementLink<CdcStraws>;
 private:
   CdcStraws(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_count;
};

typedef HDDM_ElementList<CdcStraws> CdcStrawsList;
typedef HDDM_ElementLink<CdcStraws> CdcStrawsLink;

class FdcPseudos: public HDDM_Element {
 public:
   ~FdcPseudos();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   int getCount() const;
   void setCount(int count);
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<FdcPseudos>;
   friend class HDDM_ElementLink<FdcPseudos>;
 private:
   FdcPseudos(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_count;
};

typedef HDDM_ElementList<FdcPseudos> FdcPseudosList;
typedef HDDM_ElementLink<FdcPseudos> FdcPseudosLink;

class BcalCells: public HDDM_Element {
 public:
   ~BcalCells();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   int getCount() const;
   void setCount(int count);
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<BcalCells>;
   friend class HDDM_ElementLink<BcalCells>;
 private:
   BcalCells(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_count;
};

typedef HDDM_ElementList<BcalCells> BcalCellsList;
typedef HDDM_ElementLink<BcalCells> BcalCellsLink;

class FcalBlocks: public HDDM_Element {
 public:
   ~FcalBlocks();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   int getCount() const;
   void setCount(int count);
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<FcalBlocks>;
   friend class HDDM_ElementLink<FcalBlocks>;
 private:
   FcalBlocks(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_count;
};

typedef HDDM_ElementList<FcalBlocks> FcalBlocksList;
typedef HDDM_ElementLink<FcalBlocks> FcalBlocksLink;

class TofPaddles: public HDDM_Element {
 public:
   ~TofPaddles();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   int getCount() const;
   void setCount(int count);
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<TofPaddles>;
   friend class HDDM_ElementLink<TofPaddles>;
 private:
   TofPaddles(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_count;
};

typedef HDDM_ElementList<TofPaddles> TofPaddlesList;
typedef HDDM_ElementLink<TofPaddles> TofPaddlesLink;

class CcalBlocks: public HDDM_Element {
 public:
   ~CcalBlocks();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   int getCount() const;
   void setCount(int count);
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<CcalBlocks>;
   friend class HDDM_ElementLink<CcalBlocks>;
 private:
   CcalBlocks(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_count;
};

typedef HDDM_ElementList<CcalBlocks> CcalBlocksList;
typedef HDDM_ElementLink<CcalBlocks> CcalBlocksLink;

class DircPMTs: public HDDM_Element {
 public:
   ~DircPMTs();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   int getCount() const;
   void setCount(int count);
   int getMinOccurs() const;
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<DircPMTs>;
   friend class HDDM_ElementLink<DircPMTs>;
 private:
   DircPMTs(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int m_count;
};

typedef HDDM_ElementList<DircPMTs> DircPMTsList;
typedef HDDM_ElementLink<DircPMTs> DircPMTsLink;

class HitStatistics: public HDDM_Element {
 public:
   ~HitStatistics();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   int getRunNo() const;
   std::string getJtag() const;
   void setJtag(const std::string &jtag);
   int getMinOccurs() const;
   StartCounters &getStartCounters();
   StartCountersList &getStartCounterses();
   StartCountersList addStartCounterses(int count=1, int start=-1);
   void deleteStartCounterses(int count=-1, int start=0);
   CdcStraws &getCdcStraws();
   CdcStrawsList &getCdcStrawses();
   CdcStrawsList addCdcStrawses(int count=1, int start=-1);
   void deleteCdcStrawses(int count=-1, int start=0);
   FdcPseudos &getFdcPseudos();
   FdcPseudosList &getFdcPseudoses();
   FdcPseudosList addFdcPseudoses(int count=1, int start=-1);
   void deleteFdcPseudoses(int count=-1, int start=0);
   BcalCells &getBcalCells();
   BcalCellsList &getBcalCellses();
   BcalCellsList addBcalCellses(int count=1, int start=-1);
   void deleteBcalCellses(int count=-1, int start=0);
   FcalBlocks &getFcalBlocks();
   FcalBlocksList &getFcalBlockses();
   FcalBlocksList addFcalBlockses(int count=1, int start=-1);
   void deleteFcalBlockses(int count=-1, int start=0);
   TofPaddles &getTofPaddles();
   TofPaddlesList &getTofPaddleses();
   TofPaddlesList addTofPaddleses(int count=1, int start=-1);
   void deleteTofPaddleses(int count=-1, int start=0);
   CcalBlocks &getCcalBlocks();
   CcalBlocksList &getCcalBlockses();
   CcalBlocksList addCcalBlockses(int count=1, int start=-1);
   void deleteCcalBlockses(int count=-1, int start=0);
   DircPMTs &getDircPMTs();
   DircPMTsList &getDircPMTses();
   DircPMTsList addDircPMTses(int count=1, int start=-1);
   void deleteDircPMTses(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<HitStatistics>;
   friend class HDDM_ElementLink<HitStatistics>;
 private:
   HitStatistics(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   std::string m_jtag;
   StartCountersLink m_startCounters_link;
   CdcStrawsLink m_cdcStraws_link;
   FdcPseudosLink m_fdcPseudos_link;
   BcalCellsLink m_bcalCells_link;
   FcalBlocksLink m_fcalBlocks_link;
   TofPaddlesLink m_tofPaddles_link;
   CcalBlocksLink m_ccalBlocks_link;
   DircPMTsLink m_dircPMTs_link;
};

typedef HDDM_ElementList<HitStatistics> HitStatisticsList;
typedef HDDM_ElementLink<HitStatistics> HitStatisticsLink;

class ReconstructedPhysicsEvent: public HDDM_Element {
 public:
   ~ReconstructedPhysicsEvent();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   int64_t getEventNo() const;
   void setEventNo(int64_t eventNo);
   int getRunNo() const;
   void setRunNo(int runNo);
   Comment &getComment(int index=0);
   CommentList &getComments();
   CommentList addComments(int count=1, int start=-1);
   void deleteComments(int count=-1, int start=0);
   DataVersionString &getDataVersionString(int index=0);
   DataVersionStringList &getDataVersionStrings();
   DataVersionStringList addDataVersionStrings(int count=1, int start=-1);
   void deleteDataVersionStrings(int count=-1, int start=0);
   CcdbContext &getCcdbContext(int index=0);
   CcdbContextList &getCcdbContexts();
   CcdbContextList addCcdbContexts(int count=1, int start=-1);
   void deleteCcdbContexts(int count=-1, int start=0);
   Reaction &getReaction(int index=0);
   ReactionList &getReactions();
   ReactionList addReactions(int count=1, int start=-1);
   void deleteReactions(int count=-1, int start=0);
   TagmBeamPhoton &getTagmBeamPhoton(int index=0);
   TagmBeamPhotonList &getTagmBeamPhotons();
   TagmBeamPhotonList addTagmBeamPhotons(int count=1, int start=-1);
   void deleteTagmBeamPhotons(int count=-1, int start=0);
   TaghBeamPhoton &getTaghBeamPhoton(int index=0);
   TaghBeamPhotonList &getTaghBeamPhotons();
   TaghBeamPhotonList addTaghBeamPhotons(int count=1, int start=-1);
   void deleteTaghBeamPhotons(int count=-1, int start=0);
   FcalShower &getFcalShower(int index=0);
   FcalShowerList &getFcalShowers();
   FcalShowerList addFcalShowers(int count=1, int start=-1);
   void deleteFcalShowers(int count=-1, int start=0);
   BcalShower &getBcalShower(int index=0);
   BcalShowerList &getBcalShowers();
   BcalShowerList addBcalShowers(int count=1, int start=-1);
   void deleteBcalShowers(int count=-1, int start=0);
   CcalShower &getCcalShower(int index=0);
   CcalShowerList &getCcalShowers();
   CcalShowerList addCcalShowers(int count=1, int start=-1);
   void deleteCcalShowers(int count=-1, int start=0);
   ChargedTrack &getChargedTrack(int index=0);
   ChargedTrackList &getChargedTracks();
   ChargedTrackList addChargedTracks(int count=1, int start=-1);
   void deleteChargedTracks(int count=-1, int start=0);
   StartHit &getStartHit(int index=0);
   StartHitList &getStartHits();
   StartHitList addStartHits(int count=1, int start=-1);
   void deleteStartHits(int count=-1, int start=0);
   TofPoint &getTofPoint(int index=0);
   TofPointList &getTofPoints();
   TofPointList addTofPoints(int count=1, int start=-1);
   void deleteTofPoints(int count=-1, int start=0);
   DircHit &getDircHit(int index=0);
   DircHitList &getDircHits();
   DircHitList addDircHits(int count=1, int start=-1);
   void deleteDircHits(int count=-1, int start=0);
   RFtime &getRFtime();
   RFtimeList &getRFtimes();
   RFtimeList addRFtimes(int count=1, int start=-1);
   void deleteRFtimes(int count=-1, int start=0);
   Trigger &getTrigger();
   TriggerList &getTriggers();
   TriggerList addTriggers(int count=1, int start=-1);
   void deleteTriggers(int count=-1, int start=0);
   DetectorMatches &getDetectorMatches();
   DetectorMatchesList &getDetectorMatcheses();
   DetectorMatchesList addDetectorMatcheses(int count=1, int start=-1);
   void deleteDetectorMatcheses(int count=-1, int start=0);
   HitStatistics &getHitStatistics();
   HitStatisticsList &getHitStatisticses();
   HitStatisticsList addHitStatisticses(int count=1, int start=-1);
   void deleteHitStatisticses(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   friend class HDDM_ElementList<ReconstructedPhysicsEvent>;
   friend class HDDM_ElementLink<ReconstructedPhysicsEvent>;
 private:
   ReconstructedPhysicsEvent(HDDM_Element *parent=0);
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   int64_t m_eventNo;
   int m_runNo;
   CommentList m_comment_list;
   DataVersionStringList m_dataVersionString_list;
   CcdbContextList m_ccdbContext_list;
   ReactionList m_reaction_list;
   TagmBeamPhotonList m_tagmBeamPhoton_list;
   TaghBeamPhotonList m_taghBeamPhoton_list;
   FcalShowerList m_fcalShower_list;
   BcalShowerList m_bcalShower_list;
   CcalShowerList m_ccalShower_list;
   ChargedTrackList m_chargedTrack_list;
   StartHitList m_startHit_list;
   TofPointList m_tofPoint_list;
   DircHitList m_dircHit_list;
   RFtimeLink m_RFtime_link;
   TriggerLink m_trigger_link;
   DetectorMatchesLink m_detectorMatches_link;
   HitStatisticsLink m_hitStatistics_link;
};

typedef HDDM_ElementList<ReconstructedPhysicsEvent> ReconstructedPhysicsEventList;
typedef HDDM_ElementLink<ReconstructedPhysicsEvent> ReconstructedPhysicsEventLink;

class HDDM: public HDDM_Element {
 public:
   HDDM();
   ~HDDM();
   std::string getClass() const;
   std::string getVersion() const;
   std::string getXmlns() const;
   CDCAmpdEdxList getCDCAmpdEdxs();
   RFtimeList getRFtimes();
   BcalCellsList getBcalCellses();
   BcalClusterList getBcalClusters();
   BcalCorrelationsList getBcalCorrelationses();
   BcalDOCAtoTrackList getBcalDOCAtoTracks();
   BcalLayersList getBcalLayerses();
   BcalMatchParamsList getBcalMatchParamses();
   BcalShowerList getBcalShowers();
   CcalBlocksList getCcalBlockses();
   CcalShowerList getCcalShowers();
   CcdbContextList getCcdbContexts();
   CdcStrawsList getCdcStrawses();
   ChargedTrackList getChargedTracks();
   CommentList getComments();
   DEdxDCList getDEdxDCs();
   DataVersionStringList getDataVersionStrings();
   DetectorMatchesList getDetectorMatcheses();
   DircHitList getDircHits();
   DircMatchHitList getDircMatchHits();
   DircMatchParamsList getDircMatchParamses();
   DircPMTsList getDircPMTses();
   ExitParamsList getExitParamses();
   ExpectedhitsList getExpectedhitses();
   FcalBlocksList getFcalBlockses();
   FcalCorrelationsList getFcalCorrelationses();
   FcalDOCAtoTrackList getFcalDOCAtoTracks();
   FcalMatchParamsList getFcalMatchParamses();
   FcalShowerList getFcalShowers();
   FcalShowerClassificationList getFcalShowerClassifications();
   FcalShowerNBlocksList getFcalShowerNBlockses();
   FcalShowerPropertiesList getFcalShowerPropertiesList();
   FdcPseudosList getFdcPseudoses();
   HitStatisticsList getHitStatisticses();
   HitlayersList getHitlayerses();
   McmatchList getMcmatchs();
   MomentumList getMomenta();
   OriginList getOrigins();
   PreshowerList getPreshowers();
   ProductList getProducts();
   ReactionList getReactions();
   ScMatchParamsList getScMatchParamses();
   StartCountersList getStartCounterses();
   StartHitList getStartHits();
   TaghBeamPhotonList getTaghBeamPhotons();
   TagmBeamPhotonList getTagmBeamPhotons();
   TflightPCorrelationList getTflightPCorrelations();
   TofDedxList getTofDedxs();
   TofEnergyDepositionList getTofEnergyDepositions();
   TofMatchParamsList getTofMatchParamses();
   TofPaddlesList getTofPaddleses();
   TofPointList getTofPoints();
   TofStatusList getTofStatuses();
   TrackFitList getTrackFits();
   TrackFlagsList getTrackFlagses();
   TriggerList getTriggers();
   TriggerEnergySumsList getTriggerEnergySumses();
   VertexList getVertices();
   WidthList getWidths();
   ReconstructedPhysicsEvent &getReconstructedPhysicsEvent();
   ReconstructedPhysicsEventList &getReconstructedPhysicsEvents();
   ReconstructedPhysicsEventList addReconstructedPhysicsEvents(int count=1, int start=-1);
   void deleteReconstructedPhysicsEvents(int count=-1, int start=0);
   const void *getAttribute(const std::string &name, hddm_type *atype=0) const;
   std::string toString(int indent=0);
   std::string toXML(int indent=0);
   void clear();
   friend class CDCAmpdEdx;
   friend class RFtime;
   friend class BcalCells;
   friend class BcalCluster;
   friend class BcalCorrelations;
   friend class BcalDOCAtoTrack;
   friend class BcalLayers;
   friend class BcalMatchParams;
   friend class BcalShower;
   friend class CcalBlocks;
   friend class CcalShower;
   friend class CcdbContext;
   friend class CdcStraws;
   friend class ChargedTrack;
   friend class Comment;
   friend class DEdxDC;
   friend class DataVersionString;
   friend class DetectorMatches;
   friend class DircHit;
   friend class DircMatchHit;
   friend class DircMatchParams;
   friend class DircPMTs;
   friend class ExitParams;
   friend class Expectedhits;
   friend class FcalBlocks;
   friend class FcalCorrelations;
   friend class FcalDOCAtoTrack;
   friend class FcalMatchParams;
   friend class FcalShower;
   friend class FcalShowerClassification;
   friend class FcalShowerNBlocks;
   friend class FcalShowerProperties;
   friend class FdcPseudos;
   friend class HitStatistics;
   friend class Hitlayers;
   friend class Mcmatch;
   friend class Momentum;
   friend class Origin;
   friend class Preshower;
   friend class Product;
   friend class Reaction;
   friend class ReconstructedPhysicsEvent;
   friend class ScMatchParams;
   friend class StartCounters;
   friend class StartHit;
   friend class TaghBeamPhoton;
   friend class TagmBeamPhoton;
   friend class TflightPCorrelation;
   friend class TofDedx;
   friend class TofEnergyDeposition;
   friend class TofMatchParams;
   friend class TofPaddles;
   friend class TofPoint;
   friend class TofStatus;
   friend class TrackFit;
   friend class TrackFlags;
   friend class Trigger;
   friend class TriggerEnergySums;
   friend class Vertex;
   friend class Width;
   static std::string DocumentString();
 private:
   void streamer(istream &istr);
   void streamer(ostream &ostr);
   std::list<CDCAmpdEdx*> m_CDCAmpdEdx_plist;
   std::list<RFtime*> m_RFtime_plist;
   std::list<BcalCells*> m_bcalCells_plist;
   std::list<BcalCluster*> m_bcalCluster_plist;
   std::list<BcalCorrelations*> m_bcalCorrelations_plist;
   std::list<BcalDOCAtoTrack*> m_bcalDOCAtoTrack_plist;
   std::list<BcalLayers*> m_bcalLayers_plist;
   std::list<BcalMatchParams*> m_bcalMatchParams_plist;
   std::list<BcalShower*> m_bcalShower_plist;
   std::list<CcalBlocks*> m_ccalBlocks_plist;
   std::list<CcalShower*> m_ccalShower_plist;
   std::list<CcdbContext*> m_ccdbContext_plist;
   std::list<CdcStraws*> m_cdcStraws_plist;
   std::list<ChargedTrack*> m_chargedTrack_plist;
   std::list<Comment*> m_comment_plist;
   std::list<DEdxDC*> m_dEdxDC_plist;
   std::list<DataVersionString*> m_dataVersionString_plist;
   std::list<DetectorMatches*> m_detectorMatches_plist;
   std::list<DircHit*> m_dircHit_plist;
   std::list<DircMatchHit*> m_dircMatchHit_plist;
   std::list<DircMatchParams*> m_dircMatchParams_plist;
   std::list<DircPMTs*> m_dircPMTs_plist;
   std::list<ExitParams*> m_exitParams_plist;
   std::list<Expectedhits*> m_expectedhits_plist;
   std::list<FcalBlocks*> m_fcalBlocks_plist;
   std::list<FcalCorrelations*> m_fcalCorrelations_plist;
   std::list<FcalDOCAtoTrack*> m_fcalDOCAtoTrack_plist;
   std::list<FcalMatchParams*> m_fcalMatchParams_plist;
   std::list<FcalShower*> m_fcalShower_plist;
   std::list<FcalShowerClassification*> m_fcalShowerClassification_plist;
   std::list<FcalShowerNBlocks*> m_fcalShowerNBlocks_plist;
   std::list<FcalShowerProperties*> m_fcalShowerProperties_plist;
   std::list<FdcPseudos*> m_fdcPseudos_plist;
   std::list<HitStatistics*> m_hitStatistics_plist;
   std::list<Hitlayers*> m_hitlayers_plist;
   std::list<Mcmatch*> m_mcmatch_plist;
   std::list<Momentum*> m_momentum_plist;
   std::list<Origin*> m_origin_plist;
   std::list<Preshower*> m_preshower_plist;
   std::list<Product*> m_product_plist;
   std::list<Reaction*> m_reaction_plist;
   std::list<ReconstructedPhysicsEvent*> m_reconstructedPhysicsEvent_plist;
   std::list<ScMatchParams*> m_scMatchParams_plist;
   std::list<StartCounters*> m_startCounters_plist;
   std::list<StartHit*> m_startHit_plist;
   std::list<TaghBeamPhoton*> m_taghBeamPhoton_plist;
   std::list<TagmBeamPhoton*> m_tagmBeamPhoton_plist;
   std::list<TflightPCorrelation*> m_tflightPCorrelation_plist;
   std::list<TofDedx*> m_tofDedx_plist;
   std::list<TofEnergyDeposition*> m_tofEnergyDeposition_plist;
   std::list<TofMatchParams*> m_tofMatchParams_plist;
   std::list<TofPaddles*> m_tofPaddles_plist;
   std::list<TofPoint*> m_tofPoint_plist;
   std::list<TofStatus*> m_tofStatus_plist;
   std::list<TrackFit*> m_trackFit_plist;
   std::list<TrackFlags*> m_trackFlags_plist;
   std::list<Trigger*> m_trigger_plist;
   std::list<TriggerEnergySums*> m_triggerEnergySums_plist;
   std::list<Vertex*> m_vertex_plist;
   std::list<Width*> m_width_plist;
   ReconstructedPhysicsEventLink m_reconstructedPhysicsEvent_link;
};

inline istream::thread_private_data *istream::lookup_private_data() {
   thread_private_data *my_private = my_thread_private[threads::getID()];
   if (my_private != 0)
      return my_private;
   init_private_data();
   return my_thread_private[threads::ID];
}

inline ostream::thread_private_data *ostream::lookup_private_data() {
   thread_private_data *my_private = my_thread_private[threads::getID()];
   if (my_private != 0)
      return my_private;
   init_private_data();
   return my_thread_private[threads::ID];
}

inline void istream::skip(int count) {
   MY_SETUP
   MY(events_to_skip) += count;
}

inline bool istream::eof() {
   MY_SETUP
   return MY(hit_eof);
}

inline bool istream::operator!() {
   return eof();
}

inline istream::operator void*() {
   MY_SETUP
   if (MY(hit_eof))
      return NULL;
   else
      return this;
}

inline int istream::getCompression() const {
   return (int)m_status_bits & k_bits_compression;
}

inline int ostream::getCompression() const {
   return (int)m_status_bits & k_bits_compression;
}

inline int istream::getIntegrityChecks() const {
   return (int)m_status_bits & k_bits_integrity;
}

inline int istream::getBytesRead() const {
   int bytes = 0;
   for (int i=1; i < threads::max_threads; ++i)
      if (my_thread_private[i])
         bytes += my_thread_private[i]->m_bytes_read;
   return bytes;
}

inline int istream::getRecordsRead() const {
   int records = 0;
   for (int i=1; i < threads::max_threads; ++i)
      if (my_thread_private[i])
         records += my_thread_private[i]->m_records_read;
   return records;
}

inline int ostream::getIntegrityChecks() const {
   return (int)m_status_bits & k_bits_integrity;
}

inline int ostream::getBytesWritten() const {
   int bytes = 0;
   for (int i=1; i < threads::max_threads; ++i)
      if (my_thread_private[i])
         bytes += my_thread_private[i]->m_bytes_written;
   return bytes;
}

inline int ostream::getRecordsWritten() const {
   int records = 0;
   for (int i=1; i < threads::max_threads; ++i)
      if (my_thread_private[i])
         records += my_thread_private[i]->m_records_written;
   return records;
}

inline istream &istream::operator>>(streamable &object) {
   MY_SETUP
   if (MY(sequencing)) {
      MY(codon)->m_target.push_back(&object);
   }
   else {
      int size;
      *MY(xstr) >> size;
      if (size > 0) {
         std::streampos start = MY(sbuf)->tellg();
         sequencer(object);
         MY(sbuf)->seekg(start+(std::streamoff)size);
      }
   }
   return *this;
}

inline void istream::reset_sequencer() {
   MY_SETUP
   MY(sequencing) = 0;
}

inline void istream::sequencer(streamable &object) {
   MY_SETUP
   MY(sequencing) = 1;
   MY(codon)->m_target.clear();
   object.streamer(*this);
   if (MY(sequencing)) {
      MY(sequencing) = 0;
      codon &gene = *MY(codon);
      streamable null_streamable;
      gene.m_target.push_front(&null_streamable);
      chromosome::iterator iter;
      for (iter = gene.m_sequence.begin();
           iter != gene.m_sequence.end();
           ++iter)
      {
         MY(codon) = &(*iter);
         *this >> *gene.m_target[iter->m_order];
      }
      MY(codon) = &gene;
   }
}

inline ostream &ostream::operator<<(HDDM &record) {
   MY_SETUP
   MY(sbuf)->reset();
   *this << (streamable&)record;
   while (MY(sbuf)->size() == MY(event_buffer_size)) {
      delete MY(xstr);
      delete MY(sbuf);
      char *newbuf = new char[MY(event_buffer_size) *= 2];
      MY(sbuf) = new ostreambuffer(newbuf, MY(event_buffer_size));
      MY(xstr) = new xstream::xdr::ostream(MY(sbuf));
      delete [] MY(event_buffer);
      MY(event_buffer) = newbuf;
      *this << (streamable&)record;
   }
   lock_streambufs();
   update_streambufs();
   if ((MY(status_bits) & k_crc32_integrity) != 0) {
      xstream::digest::crc32 crc;
      std::ostream out(&crc);
      out.write(MY(sbuf)->getbuf(),MY(sbuf)->size());
      out.flush();
      unsigned int crc32 = crc.digest();
      *MY(xstr) << crc32;
   }
   MY(ostr)->write(MY(sbuf)->getbuf(),MY(sbuf)->size());
   if (!MY(ostr)->good()) {
      unlock_streambufs();
      throw std::runtime_error("hddm_r::ostream::operator<< error - "
                               "write error on event output!");
   }
   if (MY(status_bits) & k_bz2_compression) {
      MY(last_start) = ((xstream::bz::ostreambuf*)MY(xcmp))->get_block_start();
      MY(last_offset) = ((xstream::bz::ostreambuf*)MY(xcmp))->get_block_offset();
   }
   else if (MY(status_bits) & k_z_compression) {
      MY(last_start) = ((xstream::z::ostreambuf*)MY(xcmp))->get_block_start();
      MY(last_offset) = ((xstream::z::ostreambuf*)MY(xcmp))->get_block_offset();
   }
   else {
      MY(last_start) = m_ostr.tellp();
      MY(last_offset) = 0;
   }
   unlock_streambufs();
   MY(bytes_written) += MY(sbuf)->size();
   MY(records_written)++;
   return *this;
}

inline ostream &ostream::operator<<(streamable &object) {
   MY_SETUP
   *MY(xstr) << 0;
   std::streampos start = MY(sbuf)->tellp();
   object.streamer(*this);
   std::streampos end = MY(sbuf)->tellp();
   MY(sbuf)->seekp(start-std::streamoff(4));
   *MY(xstr) << (int)(end-start);
   MY(sbuf)->seekp(end);
   return *this;
}

inline Comment::Comment(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_text("")
{}

inline Comment::~Comment() {}

inline std::string Comment::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string Comment::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string Comment::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t Comment::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int Comment::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string Comment::getMaxOccurs() const {
   return "unbounded";
}

inline int Comment::getMinOccurs() const {
   return 0;
}

inline std::string Comment::getText() const {
   return m_text;
}

inline void Comment::setText(const std::string &text) {
   m_text = text;
}

inline const void *Comment::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "text") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_text;
   }
   return m_parent->getAttribute(name, atype);
}

inline DataVersionString::DataVersionString(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_text("")
{}

inline DataVersionString::~DataVersionString() {}

inline std::string DataVersionString::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string DataVersionString::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string DataVersionString::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t DataVersionString::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int DataVersionString::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string DataVersionString::getMaxOccurs() const {
   return "unbounded";
}

inline int DataVersionString::getMinOccurs() const {
   return 0;
}

inline std::string DataVersionString::getText() const {
   return m_text;
}

inline void DataVersionString::setText(const std::string &text) {
   m_text = text;
}

inline const void *DataVersionString::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "text") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_text;
   }
   return m_parent->getAttribute(name, atype);
}

inline CcdbContext::CcdbContext(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_text("")
{}

inline CcdbContext::~CcdbContext() {}

inline std::string CcdbContext::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string CcdbContext::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string CcdbContext::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t CcdbContext::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int CcdbContext::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string CcdbContext::getMaxOccurs() const {
   return "unbounded";
}

inline int CcdbContext::getMinOccurs() const {
   return 0;
}

inline std::string CcdbContext::getText() const {
   return m_text;
}

inline void CcdbContext::setText(const std::string &text) {
   m_text = text;
}

inline const void *CcdbContext::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "text") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_text;
   }
   return m_parent->getAttribute(name, atype);
}

inline Origin::Origin(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_t(0),
   m_vx(0),
   m_vy(0),
   m_vz(0)
{}

inline Origin::~Origin() {}

inline std::string Origin::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string Origin::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string Origin::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t Origin::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int Origin::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float Origin::getEbeam() const {
   return *(float*)m_parent->getAttribute("Ebeam");
}

inline std::string Origin::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline std::string Origin::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string Origin::getMaxOccurs() const {
   return *(std::string*)m_parent->getAttribute("maxOccurs");
}

inline int Origin::getMinOccurs() const {
   return *(int*)m_parent->getAttribute("minOccurs");
}

inline Particle_t Origin::getTargetType() const {
   return *(Particle_t*)m_parent->getAttribute("targetType");
}

inline int Origin::getType() const {
   return *(int*)m_parent->getAttribute("type");
}

inline float Origin::getWeight() const {
   return *(float*)m_parent->getAttribute("weight");
}

inline std::string Origin::getLunit() const {
   return "cm";
}

inline float Origin::getT() const {
   return m_t;
}

inline void Origin::setT(float t) {
   m_t = t;
}

inline float Origin::getVx() const {
   return m_vx;
}

inline void Origin::setVx(float vx) {
   m_vx = vx;
}

inline float Origin::getVy() const {
   return m_vy;
}

inline void Origin::setVy(float vy) {
   m_vy = vy;
}

inline float Origin::getVz() const {
   return m_vz;
}

inline void Origin::setVz(float vz) {
   m_vz = vz;
}

inline const void *Origin::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "t") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_t;
   }
   if (name == "vx") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_vx;
   }
   if (name == "vy") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_vy;
   }
   if (name == "vz") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_vz;
   }
   return m_parent->getAttribute(name, atype);
}

inline Momentum::Momentum(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_E(0),
   m_px(0),
   m_py(0),
   m_pz(0)
{}

inline Momentum::~Momentum() {}

inline std::string Momentum::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string Momentum::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string Momentum::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t Momentum::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int Momentum::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float Momentum::getEbeam() const {
   return *(float*)m_parent->getAttribute("Ebeam");
}

inline std::string Momentum::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string Momentum::getMaxOccurs() const {
   return *(std::string*)m_parent->getAttribute("maxOccurs");
}

inline int Momentum::getMinOccurs() const {
   return *(int*)m_parent->getAttribute("minOccurs");
}

inline Particle_t Momentum::getTargetType() const {
   return *(Particle_t*)m_parent->getAttribute("targetType");
}

inline int Momentum::getType() const {
   return *(int*)m_parent->getAttribute("type");
}

inline float Momentum::getWeight() const {
   return *(float*)m_parent->getAttribute("weight");
}

inline int Momentum::getId() const {
   return *(int*)m_parent->getAttribute("id");
}

inline int Momentum::getParentId() const {
   return *(int*)m_parent->getAttribute("parentId");
}

inline int Momentum::getPdgtype() const {
   return *(int*)m_parent->getAttribute("pdgtype");
}

inline float Momentum::getE() const {
   return m_E;
}

inline void Momentum::setE(float E) {
   m_E = E;
}

inline std::string Momentum::getEunit() const {
   return "GeV";
}

inline std::string Momentum::getPunit() const {
   return "GeV/c";
}

inline float Momentum::getPx() const {
   return m_px;
}

inline void Momentum::setPx(float px) {
   m_px = px;
}

inline float Momentum::getPy() const {
   return m_py;
}

inline void Momentum::setPy(float py) {
   m_py = py;
}

inline float Momentum::getPz() const {
   return m_pz;
}

inline void Momentum::setPz(float pz) {
   m_pz = pz;
}

inline const void *Momentum::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "E") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_E;
   }
   if (name == "Eunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_Eunit = getEunit();
      return &m_Eunit;
   }
   if (name == "punit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_punit = getPunit();
      return &m_punit;
   }
   if (name == "px") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_px;
   }
   if (name == "py") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_py;
   }
   if (name == "pz") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_pz;
   }
   return m_parent->getAttribute(name, atype);
}

inline Product::Product(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_id(0),
   m_parentId(0),
   m_pdgtype(0),
   m_momentum_link(&m_host->m_momentum_plist,
               m_host->m_momentum_plist.end(),
               m_host->m_momentum_plist.end(),
               this)
{}

inline Product::~Product() {
   deleteMomenta();
}

inline std::string Product::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string Product::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string Product::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t Product::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int Product::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float Product::getEbeam() const {
   return *(float*)m_parent->getAttribute("Ebeam");
}

inline std::string Product::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline std::string Product::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline int Product::getMinOccurs() const {
   return *(int*)m_parent->getAttribute("minOccurs");
}

inline Particle_t Product::getTargetType() const {
   return *(Particle_t*)m_parent->getAttribute("targetType");
}

inline int Product::getType() const {
   return *(int*)m_parent->getAttribute("type");
}

inline float Product::getWeight() const {
   return *(float*)m_parent->getAttribute("weight");
}

inline int Product::getId() const {
   return m_id;
}

inline void Product::setId(int id) {
   m_id = id;
}

inline std::string Product::getMaxOccurs() const {
   return "unbounded";
}

inline int Product::getParentId() const {
   return m_parentId;
}

inline void Product::setParentId(int parentId) {
   m_parentId = parentId;
}

inline int Product::getPdgtype() const {
   return m_pdgtype;
}

inline void Product::setPdgtype(int pdgtype) {
   m_pdgtype = pdgtype;
}

inline const void *Product::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "id") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_id;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "parentId") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_parentId;
   }
   if (name == "pdgtype") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_pdgtype;
   }
   return m_parent->getAttribute(name, atype);
}

inline Momentum &Product::getMomentum() {
   return m_momentum_link.front();
}

inline MomentumList &Product::getMomenta() {
   return m_momentum_link;
}

inline MomentumList Product::addMomenta(int count, int start) {
   return m_momentum_link.add(count,start);
}

inline void Product::deleteMomenta(int count, int start) {
   m_momentum_link.del(count,start);
}

inline Vertex::Vertex(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_origin_link(&m_host->m_origin_plist,
               m_host->m_origin_plist.end(),
               m_host->m_origin_plist.end(),
               this),
   m_product_list(&m_host->m_product_plist,
               m_host->m_product_plist.end(),
               m_host->m_product_plist.end(),
               this)
{}

inline Vertex::~Vertex() {
   deleteOrigins();
   deleteProducts();
}

inline std::string Vertex::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string Vertex::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string Vertex::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t Vertex::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int Vertex::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float Vertex::getEbeam() const {
   return *(float*)m_parent->getAttribute("Ebeam");
}

inline std::string Vertex::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline std::string Vertex::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline int Vertex::getMinOccurs() const {
   return *(int*)m_parent->getAttribute("minOccurs");
}

inline Particle_t Vertex::getTargetType() const {
   return *(Particle_t*)m_parent->getAttribute("targetType");
}

inline int Vertex::getType() const {
   return *(int*)m_parent->getAttribute("type");
}

inline float Vertex::getWeight() const {
   return *(float*)m_parent->getAttribute("weight");
}

inline std::string Vertex::getMaxOccurs() const {
   return "unbounded";
}

inline const void *Vertex::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline Origin &Vertex::getOrigin() {
   return m_origin_link.front();
}

inline OriginList &Vertex::getOrigins() {
   return m_origin_link;
}

inline OriginList Vertex::addOrigins(int count, int start) {
   return m_origin_link.add(count,start);
}

inline void Vertex::deleteOrigins(int count, int start) {
   m_origin_link.del(count,start);
}

inline Product &Vertex::getProduct(int index) {
   return m_product_list(index);
}

inline ProductList &Vertex::getProducts() {
   return m_product_list;
}

inline ProductList Vertex::addProducts(int count, int start) {
   return m_product_list.add(count,start);
}

inline void Vertex::deleteProducts(int count, int start) {
   m_product_list.del(count,start);
}

inline Reaction::Reaction(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_Ebeam(0),
   m_jtag(""),
   m_targetType(0),
   m_type(0),
   m_weight(0),
   m_vertex_list(&m_host->m_vertex_plist,
               m_host->m_vertex_plist.end(),
               m_host->m_vertex_plist.end(),
               this)
{}

inline Reaction::~Reaction() {
   deleteVertices();
}

inline std::string Reaction::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string Reaction::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string Reaction::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t Reaction::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int Reaction::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float Reaction::getEbeam() const {
   return m_Ebeam;
}

inline void Reaction::setEbeam(float Ebeam) {
   m_Ebeam = Ebeam;
}

inline std::string Reaction::getEunit() const {
   return "GeV";
}

inline std::string Reaction::getJtag() const {
   return m_jtag;
}

inline void Reaction::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline std::string Reaction::getMaxOccurs() const {
   return "unbounded";
}

inline int Reaction::getMinOccurs() const {
   return 0;
}

inline Particle_t Reaction::getTargetType() const {
   return (Particle_t)m_targetType;
}

inline void Reaction::setTargetType(Particle_t targetType) {
   m_targetType = targetType;
}

inline int Reaction::getType() const {
   return m_type;
}

inline void Reaction::setType(int type) {
   m_type = type;
}

inline float Reaction::getWeight() const {
   return m_weight;
}

inline void Reaction::setWeight(float weight) {
   m_weight = weight;
}

inline const void *Reaction::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "Ebeam") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_Ebeam;
   }
   if (name == "Eunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_Eunit = getEunit();
      return &m_Eunit;
   }
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "targetType") {
      if (atype != 0)
         *atype = k_hddm_Particle_t;
      return &m_targetType;
   }
   if (name == "type") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_type;
   }
   if (name == "weight") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_weight;
   }
   return m_parent->getAttribute(name, atype);
}

inline Vertex &Reaction::getVertex(int index) {
   return m_vertex_list(index);
}

inline VertexList &Reaction::getVertices() {
   return m_vertex_list;
}

inline VertexList Reaction::addVertices(int count, int start) {
   return m_vertex_list.add(count,start);
}

inline void Reaction::deleteVertices(int count, int start) {
   m_vertex_list.del(count,start);
}

inline TagmBeamPhoton::TagmBeamPhoton(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_E(0),
   m_jtag(""),
   m_t(0)
{}

inline TagmBeamPhoton::~TagmBeamPhoton() {}

inline std::string TagmBeamPhoton::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string TagmBeamPhoton::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string TagmBeamPhoton::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t TagmBeamPhoton::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int TagmBeamPhoton::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float TagmBeamPhoton::getE() const {
   return m_E;
}

inline void TagmBeamPhoton::setE(float E) {
   m_E = E;
}

inline std::string TagmBeamPhoton::getEunit() const {
   return "GeV";
}

inline std::string TagmBeamPhoton::getJtag() const {
   return m_jtag;
}

inline void TagmBeamPhoton::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline std::string TagmBeamPhoton::getMaxOccurs() const {
   return "unbounded";
}

inline int TagmBeamPhoton::getMinOccurs() const {
   return 0;
}

inline float TagmBeamPhoton::getT() const {
   return m_t;
}

inline void TagmBeamPhoton::setT(float t) {
   m_t = t;
}

inline std::string TagmBeamPhoton::getTunit() const {
   return "ns";
}

inline const void *TagmBeamPhoton::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "E") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_E;
   }
   if (name == "Eunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_Eunit = getEunit();
      return &m_Eunit;
   }
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "t") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_t;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   return m_parent->getAttribute(name, atype);
}

inline TaghBeamPhoton::TaghBeamPhoton(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_E(0),
   m_jtag(""),
   m_t(0)
{}

inline TaghBeamPhoton::~TaghBeamPhoton() {}

inline std::string TaghBeamPhoton::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string TaghBeamPhoton::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string TaghBeamPhoton::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t TaghBeamPhoton::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int TaghBeamPhoton::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float TaghBeamPhoton::getE() const {
   return m_E;
}

inline void TaghBeamPhoton::setE(float E) {
   m_E = E;
}

inline std::string TaghBeamPhoton::getEunit() const {
   return "GeV";
}

inline std::string TaghBeamPhoton::getJtag() const {
   return m_jtag;
}

inline void TaghBeamPhoton::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline std::string TaghBeamPhoton::getMaxOccurs() const {
   return "unbounded";
}

inline int TaghBeamPhoton::getMinOccurs() const {
   return 0;
}

inline float TaghBeamPhoton::getT() const {
   return m_t;
}

inline void TaghBeamPhoton::setT(float t) {
   m_t = t;
}

inline std::string TaghBeamPhoton::getTunit() const {
   return "ns";
}

inline const void *TaghBeamPhoton::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "E") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_E;
   }
   if (name == "Eunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_Eunit = getEunit();
      return &m_Eunit;
   }
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "t") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_t;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   return m_parent->getAttribute(name, atype);
}

inline FcalCorrelations::FcalCorrelations(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_Etcorr(0),
   m_Excorr(0),
   m_Eycorr(0),
   m_txcorr(0),
   m_tycorr(0)
{}

inline FcalCorrelations::~FcalCorrelations() {}

inline std::string FcalCorrelations::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string FcalCorrelations::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string FcalCorrelations::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t FcalCorrelations::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int FcalCorrelations::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float FcalCorrelations::getE() const {
   return *(float*)m_parent->getAttribute("E");
}

inline float FcalCorrelations::getEerr() const {
   return *(float*)m_parent->getAttribute("Eerr");
}

inline std::string FcalCorrelations::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline float FcalCorrelations::getEzcorr() const {
   return *(float*)m_parent->getAttribute("Ezcorr");
}

inline std::string FcalCorrelations::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string FcalCorrelations::getLunit() const {
   return *(std::string*)m_parent->getAttribute("lunit");
}

inline float FcalCorrelations::getT() const {
   return *(float*)m_parent->getAttribute("t");
}

inline float FcalCorrelations::getTerr() const {
   return *(float*)m_parent->getAttribute("terr");
}

inline std::string FcalCorrelations::getTunit() const {
   return *(std::string*)m_parent->getAttribute("tunit");
}

inline float FcalCorrelations::getTzcorr() const {
   return *(float*)m_parent->getAttribute("tzcorr");
}

inline float FcalCorrelations::getX() const {
   return *(float*)m_parent->getAttribute("x");
}

inline float FcalCorrelations::getXerr() const {
   return *(float*)m_parent->getAttribute("xerr");
}

inline float FcalCorrelations::getXycorr() const {
   return *(float*)m_parent->getAttribute("xycorr");
}

inline float FcalCorrelations::getXzcorr() const {
   return *(float*)m_parent->getAttribute("xzcorr");
}

inline float FcalCorrelations::getY() const {
   return *(float*)m_parent->getAttribute("y");
}

inline float FcalCorrelations::getYerr() const {
   return *(float*)m_parent->getAttribute("yerr");
}

inline float FcalCorrelations::getYzcorr() const {
   return *(float*)m_parent->getAttribute("yzcorr");
}

inline float FcalCorrelations::getZ() const {
   return *(float*)m_parent->getAttribute("z");
}

inline float FcalCorrelations::getZerr() const {
   return *(float*)m_parent->getAttribute("zerr");
}

inline float FcalCorrelations::getEtcorr() const {
   return m_Etcorr;
}

inline void FcalCorrelations::setEtcorr(float Etcorr) {
   m_Etcorr = Etcorr;
}

inline float FcalCorrelations::getExcorr() const {
   return m_Excorr;
}

inline void FcalCorrelations::setExcorr(float Excorr) {
   m_Excorr = Excorr;
}

inline float FcalCorrelations::getEycorr() const {
   return m_Eycorr;
}

inline void FcalCorrelations::setEycorr(float Eycorr) {
   m_Eycorr = Eycorr;
}

inline int FcalCorrelations::getMaxOccurs() const {
   return 1;
}

inline int FcalCorrelations::getMinOccurs() const {
   return 0;
}

inline float FcalCorrelations::getTxcorr() const {
   return m_txcorr;
}

inline void FcalCorrelations::setTxcorr(float txcorr) {
   m_txcorr = txcorr;
}

inline float FcalCorrelations::getTycorr() const {
   return m_tycorr;
}

inline void FcalCorrelations::setTycorr(float tycorr) {
   m_tycorr = tycorr;
}

inline const void *FcalCorrelations::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "Etcorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_Etcorr;
   }
   if (name == "Excorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_Excorr;
   }
   if (name == "Eycorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_Eycorr;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "txcorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_txcorr;
   }
   if (name == "tycorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tycorr;
   }
   return m_parent->getAttribute(name, atype);
}

inline FcalShowerClassification::FcalShowerClassification(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_classifierOuput(0)
{}

inline FcalShowerClassification::~FcalShowerClassification() {}

inline std::string FcalShowerClassification::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string FcalShowerClassification::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string FcalShowerClassification::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t FcalShowerClassification::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int FcalShowerClassification::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float FcalShowerClassification::getE() const {
   return *(float*)m_parent->getAttribute("E");
}

inline float FcalShowerClassification::getEerr() const {
   return *(float*)m_parent->getAttribute("Eerr");
}

inline std::string FcalShowerClassification::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline float FcalShowerClassification::getEzcorr() const {
   return *(float*)m_parent->getAttribute("Ezcorr");
}

inline std::string FcalShowerClassification::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string FcalShowerClassification::getLunit() const {
   return *(std::string*)m_parent->getAttribute("lunit");
}

inline std::string FcalShowerClassification::getMaxOccurs() const {
   return *(std::string*)m_parent->getAttribute("maxOccurs");
}

inline float FcalShowerClassification::getT() const {
   return *(float*)m_parent->getAttribute("t");
}

inline float FcalShowerClassification::getTerr() const {
   return *(float*)m_parent->getAttribute("terr");
}

inline std::string FcalShowerClassification::getTunit() const {
   return *(std::string*)m_parent->getAttribute("tunit");
}

inline float FcalShowerClassification::getTzcorr() const {
   return *(float*)m_parent->getAttribute("tzcorr");
}

inline float FcalShowerClassification::getX() const {
   return *(float*)m_parent->getAttribute("x");
}

inline float FcalShowerClassification::getXerr() const {
   return *(float*)m_parent->getAttribute("xerr");
}

inline float FcalShowerClassification::getXycorr() const {
   return *(float*)m_parent->getAttribute("xycorr");
}

inline float FcalShowerClassification::getXzcorr() const {
   return *(float*)m_parent->getAttribute("xzcorr");
}

inline float FcalShowerClassification::getY() const {
   return *(float*)m_parent->getAttribute("y");
}

inline float FcalShowerClassification::getYerr() const {
   return *(float*)m_parent->getAttribute("yerr");
}

inline float FcalShowerClassification::getYzcorr() const {
   return *(float*)m_parent->getAttribute("yzcorr");
}

inline float FcalShowerClassification::getZ() const {
   return *(float*)m_parent->getAttribute("z");
}

inline float FcalShowerClassification::getZerr() const {
   return *(float*)m_parent->getAttribute("zerr");
}

inline float FcalShowerClassification::getClassifierOuput() const {
   return m_classifierOuput;
}

inline void FcalShowerClassification::setClassifierOuput(float classifierOuput) {
   m_classifierOuput = classifierOuput;
}

inline int FcalShowerClassification::getMinOccurs() const {
   return 0;
}

inline const void *FcalShowerClassification::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "classifierOuput") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_classifierOuput;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline FcalShowerProperties::FcalShowerProperties(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_E1E9(0),
   m_E9E25(0),
   m_docaTrack(0),
   m_sumU(0),
   m_sumV(0),
   m_timeTrack(0)
{}

inline FcalShowerProperties::~FcalShowerProperties() {}

inline std::string FcalShowerProperties::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string FcalShowerProperties::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string FcalShowerProperties::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t FcalShowerProperties::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int FcalShowerProperties::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float FcalShowerProperties::getE() const {
   return *(float*)m_parent->getAttribute("E");
}

inline float FcalShowerProperties::getEerr() const {
   return *(float*)m_parent->getAttribute("Eerr");
}

inline std::string FcalShowerProperties::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline float FcalShowerProperties::getEzcorr() const {
   return *(float*)m_parent->getAttribute("Ezcorr");
}

inline std::string FcalShowerProperties::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string FcalShowerProperties::getLunit() const {
   return *(std::string*)m_parent->getAttribute("lunit");
}

inline float FcalShowerProperties::getT() const {
   return *(float*)m_parent->getAttribute("t");
}

inline float FcalShowerProperties::getTerr() const {
   return *(float*)m_parent->getAttribute("terr");
}

inline std::string FcalShowerProperties::getTunit() const {
   return *(std::string*)m_parent->getAttribute("tunit");
}

inline float FcalShowerProperties::getTzcorr() const {
   return *(float*)m_parent->getAttribute("tzcorr");
}

inline float FcalShowerProperties::getX() const {
   return *(float*)m_parent->getAttribute("x");
}

inline float FcalShowerProperties::getXerr() const {
   return *(float*)m_parent->getAttribute("xerr");
}

inline float FcalShowerProperties::getXycorr() const {
   return *(float*)m_parent->getAttribute("xycorr");
}

inline float FcalShowerProperties::getXzcorr() const {
   return *(float*)m_parent->getAttribute("xzcorr");
}

inline float FcalShowerProperties::getY() const {
   return *(float*)m_parent->getAttribute("y");
}

inline float FcalShowerProperties::getYerr() const {
   return *(float*)m_parent->getAttribute("yerr");
}

inline float FcalShowerProperties::getYzcorr() const {
   return *(float*)m_parent->getAttribute("yzcorr");
}

inline float FcalShowerProperties::getZ() const {
   return *(float*)m_parent->getAttribute("z");
}

inline float FcalShowerProperties::getZerr() const {
   return *(float*)m_parent->getAttribute("zerr");
}

inline float FcalShowerProperties::getE1E9() const {
   return m_E1E9;
}

inline void FcalShowerProperties::setE1E9(float E1E9) {
   m_E1E9 = E1E9;
}

inline float FcalShowerProperties::getE9E25() const {
   return m_E9E25;
}

inline void FcalShowerProperties::setE9E25(float E9E25) {
   m_E9E25 = E9E25;
}

inline float FcalShowerProperties::getDocaTrack() const {
   return m_docaTrack;
}

inline void FcalShowerProperties::setDocaTrack(float docaTrack) {
   m_docaTrack = docaTrack;
}

inline int FcalShowerProperties::getMaxOccurs() const {
   return 1;
}

inline int FcalShowerProperties::getMinOccurs() const {
   return 0;
}

inline float FcalShowerProperties::getSumU() const {
   return m_sumU;
}

inline void FcalShowerProperties::setSumU(float sumU) {
   m_sumU = sumU;
}

inline float FcalShowerProperties::getSumV() const {
   return m_sumV;
}

inline void FcalShowerProperties::setSumV(float sumV) {
   m_sumV = sumV;
}

inline float FcalShowerProperties::getTimeTrack() const {
   return m_timeTrack;
}

inline void FcalShowerProperties::setTimeTrack(float timeTrack) {
   m_timeTrack = timeTrack;
}

inline const void *FcalShowerProperties::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "E1E9") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_E1E9;
   }
   if (name == "E9E25") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_E9E25;
   }
   if (name == "docaTrack") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_docaTrack;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "sumU") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_sumU;
   }
   if (name == "sumV") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_sumV;
   }
   if (name == "timeTrack") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_timeTrack;
   }
   return m_parent->getAttribute(name, atype);
}

inline FcalShowerNBlocks::FcalShowerNBlocks(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_numBlocks(0)
{}

inline FcalShowerNBlocks::~FcalShowerNBlocks() {}

inline std::string FcalShowerNBlocks::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string FcalShowerNBlocks::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string FcalShowerNBlocks::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t FcalShowerNBlocks::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int FcalShowerNBlocks::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float FcalShowerNBlocks::getE() const {
   return *(float*)m_parent->getAttribute("E");
}

inline float FcalShowerNBlocks::getEerr() const {
   return *(float*)m_parent->getAttribute("Eerr");
}

inline std::string FcalShowerNBlocks::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline float FcalShowerNBlocks::getEzcorr() const {
   return *(float*)m_parent->getAttribute("Ezcorr");
}

inline std::string FcalShowerNBlocks::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string FcalShowerNBlocks::getLunit() const {
   return *(std::string*)m_parent->getAttribute("lunit");
}

inline std::string FcalShowerNBlocks::getMaxOccurs() const {
   return *(std::string*)m_parent->getAttribute("maxOccurs");
}

inline float FcalShowerNBlocks::getT() const {
   return *(float*)m_parent->getAttribute("t");
}

inline float FcalShowerNBlocks::getTerr() const {
   return *(float*)m_parent->getAttribute("terr");
}

inline std::string FcalShowerNBlocks::getTunit() const {
   return *(std::string*)m_parent->getAttribute("tunit");
}

inline float FcalShowerNBlocks::getTzcorr() const {
   return *(float*)m_parent->getAttribute("tzcorr");
}

inline float FcalShowerNBlocks::getX() const {
   return *(float*)m_parent->getAttribute("x");
}

inline float FcalShowerNBlocks::getXerr() const {
   return *(float*)m_parent->getAttribute("xerr");
}

inline float FcalShowerNBlocks::getXycorr() const {
   return *(float*)m_parent->getAttribute("xycorr");
}

inline float FcalShowerNBlocks::getXzcorr() const {
   return *(float*)m_parent->getAttribute("xzcorr");
}

inline float FcalShowerNBlocks::getY() const {
   return *(float*)m_parent->getAttribute("y");
}

inline float FcalShowerNBlocks::getYerr() const {
   return *(float*)m_parent->getAttribute("yerr");
}

inline float FcalShowerNBlocks::getYzcorr() const {
   return *(float*)m_parent->getAttribute("yzcorr");
}

inline float FcalShowerNBlocks::getZ() const {
   return *(float*)m_parent->getAttribute("z");
}

inline float FcalShowerNBlocks::getZerr() const {
   return *(float*)m_parent->getAttribute("zerr");
}

inline int FcalShowerNBlocks::getMinOccurs() const {
   return 0;
}

inline int FcalShowerNBlocks::getNumBlocks() const {
   return m_numBlocks;
}

inline void FcalShowerNBlocks::setNumBlocks(int numBlocks) {
   m_numBlocks = numBlocks;
}

inline const void *FcalShowerNBlocks::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "numBlocks") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_numBlocks;
   }
   return m_parent->getAttribute(name, atype);
}

inline FcalShower::FcalShower(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_E(0),
   m_Eerr(0),
   m_Ezcorr(0),
   m_jtag(""),
   m_t(0),
   m_terr(0),
   m_tzcorr(0),
   m_x(0),
   m_xerr(0),
   m_xycorr(0),
   m_xzcorr(0),
   m_y(0),
   m_yerr(0),
   m_yzcorr(0),
   m_z(0),
   m_zerr(0),
   m_fcalCorrelations_link(&m_host->m_fcalCorrelations_plist,
               m_host->m_fcalCorrelations_plist.end(),
               m_host->m_fcalCorrelations_plist.end(),
               this),
   m_fcalShowerClassification_link(&m_host->m_fcalShowerClassification_plist,
               m_host->m_fcalShowerClassification_plist.end(),
               m_host->m_fcalShowerClassification_plist.end(),
               this),
   m_fcalShowerProperties_link(&m_host->m_fcalShowerProperties_plist,
               m_host->m_fcalShowerProperties_plist.end(),
               m_host->m_fcalShowerProperties_plist.end(),
               this),
   m_fcalShowerNBlocks_link(&m_host->m_fcalShowerNBlocks_plist,
               m_host->m_fcalShowerNBlocks_plist.end(),
               m_host->m_fcalShowerNBlocks_plist.end(),
               this)
{}

inline FcalShower::~FcalShower() {
   deleteFcalCorrelationses();
   deleteFcalShowerClassifications();
   deleteFcalShowerPropertiesList();
   deleteFcalShowerNBlockses();
}

inline std::string FcalShower::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string FcalShower::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string FcalShower::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t FcalShower::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int FcalShower::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float FcalShower::getE() const {
   return m_E;
}

inline void FcalShower::setE(float E) {
   m_E = E;
}

inline float FcalShower::getEerr() const {
   return m_Eerr;
}

inline void FcalShower::setEerr(float Eerr) {
   m_Eerr = Eerr;
}

inline std::string FcalShower::getEunit() const {
   return "GeV";
}

inline float FcalShower::getEzcorr() const {
   return m_Ezcorr;
}

inline void FcalShower::setEzcorr(float Ezcorr) {
   m_Ezcorr = Ezcorr;
}

inline std::string FcalShower::getJtag() const {
   return m_jtag;
}

inline void FcalShower::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline std::string FcalShower::getLunit() const {
   return "cm";
}

inline std::string FcalShower::getMaxOccurs() const {
   return "unbounded";
}

inline int FcalShower::getMinOccurs() const {
   return 0;
}

inline float FcalShower::getT() const {
   return m_t;
}

inline void FcalShower::setT(float t) {
   m_t = t;
}

inline float FcalShower::getTerr() const {
   return m_terr;
}

inline void FcalShower::setTerr(float terr) {
   m_terr = terr;
}

inline std::string FcalShower::getTunit() const {
   return "ns";
}

inline float FcalShower::getTzcorr() const {
   return m_tzcorr;
}

inline void FcalShower::setTzcorr(float tzcorr) {
   m_tzcorr = tzcorr;
}

inline float FcalShower::getX() const {
   return m_x;
}

inline void FcalShower::setX(float x) {
   m_x = x;
}

inline float FcalShower::getXerr() const {
   return m_xerr;
}

inline void FcalShower::setXerr(float xerr) {
   m_xerr = xerr;
}

inline float FcalShower::getXycorr() const {
   return m_xycorr;
}

inline void FcalShower::setXycorr(float xycorr) {
   m_xycorr = xycorr;
}

inline float FcalShower::getXzcorr() const {
   return m_xzcorr;
}

inline void FcalShower::setXzcorr(float xzcorr) {
   m_xzcorr = xzcorr;
}

inline float FcalShower::getY() const {
   return m_y;
}

inline void FcalShower::setY(float y) {
   m_y = y;
}

inline float FcalShower::getYerr() const {
   return m_yerr;
}

inline void FcalShower::setYerr(float yerr) {
   m_yerr = yerr;
}

inline float FcalShower::getYzcorr() const {
   return m_yzcorr;
}

inline void FcalShower::setYzcorr(float yzcorr) {
   m_yzcorr = yzcorr;
}

inline float FcalShower::getZ() const {
   return m_z;
}

inline void FcalShower::setZ(float z) {
   m_z = z;
}

inline float FcalShower::getZerr() const {
   return m_zerr;
}

inline void FcalShower::setZerr(float zerr) {
   m_zerr = zerr;
}

inline const void *FcalShower::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "E") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_E;
   }
   if (name == "Eerr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_Eerr;
   }
   if (name == "Eunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_Eunit = getEunit();
      return &m_Eunit;
   }
   if (name == "Ezcorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_Ezcorr;
   }
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "t") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_t;
   }
   if (name == "terr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_terr;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   if (name == "tzcorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tzcorr;
   }
   if (name == "x") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_x;
   }
   if (name == "xerr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_xerr;
   }
   if (name == "xycorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_xycorr;
   }
   if (name == "xzcorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_xzcorr;
   }
   if (name == "y") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_y;
   }
   if (name == "yerr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_yerr;
   }
   if (name == "yzcorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_yzcorr;
   }
   if (name == "z") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_z;
   }
   if (name == "zerr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_zerr;
   }
   return m_parent->getAttribute(name, atype);
}

inline FcalCorrelations &FcalShower::getFcalCorrelations() {
   return m_fcalCorrelations_link.front();
}

inline FcalCorrelationsList &FcalShower::getFcalCorrelationses() {
   return m_fcalCorrelations_link;
}

inline FcalCorrelationsList FcalShower::addFcalCorrelationses(int count, int start) {
   return m_fcalCorrelations_link.add(count,start);
}

inline void FcalShower::deleteFcalCorrelationses(int count, int start) {
   m_fcalCorrelations_link.del(count,start);
}

inline FcalShowerClassification &FcalShower::getFcalShowerClassification() {
   return m_fcalShowerClassification_link.front();
}

inline FcalShowerClassificationList &FcalShower::getFcalShowerClassifications() {
   return m_fcalShowerClassification_link;
}

inline FcalShowerClassificationList FcalShower::addFcalShowerClassifications(int count, int start) {
   return m_fcalShowerClassification_link.add(count,start);
}

inline void FcalShower::deleteFcalShowerClassifications(int count, int start) {
   m_fcalShowerClassification_link.del(count,start);
}

inline FcalShowerProperties &FcalShower::getFcalShowerProperties() {
   return m_fcalShowerProperties_link.front();
}

inline FcalShowerPropertiesList &FcalShower::getFcalShowerPropertiesList() {
   return m_fcalShowerProperties_link;
}

inline FcalShowerPropertiesList FcalShower::addFcalShowerPropertiesList(int count, int start) {
   return m_fcalShowerProperties_link.add(count,start);
}

inline void FcalShower::deleteFcalShowerPropertiesList(int count, int start) {
   m_fcalShowerProperties_link.del(count,start);
}

inline FcalShowerNBlocks &FcalShower::getFcalShowerNBlocks() {
   return m_fcalShowerNBlocks_link.front();
}

inline FcalShowerNBlocksList &FcalShower::getFcalShowerNBlockses() {
   return m_fcalShowerNBlocks_link;
}

inline FcalShowerNBlocksList FcalShower::addFcalShowerNBlockses(int count, int start) {
   return m_fcalShowerNBlocks_link.add(count,start);
}

inline void FcalShower::deleteFcalShowerNBlockses(int count, int start) {
   m_fcalShowerNBlocks_link.del(count,start);
}

inline Preshower::Preshower(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_preshowerE(0)
{}

inline Preshower::~Preshower() {}

inline std::string Preshower::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string Preshower::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string Preshower::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t Preshower::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int Preshower::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float Preshower::getE() const {
   return *(float*)m_parent->getAttribute("E");
}

inline float Preshower::getEerr() const {
   return *(float*)m_parent->getAttribute("Eerr");
}

inline std::string Preshower::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline float Preshower::getEzcorr() const {
   return *(float*)m_parent->getAttribute("Ezcorr");
}

inline std::string Preshower::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string Preshower::getLunit() const {
   return *(std::string*)m_parent->getAttribute("lunit");
}

inline float Preshower::getT() const {
   return *(float*)m_parent->getAttribute("t");
}

inline float Preshower::getTerr() const {
   return *(float*)m_parent->getAttribute("terr");
}

inline std::string Preshower::getTunit() const {
   return *(std::string*)m_parent->getAttribute("tunit");
}

inline float Preshower::getTzcorr() const {
   return *(float*)m_parent->getAttribute("tzcorr");
}

inline float Preshower::getX() const {
   return *(float*)m_parent->getAttribute("x");
}

inline float Preshower::getXerr() const {
   return *(float*)m_parent->getAttribute("xerr");
}

inline float Preshower::getXycorr() const {
   return *(float*)m_parent->getAttribute("xycorr");
}

inline float Preshower::getXzcorr() const {
   return *(float*)m_parent->getAttribute("xzcorr");
}

inline float Preshower::getY() const {
   return *(float*)m_parent->getAttribute("y");
}

inline float Preshower::getYerr() const {
   return *(float*)m_parent->getAttribute("yerr");
}

inline float Preshower::getYzcorr() const {
   return *(float*)m_parent->getAttribute("yzcorr");
}

inline float Preshower::getZ() const {
   return *(float*)m_parent->getAttribute("z");
}

inline float Preshower::getZerr() const {
   return *(float*)m_parent->getAttribute("zerr");
}

inline int Preshower::getMaxOccurs() const {
   return 1;
}

inline int Preshower::getMinOccurs() const {
   return 0;
}

inline float Preshower::getPreshowerE() const {
   return m_preshowerE;
}

inline void Preshower::setPreshowerE(float preshowerE) {
   m_preshowerE = preshowerE;
}

inline const void *Preshower::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "preshowerE") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_preshowerE;
   }
   return m_parent->getAttribute(name, atype);
}

inline Width::Width(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_sigLong(0),
   m_sigTheta(0),
   m_sigTrans(0)
{}

inline Width::~Width() {}

inline std::string Width::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string Width::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string Width::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t Width::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int Width::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float Width::getE() const {
   return *(float*)m_parent->getAttribute("E");
}

inline float Width::getEerr() const {
   return *(float*)m_parent->getAttribute("Eerr");
}

inline std::string Width::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline float Width::getEzcorr() const {
   return *(float*)m_parent->getAttribute("Ezcorr");
}

inline std::string Width::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string Width::getLunit() const {
   return *(std::string*)m_parent->getAttribute("lunit");
}

inline float Width::getT() const {
   return *(float*)m_parent->getAttribute("t");
}

inline float Width::getTerr() const {
   return *(float*)m_parent->getAttribute("terr");
}

inline std::string Width::getTunit() const {
   return *(std::string*)m_parent->getAttribute("tunit");
}

inline float Width::getTzcorr() const {
   return *(float*)m_parent->getAttribute("tzcorr");
}

inline float Width::getX() const {
   return *(float*)m_parent->getAttribute("x");
}

inline float Width::getXerr() const {
   return *(float*)m_parent->getAttribute("xerr");
}

inline float Width::getXycorr() const {
   return *(float*)m_parent->getAttribute("xycorr");
}

inline float Width::getXzcorr() const {
   return *(float*)m_parent->getAttribute("xzcorr");
}

inline float Width::getY() const {
   return *(float*)m_parent->getAttribute("y");
}

inline float Width::getYerr() const {
   return *(float*)m_parent->getAttribute("yerr");
}

inline float Width::getYzcorr() const {
   return *(float*)m_parent->getAttribute("yzcorr");
}

inline float Width::getZ() const {
   return *(float*)m_parent->getAttribute("z");
}

inline float Width::getZerr() const {
   return *(float*)m_parent->getAttribute("zerr");
}

inline int Width::getMaxOccurs() const {
   return 1;
}

inline int Width::getMinOccurs() const {
   return 0;
}

inline float Width::getSigLong() const {
   return m_sigLong;
}

inline void Width::setSigLong(float sigLong) {
   m_sigLong = sigLong;
}

inline float Width::getSigTheta() const {
   return m_sigTheta;
}

inline void Width::setSigTheta(float sigTheta) {
   m_sigTheta = sigTheta;
}

inline float Width::getSigTrans() const {
   return m_sigTrans;
}

inline void Width::setSigTrans(float sigTrans) {
   m_sigTrans = sigTrans;
}

inline const void *Width::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "sigLong") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_sigLong;
   }
   if (name == "sigTheta") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_sigTheta;
   }
   if (name == "sigTrans") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_sigTrans;
   }
   return m_parent->getAttribute(name, atype);
}

inline BcalCluster::BcalCluster(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_ncell(0)
{}

inline BcalCluster::~BcalCluster() {}

inline std::string BcalCluster::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string BcalCluster::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string BcalCluster::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t BcalCluster::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int BcalCluster::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float BcalCluster::getE() const {
   return *(float*)m_parent->getAttribute("E");
}

inline float BcalCluster::getEerr() const {
   return *(float*)m_parent->getAttribute("Eerr");
}

inline std::string BcalCluster::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline float BcalCluster::getEzcorr() const {
   return *(float*)m_parent->getAttribute("Ezcorr");
}

inline std::string BcalCluster::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string BcalCluster::getLunit() const {
   return *(std::string*)m_parent->getAttribute("lunit");
}

inline float BcalCluster::getT() const {
   return *(float*)m_parent->getAttribute("t");
}

inline float BcalCluster::getTerr() const {
   return *(float*)m_parent->getAttribute("terr");
}

inline std::string BcalCluster::getTunit() const {
   return *(std::string*)m_parent->getAttribute("tunit");
}

inline float BcalCluster::getTzcorr() const {
   return *(float*)m_parent->getAttribute("tzcorr");
}

inline float BcalCluster::getX() const {
   return *(float*)m_parent->getAttribute("x");
}

inline float BcalCluster::getXerr() const {
   return *(float*)m_parent->getAttribute("xerr");
}

inline float BcalCluster::getXycorr() const {
   return *(float*)m_parent->getAttribute("xycorr");
}

inline float BcalCluster::getXzcorr() const {
   return *(float*)m_parent->getAttribute("xzcorr");
}

inline float BcalCluster::getY() const {
   return *(float*)m_parent->getAttribute("y");
}

inline float BcalCluster::getYerr() const {
   return *(float*)m_parent->getAttribute("yerr");
}

inline float BcalCluster::getYzcorr() const {
   return *(float*)m_parent->getAttribute("yzcorr");
}

inline float BcalCluster::getZ() const {
   return *(float*)m_parent->getAttribute("z");
}

inline float BcalCluster::getZerr() const {
   return *(float*)m_parent->getAttribute("zerr");
}

inline int BcalCluster::getMaxOccurs() const {
   return 1;
}

inline int BcalCluster::getMinOccurs() const {
   return 0;
}

inline int BcalCluster::getNcell() const {
   return m_ncell;
}

inline void BcalCluster::setNcell(int ncell) {
   m_ncell = ncell;
}

inline const void *BcalCluster::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "ncell") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_ncell;
   }
   return m_parent->getAttribute(name, atype);
}

inline BcalCorrelations::BcalCorrelations(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_Etcorr(0),
   m_Excorr(0),
   m_Eycorr(0),
   m_txcorr(0),
   m_tycorr(0)
{}

inline BcalCorrelations::~BcalCorrelations() {}

inline std::string BcalCorrelations::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string BcalCorrelations::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string BcalCorrelations::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t BcalCorrelations::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int BcalCorrelations::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float BcalCorrelations::getE() const {
   return *(float*)m_parent->getAttribute("E");
}

inline float BcalCorrelations::getEerr() const {
   return *(float*)m_parent->getAttribute("Eerr");
}

inline std::string BcalCorrelations::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline float BcalCorrelations::getEzcorr() const {
   return *(float*)m_parent->getAttribute("Ezcorr");
}

inline std::string BcalCorrelations::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string BcalCorrelations::getLunit() const {
   return *(std::string*)m_parent->getAttribute("lunit");
}

inline float BcalCorrelations::getT() const {
   return *(float*)m_parent->getAttribute("t");
}

inline float BcalCorrelations::getTerr() const {
   return *(float*)m_parent->getAttribute("terr");
}

inline std::string BcalCorrelations::getTunit() const {
   return *(std::string*)m_parent->getAttribute("tunit");
}

inline float BcalCorrelations::getTzcorr() const {
   return *(float*)m_parent->getAttribute("tzcorr");
}

inline float BcalCorrelations::getX() const {
   return *(float*)m_parent->getAttribute("x");
}

inline float BcalCorrelations::getXerr() const {
   return *(float*)m_parent->getAttribute("xerr");
}

inline float BcalCorrelations::getXycorr() const {
   return *(float*)m_parent->getAttribute("xycorr");
}

inline float BcalCorrelations::getXzcorr() const {
   return *(float*)m_parent->getAttribute("xzcorr");
}

inline float BcalCorrelations::getY() const {
   return *(float*)m_parent->getAttribute("y");
}

inline float BcalCorrelations::getYerr() const {
   return *(float*)m_parent->getAttribute("yerr");
}

inline float BcalCorrelations::getYzcorr() const {
   return *(float*)m_parent->getAttribute("yzcorr");
}

inline float BcalCorrelations::getZ() const {
   return *(float*)m_parent->getAttribute("z");
}

inline float BcalCorrelations::getZerr() const {
   return *(float*)m_parent->getAttribute("zerr");
}

inline float BcalCorrelations::getEtcorr() const {
   return m_Etcorr;
}

inline void BcalCorrelations::setEtcorr(float Etcorr) {
   m_Etcorr = Etcorr;
}

inline float BcalCorrelations::getExcorr() const {
   return m_Excorr;
}

inline void BcalCorrelations::setExcorr(float Excorr) {
   m_Excorr = Excorr;
}

inline float BcalCorrelations::getEycorr() const {
   return m_Eycorr;
}

inline void BcalCorrelations::setEycorr(float Eycorr) {
   m_Eycorr = Eycorr;
}

inline int BcalCorrelations::getMaxOccurs() const {
   return 1;
}

inline int BcalCorrelations::getMinOccurs() const {
   return 0;
}

inline float BcalCorrelations::getTxcorr() const {
   return m_txcorr;
}

inline void BcalCorrelations::setTxcorr(float txcorr) {
   m_txcorr = txcorr;
}

inline float BcalCorrelations::getTycorr() const {
   return m_tycorr;
}

inline void BcalCorrelations::setTycorr(float tycorr) {
   m_tycorr = tycorr;
}

inline const void *BcalCorrelations::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "Etcorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_Etcorr;
   }
   if (name == "Excorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_Excorr;
   }
   if (name == "Eycorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_Eycorr;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "txcorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_txcorr;
   }
   if (name == "tycorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tycorr;
   }
   return m_parent->getAttribute(name, atype);
}

inline BcalLayers::BcalLayers(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_E_L2(0),
   m_E_L3(0),
   m_E_L4(0),
   m_rmsTime(0)
{}

inline BcalLayers::~BcalLayers() {}

inline std::string BcalLayers::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string BcalLayers::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string BcalLayers::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t BcalLayers::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int BcalLayers::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float BcalLayers::getE() const {
   return *(float*)m_parent->getAttribute("E");
}

inline float BcalLayers::getEerr() const {
   return *(float*)m_parent->getAttribute("Eerr");
}

inline std::string BcalLayers::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline float BcalLayers::getEzcorr() const {
   return *(float*)m_parent->getAttribute("Ezcorr");
}

inline std::string BcalLayers::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string BcalLayers::getLunit() const {
   return *(std::string*)m_parent->getAttribute("lunit");
}

inline float BcalLayers::getT() const {
   return *(float*)m_parent->getAttribute("t");
}

inline float BcalLayers::getTerr() const {
   return *(float*)m_parent->getAttribute("terr");
}

inline std::string BcalLayers::getTunit() const {
   return *(std::string*)m_parent->getAttribute("tunit");
}

inline float BcalLayers::getTzcorr() const {
   return *(float*)m_parent->getAttribute("tzcorr");
}

inline float BcalLayers::getX() const {
   return *(float*)m_parent->getAttribute("x");
}

inline float BcalLayers::getXerr() const {
   return *(float*)m_parent->getAttribute("xerr");
}

inline float BcalLayers::getXycorr() const {
   return *(float*)m_parent->getAttribute("xycorr");
}

inline float BcalLayers::getXzcorr() const {
   return *(float*)m_parent->getAttribute("xzcorr");
}

inline float BcalLayers::getY() const {
   return *(float*)m_parent->getAttribute("y");
}

inline float BcalLayers::getYerr() const {
   return *(float*)m_parent->getAttribute("yerr");
}

inline float BcalLayers::getYzcorr() const {
   return *(float*)m_parent->getAttribute("yzcorr");
}

inline float BcalLayers::getZ() const {
   return *(float*)m_parent->getAttribute("z");
}

inline float BcalLayers::getZerr() const {
   return *(float*)m_parent->getAttribute("zerr");
}

inline float BcalLayers::getE_L2() const {
   return m_E_L2;
}

inline void BcalLayers::setE_L2(float E_L2) {
   m_E_L2 = E_L2;
}

inline float BcalLayers::getE_L3() const {
   return m_E_L3;
}

inline void BcalLayers::setE_L3(float E_L3) {
   m_E_L3 = E_L3;
}

inline float BcalLayers::getE_L4() const {
   return m_E_L4;
}

inline void BcalLayers::setE_L4(float E_L4) {
   m_E_L4 = E_L4;
}

inline int BcalLayers::getMaxOccurs() const {
   return 1;
}

inline int BcalLayers::getMinOccurs() const {
   return 0;
}

inline float BcalLayers::getRmsTime() const {
   return m_rmsTime;
}

inline void BcalLayers::setRmsTime(float rmsTime) {
   m_rmsTime = rmsTime;
}

inline const void *BcalLayers::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "E_L2") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_E_L2;
   }
   if (name == "E_L3") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_E_L3;
   }
   if (name == "E_L4") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_E_L4;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "rmsTime") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_rmsTime;
   }
   return m_parent->getAttribute(name, atype);
}

inline BcalShower::BcalShower(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_E(0),
   m_Eerr(0),
   m_Ezcorr(0),
   m_jtag(""),
   m_t(0),
   m_terr(0),
   m_tzcorr(0),
   m_x(0),
   m_xerr(0),
   m_xycorr(0),
   m_xzcorr(0),
   m_y(0),
   m_yerr(0),
   m_yzcorr(0),
   m_z(0),
   m_zerr(0),
   m_preshower_link(&m_host->m_preshower_plist,
               m_host->m_preshower_plist.end(),
               m_host->m_preshower_plist.end(),
               this),
   m_width_link(&m_host->m_width_plist,
               m_host->m_width_plist.end(),
               m_host->m_width_plist.end(),
               this),
   m_bcalCluster_link(&m_host->m_bcalCluster_plist,
               m_host->m_bcalCluster_plist.end(),
               m_host->m_bcalCluster_plist.end(),
               this),
   m_bcalCorrelations_link(&m_host->m_bcalCorrelations_plist,
               m_host->m_bcalCorrelations_plist.end(),
               m_host->m_bcalCorrelations_plist.end(),
               this),
   m_bcalLayers_link(&m_host->m_bcalLayers_plist,
               m_host->m_bcalLayers_plist.end(),
               m_host->m_bcalLayers_plist.end(),
               this)
{}

inline BcalShower::~BcalShower() {
   deletePreshowers();
   deleteWidths();
   deleteBcalClusters();
   deleteBcalCorrelationses();
   deleteBcalLayerses();
}

inline std::string BcalShower::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string BcalShower::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string BcalShower::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t BcalShower::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int BcalShower::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float BcalShower::getE() const {
   return m_E;
}

inline void BcalShower::setE(float E) {
   m_E = E;
}

inline float BcalShower::getEerr() const {
   return m_Eerr;
}

inline void BcalShower::setEerr(float Eerr) {
   m_Eerr = Eerr;
}

inline std::string BcalShower::getEunit() const {
   return "GeV";
}

inline float BcalShower::getEzcorr() const {
   return m_Ezcorr;
}

inline void BcalShower::setEzcorr(float Ezcorr) {
   m_Ezcorr = Ezcorr;
}

inline std::string BcalShower::getJtag() const {
   return m_jtag;
}

inline void BcalShower::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline std::string BcalShower::getLunit() const {
   return "cm";
}

inline std::string BcalShower::getMaxOccurs() const {
   return "unbounded";
}

inline int BcalShower::getMinOccurs() const {
   return 0;
}

inline float BcalShower::getT() const {
   return m_t;
}

inline void BcalShower::setT(float t) {
   m_t = t;
}

inline float BcalShower::getTerr() const {
   return m_terr;
}

inline void BcalShower::setTerr(float terr) {
   m_terr = terr;
}

inline std::string BcalShower::getTunit() const {
   return "ns";
}

inline float BcalShower::getTzcorr() const {
   return m_tzcorr;
}

inline void BcalShower::setTzcorr(float tzcorr) {
   m_tzcorr = tzcorr;
}

inline float BcalShower::getX() const {
   return m_x;
}

inline void BcalShower::setX(float x) {
   m_x = x;
}

inline float BcalShower::getXerr() const {
   return m_xerr;
}

inline void BcalShower::setXerr(float xerr) {
   m_xerr = xerr;
}

inline float BcalShower::getXycorr() const {
   return m_xycorr;
}

inline void BcalShower::setXycorr(float xycorr) {
   m_xycorr = xycorr;
}

inline float BcalShower::getXzcorr() const {
   return m_xzcorr;
}

inline void BcalShower::setXzcorr(float xzcorr) {
   m_xzcorr = xzcorr;
}

inline float BcalShower::getY() const {
   return m_y;
}

inline void BcalShower::setY(float y) {
   m_y = y;
}

inline float BcalShower::getYerr() const {
   return m_yerr;
}

inline void BcalShower::setYerr(float yerr) {
   m_yerr = yerr;
}

inline float BcalShower::getYzcorr() const {
   return m_yzcorr;
}

inline void BcalShower::setYzcorr(float yzcorr) {
   m_yzcorr = yzcorr;
}

inline float BcalShower::getZ() const {
   return m_z;
}

inline void BcalShower::setZ(float z) {
   m_z = z;
}

inline float BcalShower::getZerr() const {
   return m_zerr;
}

inline void BcalShower::setZerr(float zerr) {
   m_zerr = zerr;
}

inline const void *BcalShower::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "E") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_E;
   }
   if (name == "Eerr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_Eerr;
   }
   if (name == "Eunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_Eunit = getEunit();
      return &m_Eunit;
   }
   if (name == "Ezcorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_Ezcorr;
   }
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "t") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_t;
   }
   if (name == "terr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_terr;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   if (name == "tzcorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tzcorr;
   }
   if (name == "x") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_x;
   }
   if (name == "xerr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_xerr;
   }
   if (name == "xycorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_xycorr;
   }
   if (name == "xzcorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_xzcorr;
   }
   if (name == "y") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_y;
   }
   if (name == "yerr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_yerr;
   }
   if (name == "yzcorr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_yzcorr;
   }
   if (name == "z") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_z;
   }
   if (name == "zerr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_zerr;
   }
   return m_parent->getAttribute(name, atype);
}

inline Preshower &BcalShower::getPreshower() {
   return m_preshower_link.front();
}

inline PreshowerList &BcalShower::getPreshowers() {
   return m_preshower_link;
}

inline PreshowerList BcalShower::addPreshowers(int count, int start) {
   return m_preshower_link.add(count,start);
}

inline void BcalShower::deletePreshowers(int count, int start) {
   m_preshower_link.del(count,start);
}

inline Width &BcalShower::getWidth() {
   return m_width_link.front();
}

inline WidthList &BcalShower::getWidths() {
   return m_width_link;
}

inline WidthList BcalShower::addWidths(int count, int start) {
   return m_width_link.add(count,start);
}

inline void BcalShower::deleteWidths(int count, int start) {
   m_width_link.del(count,start);
}

inline BcalCluster &BcalShower::getBcalCluster() {
   return m_bcalCluster_link.front();
}

inline BcalClusterList &BcalShower::getBcalClusters() {
   return m_bcalCluster_link;
}

inline BcalClusterList BcalShower::addBcalClusters(int count, int start) {
   return m_bcalCluster_link.add(count,start);
}

inline void BcalShower::deleteBcalClusters(int count, int start) {
   m_bcalCluster_link.del(count,start);
}

inline BcalCorrelations &BcalShower::getBcalCorrelations() {
   return m_bcalCorrelations_link.front();
}

inline BcalCorrelationsList &BcalShower::getBcalCorrelationses() {
   return m_bcalCorrelations_link;
}

inline BcalCorrelationsList BcalShower::addBcalCorrelationses(int count, int start) {
   return m_bcalCorrelations_link.add(count,start);
}

inline void BcalShower::deleteBcalCorrelationses(int count, int start) {
   m_bcalCorrelations_link.del(count,start);
}

inline BcalLayers &BcalShower::getBcalLayers() {
   return m_bcalLayers_link.front();
}

inline BcalLayersList &BcalShower::getBcalLayerses() {
   return m_bcalLayers_link;
}

inline BcalLayersList BcalShower::addBcalLayerses(int count, int start) {
   return m_bcalLayers_link.add(count,start);
}

inline void BcalShower::deleteBcalLayerses(int count, int start) {
   m_bcalLayers_link.del(count,start);
}

inline CcalShower::CcalShower(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_E(0),
   m_Eerr(0),
   m_Emax(0),
   m_chi2(0),
   m_dime(0),
   m_id(0),
   m_idmax(0),
   m_jtag(""),
   m_t(0),
   m_terr(0),
   m_type(0),
   m_x(0),
   m_x1(0),
   m_y(0),
   m_y1(0),
   m_z(0)
{}

inline CcalShower::~CcalShower() {}

inline std::string CcalShower::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string CcalShower::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string CcalShower::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t CcalShower::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int CcalShower::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline float CcalShower::getE() const {
   return m_E;
}

inline void CcalShower::setE(float E) {
   m_E = E;
}

inline float CcalShower::getEerr() const {
   return m_Eerr;
}

inline void CcalShower::setEerr(float Eerr) {
   m_Eerr = Eerr;
}

inline float CcalShower::getEmax() const {
   return m_Emax;
}

inline void CcalShower::setEmax(float Emax) {
   m_Emax = Emax;
}

inline std::string CcalShower::getEunit() const {
   return "GeV";
}

inline float CcalShower::getChi2() const {
   return m_chi2;
}

inline void CcalShower::setChi2(float chi2) {
   m_chi2 = chi2;
}

inline int CcalShower::getDime() const {
   return m_dime;
}

inline void CcalShower::setDime(int dime) {
   m_dime = dime;
}

inline int CcalShower::getId() const {
   return m_id;
}

inline void CcalShower::setId(int id) {
   m_id = id;
}

inline int CcalShower::getIdmax() const {
   return m_idmax;
}

inline void CcalShower::setIdmax(int idmax) {
   m_idmax = idmax;
}

inline std::string CcalShower::getJtag() const {
   return m_jtag;
}

inline void CcalShower::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline std::string CcalShower::getLunit() const {
   return "cm";
}

inline std::string CcalShower::getMaxOccurs() const {
   return "unbounded";
}

inline int CcalShower::getMinOccurs() const {
   return 0;
}

inline float CcalShower::getT() const {
   return m_t;
}

inline void CcalShower::setT(float t) {
   m_t = t;
}

inline float CcalShower::getTerr() const {
   return m_terr;
}

inline void CcalShower::setTerr(float terr) {
   m_terr = terr;
}

inline std::string CcalShower::getTunit() const {
   return "ns";
}

inline int CcalShower::getType() const {
   return m_type;
}

inline void CcalShower::setType(int type) {
   m_type = type;
}

inline float CcalShower::getX() const {
   return m_x;
}

inline void CcalShower::setX(float x) {
   m_x = x;
}

inline float CcalShower::getX1() const {
   return m_x1;
}

inline void CcalShower::setX1(float x1) {
   m_x1 = x1;
}

inline float CcalShower::getY() const {
   return m_y;
}

inline void CcalShower::setY(float y) {
   m_y = y;
}

inline float CcalShower::getY1() const {
   return m_y1;
}

inline void CcalShower::setY1(float y1) {
   m_y1 = y1;
}

inline float CcalShower::getZ() const {
   return m_z;
}

inline void CcalShower::setZ(float z) {
   m_z = z;
}

inline const void *CcalShower::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "E") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_E;
   }
   if (name == "Eerr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_Eerr;
   }
   if (name == "Emax") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_Emax;
   }
   if (name == "Eunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_Eunit = getEunit();
      return &m_Eunit;
   }
   if (name == "chi2") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_chi2;
   }
   if (name == "dime") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_dime;
   }
   if (name == "id") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_id;
   }
   if (name == "idmax") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_idmax;
   }
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "t") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_t;
   }
   if (name == "terr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_terr;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   if (name == "type") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_type;
   }
   if (name == "x") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_x;
   }
   if (name == "x1") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_x1;
   }
   if (name == "y") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_y;
   }
   if (name == "y1") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_y1;
   }
   if (name == "z") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_z;
   }
   return m_parent->getAttribute(name, atype);
}

inline TrackFit::TrackFit(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_Ndof(0),
   m_chisq(0),
   m_e11(0),
   m_e12(0),
   m_e13(0),
   m_e14(0),
   m_e15(0),
   m_e22(0),
   m_e23(0),
   m_e24(0),
   m_e25(0),
   m_e33(0),
   m_e34(0),
   m_e35(0),
   m_e44(0),
   m_e45(0),
   m_e55(0),
   m_px(0),
   m_py(0),
   m_pz(0),
   m_t0(0),
   m_t0det(0),
   m_t0err(0),
   m_x0(0),
   m_y0(0),
   m_z0(0)
{}

inline TrackFit::~TrackFit() {}

inline std::string TrackFit::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string TrackFit::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string TrackFit::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t TrackFit::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int TrackFit::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline int TrackFit::getCandidateId() const {
   return *(int*)m_parent->getAttribute("candidateId");
}

inline std::string TrackFit::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string TrackFit::getMaxOccurs() const {
   return *(std::string*)m_parent->getAttribute("maxOccurs");
}

inline int TrackFit::getMinOccurs() const {
   return *(int*)m_parent->getAttribute("minOccurs");
}

inline Particle_t TrackFit::getPtype() const {
   return *(Particle_t*)m_parent->getAttribute("ptype");
}

inline int TrackFit::getNdof() const {
   return m_Ndof;
}

inline void TrackFit::setNdof(int Ndof) {
   m_Ndof = Ndof;
}

inline float TrackFit::getChisq() const {
   return m_chisq;
}

inline void TrackFit::setChisq(float chisq) {
   m_chisq = chisq;
}

inline float TrackFit::getE11() const {
   return m_e11;
}

inline void TrackFit::setE11(float e11) {
   m_e11 = e11;
}

inline float TrackFit::getE12() const {
   return m_e12;
}

inline void TrackFit::setE12(float e12) {
   m_e12 = e12;
}

inline float TrackFit::getE13() const {
   return m_e13;
}

inline void TrackFit::setE13(float e13) {
   m_e13 = e13;
}

inline float TrackFit::getE14() const {
   return m_e14;
}

inline void TrackFit::setE14(float e14) {
   m_e14 = e14;
}

inline float TrackFit::getE15() const {
   return m_e15;
}

inline void TrackFit::setE15(float e15) {
   m_e15 = e15;
}

inline float TrackFit::getE22() const {
   return m_e22;
}

inline void TrackFit::setE22(float e22) {
   m_e22 = e22;
}

inline float TrackFit::getE23() const {
   return m_e23;
}

inline void TrackFit::setE23(float e23) {
   m_e23 = e23;
}

inline float TrackFit::getE24() const {
   return m_e24;
}

inline void TrackFit::setE24(float e24) {
   m_e24 = e24;
}

inline float TrackFit::getE25() const {
   return m_e25;
}

inline void TrackFit::setE25(float e25) {
   m_e25 = e25;
}

inline float TrackFit::getE33() const {
   return m_e33;
}

inline void TrackFit::setE33(float e33) {
   m_e33 = e33;
}

inline float TrackFit::getE34() const {
   return m_e34;
}

inline void TrackFit::setE34(float e34) {
   m_e34 = e34;
}

inline float TrackFit::getE35() const {
   return m_e35;
}

inline void TrackFit::setE35(float e35) {
   m_e35 = e35;
}

inline float TrackFit::getE44() const {
   return m_e44;
}

inline void TrackFit::setE44(float e44) {
   m_e44 = e44;
}

inline float TrackFit::getE45() const {
   return m_e45;
}

inline void TrackFit::setE45(float e45) {
   m_e45 = e45;
}

inline float TrackFit::getE55() const {
   return m_e55;
}

inline void TrackFit::setE55(float e55) {
   m_e55 = e55;
}

inline std::string TrackFit::getLunit() const {
   return "cm";
}

inline std::string TrackFit::getPunit() const {
   return "GeV/c";
}

inline float TrackFit::getPx() const {
   return m_px;
}

inline void TrackFit::setPx(float px) {
   m_px = px;
}

inline float TrackFit::getPy() const {
   return m_py;
}

inline void TrackFit::setPy(float py) {
   m_py = py;
}

inline float TrackFit::getPz() const {
   return m_pz;
}

inline void TrackFit::setPz(float pz) {
   m_pz = pz;
}

inline float TrackFit::getT0() const {
   return m_t0;
}

inline void TrackFit::setT0(float t0) {
   m_t0 = t0;
}

inline int TrackFit::getT0det() const {
   return m_t0det;
}

inline void TrackFit::setT0det(int t0det) {
   m_t0det = t0det;
}

inline float TrackFit::getT0err() const {
   return m_t0err;
}

inline void TrackFit::setT0err(float t0err) {
   m_t0err = t0err;
}

inline std::string TrackFit::getTunit() const {
   return "ns";
}

inline float TrackFit::getX0() const {
   return m_x0;
}

inline void TrackFit::setX0(float x0) {
   m_x0 = x0;
}

inline float TrackFit::getY0() const {
   return m_y0;
}

inline void TrackFit::setY0(float y0) {
   m_y0 = y0;
}

inline float TrackFit::getZ0() const {
   return m_z0;
}

inline void TrackFit::setZ0(float z0) {
   m_z0 = z0;
}

inline const void *TrackFit::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "Ndof") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_Ndof;
   }
   if (name == "chisq") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_chisq;
   }
   if (name == "e11") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e11;
   }
   if (name == "e12") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e12;
   }
   if (name == "e13") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e13;
   }
   if (name == "e14") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e14;
   }
   if (name == "e15") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e15;
   }
   if (name == "e22") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e22;
   }
   if (name == "e23") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e23;
   }
   if (name == "e24") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e24;
   }
   if (name == "e25") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e25;
   }
   if (name == "e33") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e33;
   }
   if (name == "e34") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e34;
   }
   if (name == "e35") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e35;
   }
   if (name == "e44") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e44;
   }
   if (name == "e45") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e45;
   }
   if (name == "e55") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_e55;
   }
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "punit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_punit = getPunit();
      return &m_punit;
   }
   if (name == "px") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_px;
   }
   if (name == "py") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_py;
   }
   if (name == "pz") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_pz;
   }
   if (name == "t0") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_t0;
   }
   if (name == "t0det") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_t0det;
   }
   if (name == "t0err") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_t0err;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   if (name == "x0") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_x0;
   }
   if (name == "y0") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_y0;
   }
   if (name == "z0") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_z0;
   }
   return m_parent->getAttribute(name, atype);
}

inline TrackFlags::TrackFlags(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_flags(0)
{}

inline TrackFlags::~TrackFlags() {}

inline std::string TrackFlags::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string TrackFlags::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string TrackFlags::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t TrackFlags::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int TrackFlags::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline int TrackFlags::getCandidateId() const {
   return *(int*)m_parent->getAttribute("candidateId");
}

inline std::string TrackFlags::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline Particle_t TrackFlags::getPtype() const {
   return *(Particle_t*)m_parent->getAttribute("ptype");
}

inline int TrackFlags::getFlags() const {
   return m_flags;
}

inline void TrackFlags::setFlags(int flags) {
   m_flags = flags;
}

inline int TrackFlags::getMaxOccurs() const {
   return 1;
}

inline int TrackFlags::getMinOccurs() const {
   return 0;
}

inline const void *TrackFlags::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "flags") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_flags;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline Hitlayers::Hitlayers(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_CDCrings(0),
   m_FDCplanes(0)
{}

inline Hitlayers::~Hitlayers() {}

inline std::string Hitlayers::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string Hitlayers::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string Hitlayers::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t Hitlayers::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int Hitlayers::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline int Hitlayers::getCandidateId() const {
   return *(int*)m_parent->getAttribute("candidateId");
}

inline std::string Hitlayers::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline Particle_t Hitlayers::getPtype() const {
   return *(Particle_t*)m_parent->getAttribute("ptype");
}

inline int Hitlayers::getCDCrings() const {
   return m_CDCrings;
}

inline void Hitlayers::setCDCrings(int CDCrings) {
   m_CDCrings = CDCrings;
}

inline int Hitlayers::getFDCplanes() const {
   return m_FDCplanes;
}

inline void Hitlayers::setFDCplanes(int FDCplanes) {
   m_FDCplanes = FDCplanes;
}

inline int Hitlayers::getMaxOccurs() const {
   return 1;
}

inline int Hitlayers::getMinOccurs() const {
   return 0;
}

inline const void *Hitlayers::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "CDCrings") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_CDCrings;
   }
   if (name == "FDCplanes") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_FDCplanes;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline Expectedhits::Expectedhits(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_expectedCDChits(0),
   m_expectedFDChits(0),
   m_measuredCDChits(0),
   m_measuredFDChits(0)
{}

inline Expectedhits::~Expectedhits() {}

inline std::string Expectedhits::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string Expectedhits::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string Expectedhits::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t Expectedhits::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int Expectedhits::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline int Expectedhits::getCandidateId() const {
   return *(int*)m_parent->getAttribute("candidateId");
}

inline std::string Expectedhits::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline Particle_t Expectedhits::getPtype() const {
   return *(Particle_t*)m_parent->getAttribute("ptype");
}

inline int Expectedhits::getExpectedCDChits() const {
   return m_expectedCDChits;
}

inline void Expectedhits::setExpectedCDChits(int expectedCDChits) {
   m_expectedCDChits = expectedCDChits;
}

inline int Expectedhits::getExpectedFDChits() const {
   return m_expectedFDChits;
}

inline void Expectedhits::setExpectedFDChits(int expectedFDChits) {
   m_expectedFDChits = expectedFDChits;
}

inline int Expectedhits::getMaxOccurs() const {
   return 1;
}

inline int Expectedhits::getMeasuredCDChits() const {
   return m_measuredCDChits;
}

inline void Expectedhits::setMeasuredCDChits(int measuredCDChits) {
   m_measuredCDChits = measuredCDChits;
}

inline int Expectedhits::getMeasuredFDChits() const {
   return m_measuredFDChits;
}

inline void Expectedhits::setMeasuredFDChits(int measuredFDChits) {
   m_measuredFDChits = measuredFDChits;
}

inline int Expectedhits::getMinOccurs() const {
   return 0;
}

inline const void *Expectedhits::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "expectedCDChits") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_expectedCDChits;
   }
   if (name == "expectedFDChits") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_expectedFDChits;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "measuredCDChits") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_measuredCDChits;
   }
   if (name == "measuredFDChits") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_measuredFDChits;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline Mcmatch::Mcmatch(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_ithrown(0),
   m_numhitsmatch(0)
{}

inline Mcmatch::~Mcmatch() {}

inline std::string Mcmatch::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string Mcmatch::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string Mcmatch::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t Mcmatch::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int Mcmatch::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline int Mcmatch::getCandidateId() const {
   return *(int*)m_parent->getAttribute("candidateId");
}

inline std::string Mcmatch::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline Particle_t Mcmatch::getPtype() const {
   return *(Particle_t*)m_parent->getAttribute("ptype");
}

inline int Mcmatch::getIthrown() const {
   return m_ithrown;
}

inline void Mcmatch::setIthrown(int ithrown) {
   m_ithrown = ithrown;
}

inline int Mcmatch::getMaxOccurs() const {
   return 1;
}

inline int Mcmatch::getMinOccurs() const {
   return 0;
}

inline int Mcmatch::getNumhitsmatch() const {
   return m_numhitsmatch;
}

inline void Mcmatch::setNumhitsmatch(int numhitsmatch) {
   m_numhitsmatch = numhitsmatch;
}

inline const void *Mcmatch::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "ithrown") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_ithrown;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "numhitsmatch") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_numhitsmatch;
   }
   return m_parent->getAttribute(name, atype);
}

inline CDCAmpdEdx::CDCAmpdEdx(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_dEdxCDCAmp(0),
   m_dxCDCAmp(0)
{}

inline CDCAmpdEdx::~CDCAmpdEdx() {}

inline std::string CDCAmpdEdx::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string CDCAmpdEdx::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string CDCAmpdEdx::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t CDCAmpdEdx::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int CDCAmpdEdx::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline int CDCAmpdEdx::getCandidateId() const {
   return *(int*)m_parent->getAttribute("candidateId");
}

inline std::string CDCAmpdEdx::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string CDCAmpdEdx::getMaxOccurs() const {
   return *(std::string*)m_parent->getAttribute("maxOccurs");
}

inline Particle_t CDCAmpdEdx::getPtype() const {
   return *(Particle_t*)m_parent->getAttribute("ptype");
}

inline int CDCAmpdEdx::getNsampleCDC() const {
   return *(int*)m_parent->getAttribute("NsampleCDC");
}

inline int CDCAmpdEdx::getNsampleFDC() const {
   return *(int*)m_parent->getAttribute("NsampleFDC");
}

inline float CDCAmpdEdx::getDEdxCDC() const {
   return *(float*)m_parent->getAttribute("dEdxCDC");
}

inline float CDCAmpdEdx::getDEdxFDC() const {
   return *(float*)m_parent->getAttribute("dEdxFDC");
}

inline std::string CDCAmpdEdx::getDEdx_unit() const {
   return *(std::string*)m_parent->getAttribute("dEdx_unit");
}

inline float CDCAmpdEdx::getDxCDC() const {
   return *(float*)m_parent->getAttribute("dxCDC");
}

inline float CDCAmpdEdx::getDxFDC() const {
   return *(float*)m_parent->getAttribute("dxFDC");
}

inline std::string CDCAmpdEdx::getLunit() const {
   return *(std::string*)m_parent->getAttribute("lunit");
}

inline float CDCAmpdEdx::getDEdxCDCAmp() const {
   return m_dEdxCDCAmp;
}

inline void CDCAmpdEdx::setDEdxCDCAmp(float dEdxCDCAmp) {
   m_dEdxCDCAmp = dEdxCDCAmp;
}

inline float CDCAmpdEdx::getDxCDCAmp() const {
   return m_dxCDCAmp;
}

inline void CDCAmpdEdx::setDxCDCAmp(float dxCDCAmp) {
   m_dxCDCAmp = dxCDCAmp;
}

inline int CDCAmpdEdx::getMinOccurs() const {
   return 0;
}

inline const void *CDCAmpdEdx::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "dEdxCDCAmp") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dEdxCDCAmp;
   }
   if (name == "dxCDCAmp") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dxCDCAmp;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline DEdxDC::DEdxDC(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_NsampleCDC(0),
   m_NsampleFDC(0),
   m_dEdxCDC(0),
   m_dEdxFDC(0),
   m_dxCDC(0),
   m_dxFDC(0),
   m_CDCAmpdEdx_link(&m_host->m_CDCAmpdEdx_plist,
               m_host->m_CDCAmpdEdx_plist.end(),
               m_host->m_CDCAmpdEdx_plist.end(),
               this)
{}

inline DEdxDC::~DEdxDC() {
   deleteCDCAmpdEdxs();
}

inline std::string DEdxDC::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string DEdxDC::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string DEdxDC::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t DEdxDC::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int DEdxDC::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline int DEdxDC::getCandidateId() const {
   return *(int*)m_parent->getAttribute("candidateId");
}

inline std::string DEdxDC::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string DEdxDC::getMaxOccurs() const {
   return *(std::string*)m_parent->getAttribute("maxOccurs");
}

inline Particle_t DEdxDC::getPtype() const {
   return *(Particle_t*)m_parent->getAttribute("ptype");
}

inline int DEdxDC::getNsampleCDC() const {
   return m_NsampleCDC;
}

inline void DEdxDC::setNsampleCDC(int NsampleCDC) {
   m_NsampleCDC = NsampleCDC;
}

inline int DEdxDC::getNsampleFDC() const {
   return m_NsampleFDC;
}

inline void DEdxDC::setNsampleFDC(int NsampleFDC) {
   m_NsampleFDC = NsampleFDC;
}

inline float DEdxDC::getDEdxCDC() const {
   return m_dEdxCDC;
}

inline void DEdxDC::setDEdxCDC(float dEdxCDC) {
   m_dEdxCDC = dEdxCDC;
}

inline float DEdxDC::getDEdxFDC() const {
   return m_dEdxFDC;
}

inline void DEdxDC::setDEdxFDC(float dEdxFDC) {
   m_dEdxFDC = dEdxFDC;
}

inline std::string DEdxDC::getDEdx_unit() const {
   return "GeV/cm";
}

inline float DEdxDC::getDxCDC() const {
   return m_dxCDC;
}

inline void DEdxDC::setDxCDC(float dxCDC) {
   m_dxCDC = dxCDC;
}

inline float DEdxDC::getDxFDC() const {
   return m_dxFDC;
}

inline void DEdxDC::setDxFDC(float dxFDC) {
   m_dxFDC = dxFDC;
}

inline std::string DEdxDC::getLunit() const {
   return "cm";
}

inline int DEdxDC::getMinOccurs() const {
   return 0;
}

inline const void *DEdxDC::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "NsampleCDC") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_NsampleCDC;
   }
   if (name == "NsampleFDC") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_NsampleFDC;
   }
   if (name == "dEdxCDC") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dEdxCDC;
   }
   if (name == "dEdxFDC") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dEdxFDC;
   }
   if (name == "dEdx_unit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_dEdx_unit = getDEdx_unit();
      return &m_dEdx_unit;
   }
   if (name == "dxCDC") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dxCDC;
   }
   if (name == "dxFDC") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dxFDC;
   }
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline CDCAmpdEdx &DEdxDC::getCDCAmpdEdx() {
   return m_CDCAmpdEdx_link.front();
}

inline CDCAmpdEdxList &DEdxDC::getCDCAmpdEdxs() {
   return m_CDCAmpdEdx_link;
}

inline CDCAmpdEdxList DEdxDC::addCDCAmpdEdxs(int count, int start) {
   return m_CDCAmpdEdx_link.add(count,start);
}

inline void DEdxDC::deleteCDCAmpdEdxs(int count, int start) {
   m_CDCAmpdEdx_link.del(count,start);
}

inline ExitParams::ExitParams(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_px1(0),
   m_py1(0),
   m_pz1(0),
   m_t1(0),
   m_x1(0),
   m_y1(0),
   m_z1(0)
{}

inline ExitParams::~ExitParams() {}

inline std::string ExitParams::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string ExitParams::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string ExitParams::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t ExitParams::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int ExitParams::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline int ExitParams::getCandidateId() const {
   return *(int*)m_parent->getAttribute("candidateId");
}

inline std::string ExitParams::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline Particle_t ExitParams::getPtype() const {
   return *(Particle_t*)m_parent->getAttribute("ptype");
}

inline std::string ExitParams::getLunit() const {
   return "cm";
}

inline int ExitParams::getMaxOccurs() const {
   return 1;
}

inline int ExitParams::getMinOccurs() const {
   return 0;
}

inline std::string ExitParams::getPunit() const {
   return "GeV/c";
}

inline float ExitParams::getPx1() const {
   return m_px1;
}

inline void ExitParams::setPx1(float px1) {
   m_px1 = px1;
}

inline float ExitParams::getPy1() const {
   return m_py1;
}

inline void ExitParams::setPy1(float py1) {
   m_py1 = py1;
}

inline float ExitParams::getPz1() const {
   return m_pz1;
}

inline void ExitParams::setPz1(float pz1) {
   m_pz1 = pz1;
}

inline float ExitParams::getT1() const {
   return m_t1;
}

inline void ExitParams::setT1(float t1) {
   m_t1 = t1;
}

inline std::string ExitParams::getTunit() const {
   return "ns";
}

inline float ExitParams::getX1() const {
   return m_x1;
}

inline void ExitParams::setX1(float x1) {
   m_x1 = x1;
}

inline float ExitParams::getY1() const {
   return m_y1;
}

inline void ExitParams::setY1(float y1) {
   m_y1 = y1;
}

inline float ExitParams::getZ1() const {
   return m_z1;
}

inline void ExitParams::setZ1(float z1) {
   m_z1 = z1;
}

inline const void *ExitParams::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "punit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_punit = getPunit();
      return &m_punit;
   }
   if (name == "px1") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_px1;
   }
   if (name == "py1") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_py1;
   }
   if (name == "pz1") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_pz1;
   }
   if (name == "t1") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_t1;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   if (name == "x1") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_x1;
   }
   if (name == "y1") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_y1;
   }
   if (name == "z1") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_z1;
   }
   return m_parent->getAttribute(name, atype);
}

inline ChargedTrack::ChargedTrack(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_candidateId(0),
   m_jtag(""),
   m_ptype(0),
   m_trackFit_link(&m_host->m_trackFit_plist,
               m_host->m_trackFit_plist.end(),
               m_host->m_trackFit_plist.end(),
               this),
   m_trackFlags_link(&m_host->m_trackFlags_plist,
               m_host->m_trackFlags_plist.end(),
               m_host->m_trackFlags_plist.end(),
               this),
   m_hitlayers_link(&m_host->m_hitlayers_plist,
               m_host->m_hitlayers_plist.end(),
               m_host->m_hitlayers_plist.end(),
               this),
   m_expectedhits_link(&m_host->m_expectedhits_plist,
               m_host->m_expectedhits_plist.end(),
               m_host->m_expectedhits_plist.end(),
               this),
   m_mcmatch_link(&m_host->m_mcmatch_plist,
               m_host->m_mcmatch_plist.end(),
               m_host->m_mcmatch_plist.end(),
               this),
   m_dEdxDC_link(&m_host->m_dEdxDC_plist,
               m_host->m_dEdxDC_plist.end(),
               m_host->m_dEdxDC_plist.end(),
               this),
   m_exitParams_link(&m_host->m_exitParams_plist,
               m_host->m_exitParams_plist.end(),
               m_host->m_exitParams_plist.end(),
               this)
{}

inline ChargedTrack::~ChargedTrack() {
   deleteTrackFits();
   deleteTrackFlagses();
   deleteHitlayerses();
   deleteExpectedhitses();
   deleteMcmatchs();
   deleteDEdxDCs();
   deleteExitParamses();
}

inline std::string ChargedTrack::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string ChargedTrack::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string ChargedTrack::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t ChargedTrack::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int ChargedTrack::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline int ChargedTrack::getCandidateId() const {
   return m_candidateId;
}

inline void ChargedTrack::setCandidateId(int candidateId) {
   m_candidateId = candidateId;
}

inline std::string ChargedTrack::getJtag() const {
   return m_jtag;
}

inline void ChargedTrack::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline std::string ChargedTrack::getMaxOccurs() const {
   return "unbounded";
}

inline int ChargedTrack::getMinOccurs() const {
   return 0;
}

inline Particle_t ChargedTrack::getPtype() const {
   return (Particle_t)m_ptype;
}

inline void ChargedTrack::setPtype(Particle_t ptype) {
   m_ptype = ptype;
}

inline const void *ChargedTrack::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "candidateId") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_candidateId;
   }
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "ptype") {
      if (atype != 0)
         *atype = k_hddm_Particle_t;
      return &m_ptype;
   }
   return m_parent->getAttribute(name, atype);
}

inline TrackFit &ChargedTrack::getTrackFit() {
   return m_trackFit_link.front();
}

inline TrackFitList &ChargedTrack::getTrackFits() {
   return m_trackFit_link;
}

inline TrackFitList ChargedTrack::addTrackFits(int count, int start) {
   return m_trackFit_link.add(count,start);
}

inline void ChargedTrack::deleteTrackFits(int count, int start) {
   m_trackFit_link.del(count,start);
}

inline TrackFlags &ChargedTrack::getTrackFlags() {
   return m_trackFlags_link.front();
}

inline TrackFlagsList &ChargedTrack::getTrackFlagses() {
   return m_trackFlags_link;
}

inline TrackFlagsList ChargedTrack::addTrackFlagses(int count, int start) {
   return m_trackFlags_link.add(count,start);
}

inline void ChargedTrack::deleteTrackFlagses(int count, int start) {
   m_trackFlags_link.del(count,start);
}

inline Hitlayers &ChargedTrack::getHitlayers() {
   return m_hitlayers_link.front();
}

inline HitlayersList &ChargedTrack::getHitlayerses() {
   return m_hitlayers_link;
}

inline HitlayersList ChargedTrack::addHitlayerses(int count, int start) {
   return m_hitlayers_link.add(count,start);
}

inline void ChargedTrack::deleteHitlayerses(int count, int start) {
   m_hitlayers_link.del(count,start);
}

inline Expectedhits &ChargedTrack::getExpectedhits() {
   return m_expectedhits_link.front();
}

inline ExpectedhitsList &ChargedTrack::getExpectedhitses() {
   return m_expectedhits_link;
}

inline ExpectedhitsList ChargedTrack::addExpectedhitses(int count, int start) {
   return m_expectedhits_link.add(count,start);
}

inline void ChargedTrack::deleteExpectedhitses(int count, int start) {
   m_expectedhits_link.del(count,start);
}

inline Mcmatch &ChargedTrack::getMcmatch() {
   return m_mcmatch_link.front();
}

inline McmatchList &ChargedTrack::getMcmatchs() {
   return m_mcmatch_link;
}

inline McmatchList ChargedTrack::addMcmatchs(int count, int start) {
   return m_mcmatch_link.add(count,start);
}

inline void ChargedTrack::deleteMcmatchs(int count, int start) {
   m_mcmatch_link.del(count,start);
}

inline DEdxDC &ChargedTrack::getDEdxDC() {
   return m_dEdxDC_link.front();
}

inline DEdxDCList &ChargedTrack::getDEdxDCs() {
   return m_dEdxDC_link;
}

inline DEdxDCList ChargedTrack::addDEdxDCs(int count, int start) {
   return m_dEdxDC_link.add(count,start);
}

inline void ChargedTrack::deleteDEdxDCs(int count, int start) {
   m_dEdxDC_link.del(count,start);
}

inline ExitParams &ChargedTrack::getExitParams() {
   return m_exitParams_link.front();
}

inline ExitParamsList &ChargedTrack::getExitParamses() {
   return m_exitParams_link;
}

inline ExitParamsList ChargedTrack::addExitParamses(int count, int start) {
   return m_exitParams_link.add(count,start);
}

inline void ChargedTrack::deleteExitParamses(int count, int start) {
   m_exitParams_link.del(count,start);
}

inline StartHit::StartHit(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_dE(0),
   m_jtag(""),
   m_sector(0),
   m_t(0)
{}

inline StartHit::~StartHit() {}

inline std::string StartHit::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string StartHit::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string StartHit::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t StartHit::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int StartHit::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string StartHit::getEunit() const {
   return "GeV";
}

inline float StartHit::getDE() const {
   return m_dE;
}

inline void StartHit::setDE(float dE) {
   m_dE = dE;
}

inline std::string StartHit::getJtag() const {
   return m_jtag;
}

inline void StartHit::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline std::string StartHit::getMaxOccurs() const {
   return "unbounded";
}

inline int StartHit::getMinOccurs() const {
   return 0;
}

inline int StartHit::getSector() const {
   return m_sector;
}

inline void StartHit::setSector(int sector) {
   m_sector = sector;
}

inline float StartHit::getT() const {
   return m_t;
}

inline void StartHit::setT(float t) {
   m_t = t;
}

inline std::string StartHit::getTunit() const {
   return "ns";
}

inline const void *StartHit::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "Eunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_Eunit = getEunit();
      return &m_Eunit;
   }
   if (name == "dE") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dE;
   }
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "sector") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_sector;
   }
   if (name == "t") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_t;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   return m_parent->getAttribute(name, atype);
}

inline TofStatus::TofStatus(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_status(0)
{}

inline TofStatus::~TofStatus() {}

inline std::string TofStatus::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string TofStatus::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string TofStatus::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t TofStatus::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int TofStatus::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string TofStatus::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline float TofStatus::getDE() const {
   return *(float*)m_parent->getAttribute("dE");
}

inline std::string TofStatus::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string TofStatus::getLunit() const {
   return *(std::string*)m_parent->getAttribute("lunit");
}

inline float TofStatus::getT() const {
   return *(float*)m_parent->getAttribute("t");
}

inline float TofStatus::getTerr() const {
   return *(float*)m_parent->getAttribute("terr");
}

inline std::string TofStatus::getTunit() const {
   return *(std::string*)m_parent->getAttribute("tunit");
}

inline float TofStatus::getX() const {
   return *(float*)m_parent->getAttribute("x");
}

inline float TofStatus::getY() const {
   return *(float*)m_parent->getAttribute("y");
}

inline float TofStatus::getZ() const {
   return *(float*)m_parent->getAttribute("z");
}

inline int TofStatus::getMaxOccurs() const {
   return 1;
}

inline int TofStatus::getMinOccurs() const {
   return 0;
}

inline int TofStatus::getStatus() const {
   return m_status;
}

inline void TofStatus::setStatus(int status) {
   m_status = status;
}

inline const void *TofStatus::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "status") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_status;
   }
   return m_parent->getAttribute(name, atype);
}

inline TofEnergyDeposition::TofEnergyDeposition(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_dE1(0),
   m_dE2(0)
{}

inline TofEnergyDeposition::~TofEnergyDeposition() {}

inline std::string TofEnergyDeposition::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string TofEnergyDeposition::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string TofEnergyDeposition::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t TofEnergyDeposition::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int TofEnergyDeposition::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string TofEnergyDeposition::getEunit() const {
   return *(std::string*)m_parent->getAttribute("Eunit");
}

inline float TofEnergyDeposition::getDE() const {
   return *(float*)m_parent->getAttribute("dE");
}

inline std::string TofEnergyDeposition::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string TofEnergyDeposition::getLunit() const {
   return *(std::string*)m_parent->getAttribute("lunit");
}

inline float TofEnergyDeposition::getT() const {
   return *(float*)m_parent->getAttribute("t");
}

inline float TofEnergyDeposition::getTerr() const {
   return *(float*)m_parent->getAttribute("terr");
}

inline std::string TofEnergyDeposition::getTunit() const {
   return *(std::string*)m_parent->getAttribute("tunit");
}

inline float TofEnergyDeposition::getX() const {
   return *(float*)m_parent->getAttribute("x");
}

inline float TofEnergyDeposition::getY() const {
   return *(float*)m_parent->getAttribute("y");
}

inline float TofEnergyDeposition::getZ() const {
   return *(float*)m_parent->getAttribute("z");
}

inline float TofEnergyDeposition::getDE1() const {
   return m_dE1;
}

inline void TofEnergyDeposition::setDE1(float dE1) {
   m_dE1 = dE1;
}

inline float TofEnergyDeposition::getDE2() const {
   return m_dE2;
}

inline void TofEnergyDeposition::setDE2(float dE2) {
   m_dE2 = dE2;
}

inline int TofEnergyDeposition::getMaxOccurs() const {
   return 1;
}

inline int TofEnergyDeposition::getMinOccurs() const {
   return 0;
}

inline const void *TofEnergyDeposition::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "dE1") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dE1;
   }
   if (name == "dE2") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dE2;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline TofPoint::TofPoint(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_dE(0),
   m_jtag(""),
   m_t(0),
   m_terr(0),
   m_x(0),
   m_y(0),
   m_z(0),
   m_tofStatus_link(&m_host->m_tofStatus_plist,
               m_host->m_tofStatus_plist.end(),
               m_host->m_tofStatus_plist.end(),
               this),
   m_tofEnergyDeposition_link(&m_host->m_tofEnergyDeposition_plist,
               m_host->m_tofEnergyDeposition_plist.end(),
               m_host->m_tofEnergyDeposition_plist.end(),
               this)
{}

inline TofPoint::~TofPoint() {
   deleteTofStatuses();
   deleteTofEnergyDepositions();
}

inline std::string TofPoint::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string TofPoint::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string TofPoint::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t TofPoint::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int TofPoint::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string TofPoint::getEunit() const {
   return "GeV";
}

inline float TofPoint::getDE() const {
   return m_dE;
}

inline void TofPoint::setDE(float dE) {
   m_dE = dE;
}

inline std::string TofPoint::getJtag() const {
   return m_jtag;
}

inline void TofPoint::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline std::string TofPoint::getLunit() const {
   return "cm";
}

inline std::string TofPoint::getMaxOccurs() const {
   return "unbounded";
}

inline int TofPoint::getMinOccurs() const {
   return 0;
}

inline float TofPoint::getT() const {
   return m_t;
}

inline void TofPoint::setT(float t) {
   m_t = t;
}

inline float TofPoint::getTerr() const {
   return m_terr;
}

inline void TofPoint::setTerr(float terr) {
   m_terr = terr;
}

inline std::string TofPoint::getTunit() const {
   return "ns";
}

inline float TofPoint::getX() const {
   return m_x;
}

inline void TofPoint::setX(float x) {
   m_x = x;
}

inline float TofPoint::getY() const {
   return m_y;
}

inline void TofPoint::setY(float y) {
   m_y = y;
}

inline float TofPoint::getZ() const {
   return m_z;
}

inline void TofPoint::setZ(float z) {
   m_z = z;
}

inline const void *TofPoint::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "Eunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_Eunit = getEunit();
      return &m_Eunit;
   }
   if (name == "dE") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dE;
   }
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "t") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_t;
   }
   if (name == "terr") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_terr;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   if (name == "x") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_x;
   }
   if (name == "y") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_y;
   }
   if (name == "z") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_z;
   }
   return m_parent->getAttribute(name, atype);
}

inline TofStatus &TofPoint::getTofStatus() {
   return m_tofStatus_link.front();
}

inline TofStatusList &TofPoint::getTofStatuses() {
   return m_tofStatus_link;
}

inline TofStatusList TofPoint::addTofStatuses(int count, int start) {
   return m_tofStatus_link.add(count,start);
}

inline void TofPoint::deleteTofStatuses(int count, int start) {
   m_tofStatus_link.del(count,start);
}

inline TofEnergyDeposition &TofPoint::getTofEnergyDeposition() {
   return m_tofEnergyDeposition_link.front();
}

inline TofEnergyDepositionList &TofPoint::getTofEnergyDepositions() {
   return m_tofEnergyDeposition_link;
}

inline TofEnergyDepositionList TofPoint::addTofEnergyDepositions(int count, int start) {
   return m_tofEnergyDeposition_link.add(count,start);
}

inline void TofPoint::deleteTofEnergyDepositions(int count, int start) {
   m_tofEnergyDeposition_link.del(count,start);
}

inline DircHit::DircHit(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_ch(0),
   m_jtag(""),
   m_t(0),
   m_tot(0)
{}

inline DircHit::~DircHit() {}

inline std::string DircHit::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string DircHit::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string DircHit::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t DircHit::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int DircHit::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline int DircHit::getCh() const {
   return m_ch;
}

inline void DircHit::setCh(int ch) {
   m_ch = ch;
}

inline std::string DircHit::getJtag() const {
   return m_jtag;
}

inline void DircHit::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline std::string DircHit::getMaxOccurs() const {
   return "unbounded";
}

inline int DircHit::getMinOccurs() const {
   return 0;
}

inline float DircHit::getT() const {
   return m_t;
}

inline void DircHit::setT(float t) {
   m_t = t;
}

inline float DircHit::getTot() const {
   return m_tot;
}

inline void DircHit::setTot(float tot) {
   m_tot = tot;
}

inline std::string DircHit::getTunit() const {
   return "ns";
}

inline const void *DircHit::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "ch") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_ch;
   }
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "t") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_t;
   }
   if (name == "tot") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tot;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   return m_parent->getAttribute(name, atype);
}

inline RFtime::RFtime(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_jtag(""),
   m_tsync(0)
{}

inline RFtime::~RFtime() {}

inline std::string RFtime::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string RFtime::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string RFtime::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t RFtime::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int RFtime::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string RFtime::getJtag() const {
   return m_jtag;
}

inline void RFtime::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline int RFtime::getMinOccurs() const {
   return 0;
}

inline float RFtime::getTsync() const {
   return m_tsync;
}

inline void RFtime::setTsync(float tsync) {
   m_tsync = tsync;
}

inline std::string RFtime::getTunit() const {
   return "ns";
}

inline const void *RFtime::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "tsync") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tsync;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   return m_parent->getAttribute(name, atype);
}

inline TriggerEnergySums::TriggerEnergySums(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_BCALEnergySum(0),
   m_FCALEnergySum(0)
{}

inline TriggerEnergySums::~TriggerEnergySums() {}

inline std::string TriggerEnergySums::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string TriggerEnergySums::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string TriggerEnergySums::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t TriggerEnergySums::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int TriggerEnergySums::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string TriggerEnergySums::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline int TriggerEnergySums::getL1_fp_trig_bits() const {
   return *(int*)m_parent->getAttribute("l1_fp_trig_bits");
}

inline int TriggerEnergySums::getL1_trig_bits() const {
   return *(int*)m_parent->getAttribute("l1_trig_bits");
}

inline int TriggerEnergySums::getMaxOccurs() const {
   return *(int*)m_parent->getAttribute("maxOccurs");
}

inline float TriggerEnergySums::getBCALEnergySum() const {
   return m_BCALEnergySum;
}

inline void TriggerEnergySums::setBCALEnergySum(float BCALEnergySum) {
   m_BCALEnergySum = BCALEnergySum;
}

inline float TriggerEnergySums::getFCALEnergySum() const {
   return m_FCALEnergySum;
}

inline void TriggerEnergySums::setFCALEnergySum(float FCALEnergySum) {
   m_FCALEnergySum = FCALEnergySum;
}

inline int TriggerEnergySums::getMinOccurs() const {
   return 0;
}

inline const void *TriggerEnergySums::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "BCALEnergySum") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_BCALEnergySum;
   }
   if (name == "FCALEnergySum") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_FCALEnergySum;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline Trigger::Trigger(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_jtag(""),
   m_l1_fp_trig_bits(0),
   m_l1_trig_bits(0),
   m_triggerEnergySums_link(&m_host->m_triggerEnergySums_plist,
               m_host->m_triggerEnergySums_plist.end(),
               m_host->m_triggerEnergySums_plist.end(),
               this)
{}

inline Trigger::~Trigger() {
   deleteTriggerEnergySumses();
}

inline std::string Trigger::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string Trigger::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string Trigger::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t Trigger::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int Trigger::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string Trigger::getJtag() const {
   return m_jtag;
}

inline void Trigger::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline int Trigger::getL1_fp_trig_bits() const {
   return m_l1_fp_trig_bits;
}

inline void Trigger::setL1_fp_trig_bits(int l1_fp_trig_bits) {
   m_l1_fp_trig_bits = l1_fp_trig_bits;
}

inline int Trigger::getL1_trig_bits() const {
   return m_l1_trig_bits;
}

inline void Trigger::setL1_trig_bits(int l1_trig_bits) {
   m_l1_trig_bits = l1_trig_bits;
}

inline int Trigger::getMaxOccurs() const {
   return 1;
}

inline int Trigger::getMinOccurs() const {
   return 0;
}

inline const void *Trigger::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "l1_fp_trig_bits") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_l1_fp_trig_bits;
   }
   if (name == "l1_trig_bits") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_l1_trig_bits;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline TriggerEnergySums &Trigger::getTriggerEnergySums() {
   return m_triggerEnergySums_link.front();
}

inline TriggerEnergySumsList &Trigger::getTriggerEnergySumses() {
   return m_triggerEnergySums_link;
}

inline TriggerEnergySumsList Trigger::addTriggerEnergySumses(int count, int start) {
   return m_triggerEnergySums_link.add(count,start);
}

inline void Trigger::deleteTriggerEnergySumses(int count, int start) {
   m_triggerEnergySums_link.del(count,start);
}

inline BcalMatchParams::BcalMatchParams(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_deltaphi(0),
   m_deltaz(0),
   m_dx(0),
   m_pathlength(0),
   m_shower(0),
   m_tflight(0),
   m_tflightvar(0),
   m_track(0)
{}

inline BcalMatchParams::~BcalMatchParams() {}

inline std::string BcalMatchParams::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string BcalMatchParams::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string BcalMatchParams::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t BcalMatchParams::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int BcalMatchParams::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string BcalMatchParams::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline float BcalMatchParams::getDeltaphi() const {
   return m_deltaphi;
}

inline void BcalMatchParams::setDeltaphi(float deltaphi) {
   m_deltaphi = deltaphi;
}

inline float BcalMatchParams::getDeltaz() const {
   return m_deltaz;
}

inline void BcalMatchParams::setDeltaz(float deltaz) {
   m_deltaz = deltaz;
}

inline float BcalMatchParams::getDx() const {
   return m_dx;
}

inline void BcalMatchParams::setDx(float dx) {
   m_dx = dx;
}

inline std::string BcalMatchParams::getLunit() const {
   return "cm";
}

inline std::string BcalMatchParams::getMaxOccurs() const {
   return "unbounded";
}

inline int BcalMatchParams::getMinOccurs() const {
   return 0;
}

inline float BcalMatchParams::getPathlength() const {
   return m_pathlength;
}

inline void BcalMatchParams::setPathlength(float pathlength) {
   m_pathlength = pathlength;
}

inline int BcalMatchParams::getShower() const {
   return m_shower;
}

inline void BcalMatchParams::setShower(int shower) {
   m_shower = shower;
}

inline float BcalMatchParams::getTflight() const {
   return m_tflight;
}

inline void BcalMatchParams::setTflight(float tflight) {
   m_tflight = tflight;
}

inline float BcalMatchParams::getTflightvar() const {
   return m_tflightvar;
}

inline void BcalMatchParams::setTflightvar(float tflightvar) {
   m_tflightvar = tflightvar;
}

inline int BcalMatchParams::getTrack() const {
   return m_track;
}

inline void BcalMatchParams::setTrack(int track) {
   m_track = track;
}

inline std::string BcalMatchParams::getTunit() const {
   return "ns";
}

inline const void *BcalMatchParams::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "deltaphi") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_deltaphi;
   }
   if (name == "deltaz") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_deltaz;
   }
   if (name == "dx") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dx;
   }
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "pathlength") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_pathlength;
   }
   if (name == "shower") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_shower;
   }
   if (name == "tflight") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tflight;
   }
   if (name == "tflightvar") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tflightvar;
   }
   if (name == "track") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_track;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   return m_parent->getAttribute(name, atype);
}

inline FcalMatchParams::FcalMatchParams(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_doca(0),
   m_dx(0),
   m_pathlength(0),
   m_shower(0),
   m_tflight(0),
   m_tflightvar(0),
   m_track(0)
{}

inline FcalMatchParams::~FcalMatchParams() {}

inline std::string FcalMatchParams::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string FcalMatchParams::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string FcalMatchParams::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t FcalMatchParams::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int FcalMatchParams::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string FcalMatchParams::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline float FcalMatchParams::getDoca() const {
   return m_doca;
}

inline void FcalMatchParams::setDoca(float doca) {
   m_doca = doca;
}

inline float FcalMatchParams::getDx() const {
   return m_dx;
}

inline void FcalMatchParams::setDx(float dx) {
   m_dx = dx;
}

inline std::string FcalMatchParams::getLunit() const {
   return "cm";
}

inline std::string FcalMatchParams::getMaxOccurs() const {
   return "unbounded";
}

inline int FcalMatchParams::getMinOccurs() const {
   return 0;
}

inline float FcalMatchParams::getPathlength() const {
   return m_pathlength;
}

inline void FcalMatchParams::setPathlength(float pathlength) {
   m_pathlength = pathlength;
}

inline int FcalMatchParams::getShower() const {
   return m_shower;
}

inline void FcalMatchParams::setShower(int shower) {
   m_shower = shower;
}

inline float FcalMatchParams::getTflight() const {
   return m_tflight;
}

inline void FcalMatchParams::setTflight(float tflight) {
   m_tflight = tflight;
}

inline float FcalMatchParams::getTflightvar() const {
   return m_tflightvar;
}

inline void FcalMatchParams::setTflightvar(float tflightvar) {
   m_tflightvar = tflightvar;
}

inline int FcalMatchParams::getTrack() const {
   return m_track;
}

inline void FcalMatchParams::setTrack(int track) {
   m_track = track;
}

inline std::string FcalMatchParams::getTunit() const {
   return "ns";
}

inline const void *FcalMatchParams::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "doca") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_doca;
   }
   if (name == "dx") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dx;
   }
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "pathlength") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_pathlength;
   }
   if (name == "shower") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_shower;
   }
   if (name == "tflight") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tflight;
   }
   if (name == "tflightvar") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tflightvar;
   }
   if (name == "track") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_track;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   return m_parent->getAttribute(name, atype);
}

inline TofDedx::TofDedx(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_dEdx1(0),
   m_dEdx2(0)
{}

inline TofDedx::~TofDedx() {}

inline std::string TofDedx::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string TofDedx::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string TofDedx::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t TofDedx::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int TofDedx::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string TofDedx::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline float TofDedx::getDEdx() const {
   return *(float*)m_parent->getAttribute("dEdx");
}

inline std::string TofDedx::getDEdx_unit() const {
   return *(std::string*)m_parent->getAttribute("dEdx_unit");
}

inline float TofDedx::getDeltax() const {
   return *(float*)m_parent->getAttribute("deltax");
}

inline float TofDedx::getDeltay() const {
   return *(float*)m_parent->getAttribute("deltay");
}

inline float TofDedx::getEhit() const {
   return *(float*)m_parent->getAttribute("ehit");
}

inline int TofDedx::getHit() const {
   return *(int*)m_parent->getAttribute("hit");
}

inline std::string TofDedx::getLunit() const {
   return *(std::string*)m_parent->getAttribute("lunit");
}

inline float TofDedx::getPathlength() const {
   return *(float*)m_parent->getAttribute("pathlength");
}

inline float TofDedx::getTflight() const {
   return *(float*)m_parent->getAttribute("tflight");
}

inline float TofDedx::getTflightvar() const {
   return *(float*)m_parent->getAttribute("tflightvar");
}

inline float TofDedx::getThit() const {
   return *(float*)m_parent->getAttribute("thit");
}

inline float TofDedx::getThitvar() const {
   return *(float*)m_parent->getAttribute("thitvar");
}

inline int TofDedx::getTrack() const {
   return *(int*)m_parent->getAttribute("track");
}

inline std::string TofDedx::getTunit() const {
   return *(std::string*)m_parent->getAttribute("tunit");
}

inline float TofDedx::getDEdx1() const {
   return m_dEdx1;
}

inline void TofDedx::setDEdx1(float dEdx1) {
   m_dEdx1 = dEdx1;
}

inline float TofDedx::getDEdx2() const {
   return m_dEdx2;
}

inline void TofDedx::setDEdx2(float dEdx2) {
   m_dEdx2 = dEdx2;
}

inline int TofDedx::getMaxOccurs() const {
   return 1;
}

inline int TofDedx::getMinOccurs() const {
   return 0;
}

inline const void *TofDedx::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "dEdx1") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dEdx1;
   }
   if (name == "dEdx2") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dEdx2;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline TofMatchParams::TofMatchParams(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_dEdx(0),
   m_deltax(0),
   m_deltay(0),
   m_ehit(0),
   m_hit(0),
   m_pathlength(0),
   m_tflight(0),
   m_tflightvar(0),
   m_thit(0),
   m_thitvar(0),
   m_track(0),
   m_tofDedx_link(&m_host->m_tofDedx_plist,
               m_host->m_tofDedx_plist.end(),
               m_host->m_tofDedx_plist.end(),
               this)
{}

inline TofMatchParams::~TofMatchParams() {
   deleteTofDedxs();
}

inline std::string TofMatchParams::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string TofMatchParams::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string TofMatchParams::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t TofMatchParams::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int TofMatchParams::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string TofMatchParams::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline float TofMatchParams::getDEdx() const {
   return m_dEdx;
}

inline void TofMatchParams::setDEdx(float dEdx) {
   m_dEdx = dEdx;
}

inline std::string TofMatchParams::getDEdx_unit() const {
   return "GeV/cm";
}

inline float TofMatchParams::getDeltax() const {
   return m_deltax;
}

inline void TofMatchParams::setDeltax(float deltax) {
   m_deltax = deltax;
}

inline float TofMatchParams::getDeltay() const {
   return m_deltay;
}

inline void TofMatchParams::setDeltay(float deltay) {
   m_deltay = deltay;
}

inline float TofMatchParams::getEhit() const {
   return m_ehit;
}

inline void TofMatchParams::setEhit(float ehit) {
   m_ehit = ehit;
}

inline int TofMatchParams::getHit() const {
   return m_hit;
}

inline void TofMatchParams::setHit(int hit) {
   m_hit = hit;
}

inline std::string TofMatchParams::getLunit() const {
   return "cm";
}

inline std::string TofMatchParams::getMaxOccurs() const {
   return "unbounded";
}

inline int TofMatchParams::getMinOccurs() const {
   return 0;
}

inline float TofMatchParams::getPathlength() const {
   return m_pathlength;
}

inline void TofMatchParams::setPathlength(float pathlength) {
   m_pathlength = pathlength;
}

inline float TofMatchParams::getTflight() const {
   return m_tflight;
}

inline void TofMatchParams::setTflight(float tflight) {
   m_tflight = tflight;
}

inline float TofMatchParams::getTflightvar() const {
   return m_tflightvar;
}

inline void TofMatchParams::setTflightvar(float tflightvar) {
   m_tflightvar = tflightvar;
}

inline float TofMatchParams::getThit() const {
   return m_thit;
}

inline void TofMatchParams::setThit(float thit) {
   m_thit = thit;
}

inline float TofMatchParams::getThitvar() const {
   return m_thitvar;
}

inline void TofMatchParams::setThitvar(float thitvar) {
   m_thitvar = thitvar;
}

inline int TofMatchParams::getTrack() const {
   return m_track;
}

inline void TofMatchParams::setTrack(int track) {
   m_track = track;
}

inline std::string TofMatchParams::getTunit() const {
   return "ns";
}

inline const void *TofMatchParams::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "dEdx") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dEdx;
   }
   if (name == "dEdx_unit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_dEdx_unit = getDEdx_unit();
      return &m_dEdx_unit;
   }
   if (name == "deltax") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_deltax;
   }
   if (name == "deltay") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_deltay;
   }
   if (name == "ehit") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_ehit;
   }
   if (name == "hit") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_hit;
   }
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "pathlength") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_pathlength;
   }
   if (name == "tflight") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tflight;
   }
   if (name == "tflightvar") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tflightvar;
   }
   if (name == "thit") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_thit;
   }
   if (name == "thitvar") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_thitvar;
   }
   if (name == "track") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_track;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   return m_parent->getAttribute(name, atype);
}

inline TofDedx &TofMatchParams::getTofDedx() {
   return m_tofDedx_link.front();
}

inline TofDedxList &TofMatchParams::getTofDedxs() {
   return m_tofDedx_link;
}

inline TofDedxList TofMatchParams::addTofDedxs(int count, int start) {
   return m_tofDedx_link.add(count,start);
}

inline void TofMatchParams::deleteTofDedxs(int count, int start) {
   m_tofDedx_link.del(count,start);
}

inline ScMatchParams::ScMatchParams(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_dEdx(0),
   m_deltaphi(0),
   m_ehit(0),
   m_hit(0),
   m_pathlength(0),
   m_tflight(0),
   m_tflightvar(0),
   m_thit(0),
   m_thitvar(0),
   m_track(0)
{}

inline ScMatchParams::~ScMatchParams() {}

inline std::string ScMatchParams::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string ScMatchParams::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string ScMatchParams::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t ScMatchParams::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int ScMatchParams::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string ScMatchParams::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline std::string ScMatchParams::getEunit() const {
   return "GeV";
}

inline std::string ScMatchParams::getAunit() const {
   return "rad";
}

inline float ScMatchParams::getDEdx() const {
   return m_dEdx;
}

inline void ScMatchParams::setDEdx(float dEdx) {
   m_dEdx = dEdx;
}

inline std::string ScMatchParams::getDEdx_unit() const {
   return "GeV/cm";
}

inline float ScMatchParams::getDeltaphi() const {
   return m_deltaphi;
}

inline void ScMatchParams::setDeltaphi(float deltaphi) {
   m_deltaphi = deltaphi;
}

inline float ScMatchParams::getEhit() const {
   return m_ehit;
}

inline void ScMatchParams::setEhit(float ehit) {
   m_ehit = ehit;
}

inline int ScMatchParams::getHit() const {
   return m_hit;
}

inline void ScMatchParams::setHit(int hit) {
   m_hit = hit;
}

inline std::string ScMatchParams::getLunit() const {
   return "cm";
}

inline std::string ScMatchParams::getMaxOccurs() const {
   return "unbounded";
}

inline int ScMatchParams::getMinOccurs() const {
   return 0;
}

inline float ScMatchParams::getPathlength() const {
   return m_pathlength;
}

inline void ScMatchParams::setPathlength(float pathlength) {
   m_pathlength = pathlength;
}

inline float ScMatchParams::getTflight() const {
   return m_tflight;
}

inline void ScMatchParams::setTflight(float tflight) {
   m_tflight = tflight;
}

inline float ScMatchParams::getTflightvar() const {
   return m_tflightvar;
}

inline void ScMatchParams::setTflightvar(float tflightvar) {
   m_tflightvar = tflightvar;
}

inline float ScMatchParams::getThit() const {
   return m_thit;
}

inline void ScMatchParams::setThit(float thit) {
   m_thit = thit;
}

inline float ScMatchParams::getThitvar() const {
   return m_thitvar;
}

inline void ScMatchParams::setThitvar(float thitvar) {
   m_thitvar = thitvar;
}

inline int ScMatchParams::getTrack() const {
   return m_track;
}

inline void ScMatchParams::setTrack(int track) {
   m_track = track;
}

inline std::string ScMatchParams::getTunit() const {
   return "ns";
}

inline const void *ScMatchParams::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "Eunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_Eunit = getEunit();
      return &m_Eunit;
   }
   if (name == "aunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_aunit = getAunit();
      return &m_aunit;
   }
   if (name == "dEdx") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_dEdx;
   }
   if (name == "dEdx_unit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_dEdx_unit = getDEdx_unit();
      return &m_dEdx_unit;
   }
   if (name == "deltaphi") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_deltaphi;
   }
   if (name == "ehit") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_ehit;
   }
   if (name == "hit") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_hit;
   }
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "pathlength") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_pathlength;
   }
   if (name == "tflight") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tflight;
   }
   if (name == "tflightvar") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_tflightvar;
   }
   if (name == "thit") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_thit;
   }
   if (name == "thitvar") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_thitvar;
   }
   if (name == "track") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_track;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   return m_parent->getAttribute(name, atype);
}

inline DircMatchParams::DircMatchParams(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_deltat(0),
   m_expectthetac(0),
   m_lele(0),
   m_lk(0),
   m_lp(0),
   m_lpi(0),
   m_nphotons(0),
   m_px(0),
   m_py(0),
   m_pz(0),
   m_t(0),
   m_thetac(0),
   m_track(0),
   m_x(0),
   m_y(0),
   m_z(0)
{}

inline DircMatchParams::~DircMatchParams() {}

inline std::string DircMatchParams::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string DircMatchParams::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string DircMatchParams::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t DircMatchParams::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int DircMatchParams::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string DircMatchParams::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline float DircMatchParams::getDeltat() const {
   return m_deltat;
}

inline void DircMatchParams::setDeltat(float deltat) {
   m_deltat = deltat;
}

inline float DircMatchParams::getExpectthetac() const {
   return m_expectthetac;
}

inline void DircMatchParams::setExpectthetac(float expectthetac) {
   m_expectthetac = expectthetac;
}

inline float DircMatchParams::getLele() const {
   return m_lele;
}

inline void DircMatchParams::setLele(float lele) {
   m_lele = lele;
}

inline float DircMatchParams::getLk() const {
   return m_lk;
}

inline void DircMatchParams::setLk(float lk) {
   m_lk = lk;
}

inline float DircMatchParams::getLp() const {
   return m_lp;
}

inline void DircMatchParams::setLp(float lp) {
   m_lp = lp;
}

inline float DircMatchParams::getLpi() const {
   return m_lpi;
}

inline void DircMatchParams::setLpi(float lpi) {
   m_lpi = lpi;
}

inline std::string DircMatchParams::getMaxOccurs() const {
   return "unbounded";
}

inline int DircMatchParams::getMinOccurs() const {
   return 0;
}

inline int DircMatchParams::getNphotons() const {
   return m_nphotons;
}

inline void DircMatchParams::setNphotons(int nphotons) {
   m_nphotons = nphotons;
}

inline float DircMatchParams::getPx() const {
   return m_px;
}

inline void DircMatchParams::setPx(float px) {
   m_px = px;
}

inline float DircMatchParams::getPy() const {
   return m_py;
}

inline void DircMatchParams::setPy(float py) {
   m_py = py;
}

inline float DircMatchParams::getPz() const {
   return m_pz;
}

inline void DircMatchParams::setPz(float pz) {
   m_pz = pz;
}

inline float DircMatchParams::getT() const {
   return m_t;
}

inline void DircMatchParams::setT(float t) {
   m_t = t;
}

inline float DircMatchParams::getThetac() const {
   return m_thetac;
}

inline void DircMatchParams::setThetac(float thetac) {
   m_thetac = thetac;
}

inline int DircMatchParams::getTrack() const {
   return m_track;
}

inline void DircMatchParams::setTrack(int track) {
   m_track = track;
}

inline float DircMatchParams::getX() const {
   return m_x;
}

inline void DircMatchParams::setX(float x) {
   m_x = x;
}

inline float DircMatchParams::getY() const {
   return m_y;
}

inline void DircMatchParams::setY(float y) {
   m_y = y;
}

inline float DircMatchParams::getZ() const {
   return m_z;
}

inline void DircMatchParams::setZ(float z) {
   m_z = z;
}

inline const void *DircMatchParams::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "deltat") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_deltat;
   }
   if (name == "expectthetac") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_expectthetac;
   }
   if (name == "lele") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_lele;
   }
   if (name == "lk") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_lk;
   }
   if (name == "lp") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_lp;
   }
   if (name == "lpi") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_lpi;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "nphotons") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_nphotons;
   }
   if (name == "px") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_px;
   }
   if (name == "py") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_py;
   }
   if (name == "pz") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_pz;
   }
   if (name == "t") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_t;
   }
   if (name == "thetac") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_thetac;
   }
   if (name == "track") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_track;
   }
   if (name == "x") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_x;
   }
   if (name == "y") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_y;
   }
   if (name == "z") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_z;
   }
   return m_parent->getAttribute(name, atype);
}

inline DircMatchHit::DircMatchHit(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_hit(0),
   m_track(0)
{}

inline DircMatchHit::~DircMatchHit() {}

inline std::string DircMatchHit::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string DircMatchHit::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string DircMatchHit::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t DircMatchHit::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int DircMatchHit::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string DircMatchHit::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline int DircMatchHit::getHit() const {
   return m_hit;
}

inline void DircMatchHit::setHit(int hit) {
   m_hit = hit;
}

inline std::string DircMatchHit::getMaxOccurs() const {
   return "unbounded";
}

inline int DircMatchHit::getMinOccurs() const {
   return 0;
}

inline int DircMatchHit::getTrack() const {
   return m_track;
}

inline void DircMatchHit::setTrack(int track) {
   m_track = track;
}

inline const void *DircMatchHit::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "hit") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_hit;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "track") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_track;
   }
   return m_parent->getAttribute(name, atype);
}

inline BcalDOCAtoTrack::BcalDOCAtoTrack(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_deltaphi(0),
   m_deltaz(0),
   m_shower(0)
{}

inline BcalDOCAtoTrack::~BcalDOCAtoTrack() {}

inline std::string BcalDOCAtoTrack::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string BcalDOCAtoTrack::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string BcalDOCAtoTrack::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t BcalDOCAtoTrack::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int BcalDOCAtoTrack::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string BcalDOCAtoTrack::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline float BcalDOCAtoTrack::getDeltaphi() const {
   return m_deltaphi;
}

inline void BcalDOCAtoTrack::setDeltaphi(float deltaphi) {
   m_deltaphi = deltaphi;
}

inline float BcalDOCAtoTrack::getDeltaz() const {
   return m_deltaz;
}

inline void BcalDOCAtoTrack::setDeltaz(float deltaz) {
   m_deltaz = deltaz;
}

inline std::string BcalDOCAtoTrack::getLunit() const {
   return "cm";
}

inline std::string BcalDOCAtoTrack::getMaxOccurs() const {
   return "unbounded";
}

inline int BcalDOCAtoTrack::getMinOccurs() const {
   return 0;
}

inline int BcalDOCAtoTrack::getShower() const {
   return m_shower;
}

inline void BcalDOCAtoTrack::setShower(int shower) {
   m_shower = shower;
}

inline const void *BcalDOCAtoTrack::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "deltaphi") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_deltaphi;
   }
   if (name == "deltaz") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_deltaz;
   }
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "shower") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_shower;
   }
   return m_parent->getAttribute(name, atype);
}

inline FcalDOCAtoTrack::FcalDOCAtoTrack(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_doca(0),
   m_shower(0)
{}

inline FcalDOCAtoTrack::~FcalDOCAtoTrack() {}

inline std::string FcalDOCAtoTrack::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string FcalDOCAtoTrack::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string FcalDOCAtoTrack::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t FcalDOCAtoTrack::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int FcalDOCAtoTrack::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string FcalDOCAtoTrack::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline float FcalDOCAtoTrack::getDoca() const {
   return m_doca;
}

inline void FcalDOCAtoTrack::setDoca(float doca) {
   m_doca = doca;
}

inline std::string FcalDOCAtoTrack::getLunit() const {
   return "cm";
}

inline std::string FcalDOCAtoTrack::getMaxOccurs() const {
   return "unbounded";
}

inline int FcalDOCAtoTrack::getMinOccurs() const {
   return 0;
}

inline int FcalDOCAtoTrack::getShower() const {
   return m_shower;
}

inline void FcalDOCAtoTrack::setShower(int shower) {
   m_shower = shower;
}

inline const void *FcalDOCAtoTrack::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "doca") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_doca;
   }
   if (name == "lunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_lunit = getLunit();
      return &m_lunit;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "shower") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_shower;
   }
   return m_parent->getAttribute(name, atype);
}

inline TflightPCorrelation::TflightPCorrelation(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_correlation(0),
   m_system(0),
   m_track(0)
{}

inline TflightPCorrelation::~TflightPCorrelation() {}

inline std::string TflightPCorrelation::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string TflightPCorrelation::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string TflightPCorrelation::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t TflightPCorrelation::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int TflightPCorrelation::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string TflightPCorrelation::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline float TflightPCorrelation::getCorrelation() const {
   return m_correlation;
}

inline void TflightPCorrelation::setCorrelation(float correlation) {
   m_correlation = correlation;
}

inline std::string TflightPCorrelation::getMaxOccurs() const {
   return "unbounded";
}

inline int TflightPCorrelation::getMinOccurs() const {
   return 0;
}

inline std::string TflightPCorrelation::getPunit() const {
   return "GeV/c";
}

inline int TflightPCorrelation::getSystem() const {
   return m_system;
}

inline void TflightPCorrelation::setSystem(int system) {
   m_system = system;
}

inline int TflightPCorrelation::getTrack() const {
   return m_track;
}

inline void TflightPCorrelation::setTrack(int track) {
   m_track = track;
}

inline std::string TflightPCorrelation::getTunit() const {
   return "ns";
}

inline const void *TflightPCorrelation::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "correlation") {
      if (atype != 0)
         *atype = k_hddm_float;
      return &m_correlation;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   if (name == "punit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_punit = getPunit();
      return &m_punit;
   }
   if (name == "system") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_system;
   }
   if (name == "track") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_track;
   }
   if (name == "tunit") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_tunit = getTunit();
      return &m_tunit;
   }
   return m_parent->getAttribute(name, atype);
}

inline DetectorMatches::DetectorMatches(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_jtag(""),
   m_bcalMatchParams_list(&m_host->m_bcalMatchParams_plist,
               m_host->m_bcalMatchParams_plist.end(),
               m_host->m_bcalMatchParams_plist.end(),
               this),
   m_fcalMatchParams_list(&m_host->m_fcalMatchParams_plist,
               m_host->m_fcalMatchParams_plist.end(),
               m_host->m_fcalMatchParams_plist.end(),
               this),
   m_tofMatchParams_list(&m_host->m_tofMatchParams_plist,
               m_host->m_tofMatchParams_plist.end(),
               m_host->m_tofMatchParams_plist.end(),
               this),
   m_scMatchParams_list(&m_host->m_scMatchParams_plist,
               m_host->m_scMatchParams_plist.end(),
               m_host->m_scMatchParams_plist.end(),
               this),
   m_dircMatchParams_list(&m_host->m_dircMatchParams_plist,
               m_host->m_dircMatchParams_plist.end(),
               m_host->m_dircMatchParams_plist.end(),
               this),
   m_dircMatchHit_list(&m_host->m_dircMatchHit_plist,
               m_host->m_dircMatchHit_plist.end(),
               m_host->m_dircMatchHit_plist.end(),
               this),
   m_bcalDOCAtoTrack_list(&m_host->m_bcalDOCAtoTrack_plist,
               m_host->m_bcalDOCAtoTrack_plist.end(),
               m_host->m_bcalDOCAtoTrack_plist.end(),
               this),
   m_fcalDOCAtoTrack_list(&m_host->m_fcalDOCAtoTrack_plist,
               m_host->m_fcalDOCAtoTrack_plist.end(),
               m_host->m_fcalDOCAtoTrack_plist.end(),
               this),
   m_tflightPCorrelation_list(&m_host->m_tflightPCorrelation_plist,
               m_host->m_tflightPCorrelation_plist.end(),
               m_host->m_tflightPCorrelation_plist.end(),
               this)
{}

inline DetectorMatches::~DetectorMatches() {
   deleteBcalMatchParamses();
   deleteFcalMatchParamses();
   deleteTofMatchParamses();
   deleteScMatchParamses();
   deleteDircMatchParamses();
   deleteDircMatchHits();
   deleteBcalDOCAtoTracks();
   deleteFcalDOCAtoTracks();
   deleteTflightPCorrelations();
}

inline std::string DetectorMatches::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string DetectorMatches::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string DetectorMatches::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t DetectorMatches::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int DetectorMatches::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string DetectorMatches::getJtag() const {
   return m_jtag;
}

inline void DetectorMatches::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline int DetectorMatches::getMaxOccurs() const {
   return 1;
}

inline int DetectorMatches::getMinOccurs() const {
   return 1;
}

inline const void *DetectorMatches::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "maxOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_maxOccurs = getMaxOccurs();
      return &m_maxOccurs;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline BcalMatchParams &DetectorMatches::getBcalMatchParams(int index) {
   return m_bcalMatchParams_list(index);
}

inline BcalMatchParamsList &DetectorMatches::getBcalMatchParamses() {
   return m_bcalMatchParams_list;
}

inline BcalMatchParamsList DetectorMatches::addBcalMatchParamses(int count, int start) {
   return m_bcalMatchParams_list.add(count,start);
}

inline void DetectorMatches::deleteBcalMatchParamses(int count, int start) {
   m_bcalMatchParams_list.del(count,start);
}

inline FcalMatchParams &DetectorMatches::getFcalMatchParams(int index) {
   return m_fcalMatchParams_list(index);
}

inline FcalMatchParamsList &DetectorMatches::getFcalMatchParamses() {
   return m_fcalMatchParams_list;
}

inline FcalMatchParamsList DetectorMatches::addFcalMatchParamses(int count, int start) {
   return m_fcalMatchParams_list.add(count,start);
}

inline void DetectorMatches::deleteFcalMatchParamses(int count, int start) {
   m_fcalMatchParams_list.del(count,start);
}

inline TofMatchParams &DetectorMatches::getTofMatchParams(int index) {
   return m_tofMatchParams_list(index);
}

inline TofMatchParamsList &DetectorMatches::getTofMatchParamses() {
   return m_tofMatchParams_list;
}

inline TofMatchParamsList DetectorMatches::addTofMatchParamses(int count, int start) {
   return m_tofMatchParams_list.add(count,start);
}

inline void DetectorMatches::deleteTofMatchParamses(int count, int start) {
   m_tofMatchParams_list.del(count,start);
}

inline ScMatchParams &DetectorMatches::getScMatchParams(int index) {
   return m_scMatchParams_list(index);
}

inline ScMatchParamsList &DetectorMatches::getScMatchParamses() {
   return m_scMatchParams_list;
}

inline ScMatchParamsList DetectorMatches::addScMatchParamses(int count, int start) {
   return m_scMatchParams_list.add(count,start);
}

inline void DetectorMatches::deleteScMatchParamses(int count, int start) {
   m_scMatchParams_list.del(count,start);
}

inline DircMatchParams &DetectorMatches::getDircMatchParams(int index) {
   return m_dircMatchParams_list(index);
}

inline DircMatchParamsList &DetectorMatches::getDircMatchParamses() {
   return m_dircMatchParams_list;
}

inline DircMatchParamsList DetectorMatches::addDircMatchParamses(int count, int start) {
   return m_dircMatchParams_list.add(count,start);
}

inline void DetectorMatches::deleteDircMatchParamses(int count, int start) {
   m_dircMatchParams_list.del(count,start);
}

inline DircMatchHit &DetectorMatches::getDircMatchHit(int index) {
   return m_dircMatchHit_list(index);
}

inline DircMatchHitList &DetectorMatches::getDircMatchHits() {
   return m_dircMatchHit_list;
}

inline DircMatchHitList DetectorMatches::addDircMatchHits(int count, int start) {
   return m_dircMatchHit_list.add(count,start);
}

inline void DetectorMatches::deleteDircMatchHits(int count, int start) {
   m_dircMatchHit_list.del(count,start);
}

inline BcalDOCAtoTrack &DetectorMatches::getBcalDOCAtoTrack(int index) {
   return m_bcalDOCAtoTrack_list(index);
}

inline BcalDOCAtoTrackList &DetectorMatches::getBcalDOCAtoTracks() {
   return m_bcalDOCAtoTrack_list;
}

inline BcalDOCAtoTrackList DetectorMatches::addBcalDOCAtoTracks(int count, int start) {
   return m_bcalDOCAtoTrack_list.add(count,start);
}

inline void DetectorMatches::deleteBcalDOCAtoTracks(int count, int start) {
   m_bcalDOCAtoTrack_list.del(count,start);
}

inline FcalDOCAtoTrack &DetectorMatches::getFcalDOCAtoTrack(int index) {
   return m_fcalDOCAtoTrack_list(index);
}

inline FcalDOCAtoTrackList &DetectorMatches::getFcalDOCAtoTracks() {
   return m_fcalDOCAtoTrack_list;
}

inline FcalDOCAtoTrackList DetectorMatches::addFcalDOCAtoTracks(int count, int start) {
   return m_fcalDOCAtoTrack_list.add(count,start);
}

inline void DetectorMatches::deleteFcalDOCAtoTracks(int count, int start) {
   m_fcalDOCAtoTrack_list.del(count,start);
}

inline TflightPCorrelation &DetectorMatches::getTflightPCorrelation(int index) {
   return m_tflightPCorrelation_list(index);
}

inline TflightPCorrelationList &DetectorMatches::getTflightPCorrelations() {
   return m_tflightPCorrelation_list;
}

inline TflightPCorrelationList DetectorMatches::addTflightPCorrelations(int count, int start) {
   return m_tflightPCorrelation_list.add(count,start);
}

inline void DetectorMatches::deleteTflightPCorrelations(int count, int start) {
   m_tflightPCorrelation_list.del(count,start);
}

inline StartCounters::StartCounters(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_count(0)
{}

inline StartCounters::~StartCounters() {}

inline std::string StartCounters::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string StartCounters::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string StartCounters::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t StartCounters::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int StartCounters::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string StartCounters::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline int StartCounters::getCount() const {
   return m_count;
}

inline void StartCounters::setCount(int count) {
   m_count = count;
}

inline int StartCounters::getMinOccurs() const {
   return 0;
}

inline const void *StartCounters::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "count") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_count;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline CdcStraws::CdcStraws(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_count(0)
{}

inline CdcStraws::~CdcStraws() {}

inline std::string CdcStraws::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string CdcStraws::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string CdcStraws::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t CdcStraws::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int CdcStraws::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string CdcStraws::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline int CdcStraws::getCount() const {
   return m_count;
}

inline void CdcStraws::setCount(int count) {
   m_count = count;
}

inline int CdcStraws::getMinOccurs() const {
   return 0;
}

inline const void *CdcStraws::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "count") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_count;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline FdcPseudos::FdcPseudos(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_count(0)
{}

inline FdcPseudos::~FdcPseudos() {}

inline std::string FdcPseudos::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string FdcPseudos::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string FdcPseudos::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t FdcPseudos::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int FdcPseudos::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string FdcPseudos::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline int FdcPseudos::getCount() const {
   return m_count;
}

inline void FdcPseudos::setCount(int count) {
   m_count = count;
}

inline int FdcPseudos::getMinOccurs() const {
   return 0;
}

inline const void *FdcPseudos::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "count") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_count;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline BcalCells::BcalCells(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_count(0)
{}

inline BcalCells::~BcalCells() {}

inline std::string BcalCells::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string BcalCells::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string BcalCells::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t BcalCells::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int BcalCells::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string BcalCells::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline int BcalCells::getCount() const {
   return m_count;
}

inline void BcalCells::setCount(int count) {
   m_count = count;
}

inline int BcalCells::getMinOccurs() const {
   return 0;
}

inline const void *BcalCells::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "count") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_count;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline FcalBlocks::FcalBlocks(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_count(0)
{}

inline FcalBlocks::~FcalBlocks() {}

inline std::string FcalBlocks::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string FcalBlocks::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string FcalBlocks::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t FcalBlocks::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int FcalBlocks::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string FcalBlocks::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline int FcalBlocks::getCount() const {
   return m_count;
}

inline void FcalBlocks::setCount(int count) {
   m_count = count;
}

inline int FcalBlocks::getMinOccurs() const {
   return 0;
}

inline const void *FcalBlocks::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "count") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_count;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline TofPaddles::TofPaddles(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_count(0)
{}

inline TofPaddles::~TofPaddles() {}

inline std::string TofPaddles::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string TofPaddles::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string TofPaddles::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t TofPaddles::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int TofPaddles::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string TofPaddles::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline int TofPaddles::getCount() const {
   return m_count;
}

inline void TofPaddles::setCount(int count) {
   m_count = count;
}

inline int TofPaddles::getMinOccurs() const {
   return 0;
}

inline const void *TofPaddles::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "count") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_count;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline CcalBlocks::CcalBlocks(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_count(0)
{}

inline CcalBlocks::~CcalBlocks() {}

inline std::string CcalBlocks::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string CcalBlocks::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string CcalBlocks::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t CcalBlocks::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int CcalBlocks::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string CcalBlocks::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline int CcalBlocks::getCount() const {
   return m_count;
}

inline void CcalBlocks::setCount(int count) {
   m_count = count;
}

inline int CcalBlocks::getMinOccurs() const {
   return 0;
}

inline const void *CcalBlocks::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "count") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_count;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline DircPMTs::DircPMTs(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_count(0)
{}

inline DircPMTs::~DircPMTs() {}

inline std::string DircPMTs::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string DircPMTs::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string DircPMTs::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t DircPMTs::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int DircPMTs::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string DircPMTs::getJtag() const {
   return *(const std::string*)m_parent->getAttribute("jtag");
}

inline int DircPMTs::getCount() const {
   return m_count;
}

inline void DircPMTs::setCount(int count) {
   m_count = count;
}

inline int DircPMTs::getMinOccurs() const {
   return 0;
}

inline const void *DircPMTs::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "count") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_count;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline HitStatistics::HitStatistics(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_jtag(""),
   m_startCounters_link(&m_host->m_startCounters_plist,
               m_host->m_startCounters_plist.end(),
               m_host->m_startCounters_plist.end(),
               this),
   m_cdcStraws_link(&m_host->m_cdcStraws_plist,
               m_host->m_cdcStraws_plist.end(),
               m_host->m_cdcStraws_plist.end(),
               this),
   m_fdcPseudos_link(&m_host->m_fdcPseudos_plist,
               m_host->m_fdcPseudos_plist.end(),
               m_host->m_fdcPseudos_plist.end(),
               this),
   m_bcalCells_link(&m_host->m_bcalCells_plist,
               m_host->m_bcalCells_plist.end(),
               m_host->m_bcalCells_plist.end(),
               this),
   m_fcalBlocks_link(&m_host->m_fcalBlocks_plist,
               m_host->m_fcalBlocks_plist.end(),
               m_host->m_fcalBlocks_plist.end(),
               this),
   m_tofPaddles_link(&m_host->m_tofPaddles_plist,
               m_host->m_tofPaddles_plist.end(),
               m_host->m_tofPaddles_plist.end(),
               this),
   m_ccalBlocks_link(&m_host->m_ccalBlocks_plist,
               m_host->m_ccalBlocks_plist.end(),
               m_host->m_ccalBlocks_plist.end(),
               this),
   m_dircPMTs_link(&m_host->m_dircPMTs_plist,
               m_host->m_dircPMTs_plist.end(),
               m_host->m_dircPMTs_plist.end(),
               this)
{}

inline HitStatistics::~HitStatistics() {
   deleteStartCounterses();
   deleteCdcStrawses();
   deleteFdcPseudoses();
   deleteBcalCellses();
   deleteFcalBlockses();
   deleteTofPaddleses();
   deleteCcalBlockses();
   deleteDircPMTses();
}

inline std::string HitStatistics::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string HitStatistics::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string HitStatistics::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t HitStatistics::getEventNo() const {
   return *(int64_t*)m_parent->getAttribute("eventNo");
}

inline int HitStatistics::getRunNo() const {
   return *(int*)m_parent->getAttribute("runNo");
}

inline std::string HitStatistics::getJtag() const {
   return m_jtag;
}

inline void HitStatistics::setJtag(const std::string &jtag) {
   m_jtag = jtag;
}

inline int HitStatistics::getMinOccurs() const {
   return 0;
}

inline const void *HitStatistics::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "jtag") {
      if (atype != 0)
         *atype = k_hddm_string;
      return &m_jtag;
   }
   if (name == "minOccurs") {
      if (atype != 0)
         *atype = k_hddm_int;
      static int m_minOccurs = getMinOccurs();
      return &m_minOccurs;
   }
   return m_parent->getAttribute(name, atype);
}

inline StartCounters &HitStatistics::getStartCounters() {
   return m_startCounters_link.front();
}

inline StartCountersList &HitStatistics::getStartCounterses() {
   return m_startCounters_link;
}

inline StartCountersList HitStatistics::addStartCounterses(int count, int start) {
   return m_startCounters_link.add(count,start);
}

inline void HitStatistics::deleteStartCounterses(int count, int start) {
   m_startCounters_link.del(count,start);
}

inline CdcStraws &HitStatistics::getCdcStraws() {
   return m_cdcStraws_link.front();
}

inline CdcStrawsList &HitStatistics::getCdcStrawses() {
   return m_cdcStraws_link;
}

inline CdcStrawsList HitStatistics::addCdcStrawses(int count, int start) {
   return m_cdcStraws_link.add(count,start);
}

inline void HitStatistics::deleteCdcStrawses(int count, int start) {
   m_cdcStraws_link.del(count,start);
}

inline FdcPseudos &HitStatistics::getFdcPseudos() {
   return m_fdcPseudos_link.front();
}

inline FdcPseudosList &HitStatistics::getFdcPseudoses() {
   return m_fdcPseudos_link;
}

inline FdcPseudosList HitStatistics::addFdcPseudoses(int count, int start) {
   return m_fdcPseudos_link.add(count,start);
}

inline void HitStatistics::deleteFdcPseudoses(int count, int start) {
   m_fdcPseudos_link.del(count,start);
}

inline BcalCells &HitStatistics::getBcalCells() {
   return m_bcalCells_link.front();
}

inline BcalCellsList &HitStatistics::getBcalCellses() {
   return m_bcalCells_link;
}

inline BcalCellsList HitStatistics::addBcalCellses(int count, int start) {
   return m_bcalCells_link.add(count,start);
}

inline void HitStatistics::deleteBcalCellses(int count, int start) {
   m_bcalCells_link.del(count,start);
}

inline FcalBlocks &HitStatistics::getFcalBlocks() {
   return m_fcalBlocks_link.front();
}

inline FcalBlocksList &HitStatistics::getFcalBlockses() {
   return m_fcalBlocks_link;
}

inline FcalBlocksList HitStatistics::addFcalBlockses(int count, int start) {
   return m_fcalBlocks_link.add(count,start);
}

inline void HitStatistics::deleteFcalBlockses(int count, int start) {
   m_fcalBlocks_link.del(count,start);
}

inline TofPaddles &HitStatistics::getTofPaddles() {
   return m_tofPaddles_link.front();
}

inline TofPaddlesList &HitStatistics::getTofPaddleses() {
   return m_tofPaddles_link;
}

inline TofPaddlesList HitStatistics::addTofPaddleses(int count, int start) {
   return m_tofPaddles_link.add(count,start);
}

inline void HitStatistics::deleteTofPaddleses(int count, int start) {
   m_tofPaddles_link.del(count,start);
}

inline CcalBlocks &HitStatistics::getCcalBlocks() {
   return m_ccalBlocks_link.front();
}

inline CcalBlocksList &HitStatistics::getCcalBlockses() {
   return m_ccalBlocks_link;
}

inline CcalBlocksList HitStatistics::addCcalBlockses(int count, int start) {
   return m_ccalBlocks_link.add(count,start);
}

inline void HitStatistics::deleteCcalBlockses(int count, int start) {
   m_ccalBlocks_link.del(count,start);
}

inline DircPMTs &HitStatistics::getDircPMTs() {
   return m_dircPMTs_link.front();
}

inline DircPMTsList &HitStatistics::getDircPMTses() {
   return m_dircPMTs_link;
}

inline DircPMTsList HitStatistics::addDircPMTses(int count, int start) {
   return m_dircPMTs_link.add(count,start);
}

inline void HitStatistics::deleteDircPMTses(int count, int start) {
   m_dircPMTs_link.del(count,start);
}

inline ReconstructedPhysicsEvent::ReconstructedPhysicsEvent(HDDM_Element *parent)
 : HDDM_Element(parent),
   m_eventNo(0),
   m_runNo(0),
   m_comment_list(&m_host->m_comment_plist,
               m_host->m_comment_plist.end(),
               m_host->m_comment_plist.end(),
               this),
   m_dataVersionString_list(&m_host->m_dataVersionString_plist,
               m_host->m_dataVersionString_plist.end(),
               m_host->m_dataVersionString_plist.end(),
               this),
   m_ccdbContext_list(&m_host->m_ccdbContext_plist,
               m_host->m_ccdbContext_plist.end(),
               m_host->m_ccdbContext_plist.end(),
               this),
   m_reaction_list(&m_host->m_reaction_plist,
               m_host->m_reaction_plist.end(),
               m_host->m_reaction_plist.end(),
               this),
   m_tagmBeamPhoton_list(&m_host->m_tagmBeamPhoton_plist,
               m_host->m_tagmBeamPhoton_plist.end(),
               m_host->m_tagmBeamPhoton_plist.end(),
               this),
   m_taghBeamPhoton_list(&m_host->m_taghBeamPhoton_plist,
               m_host->m_taghBeamPhoton_plist.end(),
               m_host->m_taghBeamPhoton_plist.end(),
               this),
   m_fcalShower_list(&m_host->m_fcalShower_plist,
               m_host->m_fcalShower_plist.end(),
               m_host->m_fcalShower_plist.end(),
               this),
   m_bcalShower_list(&m_host->m_bcalShower_plist,
               m_host->m_bcalShower_plist.end(),
               m_host->m_bcalShower_plist.end(),
               this),
   m_ccalShower_list(&m_host->m_ccalShower_plist,
               m_host->m_ccalShower_plist.end(),
               m_host->m_ccalShower_plist.end(),
               this),
   m_chargedTrack_list(&m_host->m_chargedTrack_plist,
               m_host->m_chargedTrack_plist.end(),
               m_host->m_chargedTrack_plist.end(),
               this),
   m_startHit_list(&m_host->m_startHit_plist,
               m_host->m_startHit_plist.end(),
               m_host->m_startHit_plist.end(),
               this),
   m_tofPoint_list(&m_host->m_tofPoint_plist,
               m_host->m_tofPoint_plist.end(),
               m_host->m_tofPoint_plist.end(),
               this),
   m_dircHit_list(&m_host->m_dircHit_plist,
               m_host->m_dircHit_plist.end(),
               m_host->m_dircHit_plist.end(),
               this),
   m_RFtime_link(&m_host->m_RFtime_plist,
               m_host->m_RFtime_plist.end(),
               m_host->m_RFtime_plist.end(),
               this),
   m_trigger_link(&m_host->m_trigger_plist,
               m_host->m_trigger_plist.end(),
               m_host->m_trigger_plist.end(),
               this),
   m_detectorMatches_link(&m_host->m_detectorMatches_plist,
               m_host->m_detectorMatches_plist.end(),
               m_host->m_detectorMatches_plist.end(),
               this),
   m_hitStatistics_link(&m_host->m_hitStatistics_plist,
               m_host->m_hitStatistics_plist.end(),
               m_host->m_hitStatistics_plist.end(),
               this)
{}

inline ReconstructedPhysicsEvent::~ReconstructedPhysicsEvent() {
   deleteComments();
   deleteDataVersionStrings();
   deleteCcdbContexts();
   deleteReactions();
   deleteTagmBeamPhotons();
   deleteTaghBeamPhotons();
   deleteFcalShowers();
   deleteBcalShowers();
   deleteCcalShowers();
   deleteChargedTracks();
   deleteStartHits();
   deleteTofPoints();
   deleteDircHits();
   deleteRFtimes();
   deleteTriggers();
   deleteDetectorMatcheses();
   deleteHitStatisticses();
}

inline std::string ReconstructedPhysicsEvent::getClass() const {
   return *(std::string*)m_parent->getAttribute("class");
}

inline std::string ReconstructedPhysicsEvent::getVersion() const {
   return *(std::string*)m_parent->getAttribute("version");
}

inline std::string ReconstructedPhysicsEvent::getXmlns() const {
   return *(std::string*)m_parent->getAttribute("xmlns");
}

inline int64_t ReconstructedPhysicsEvent::getEventNo() const {
   return m_eventNo;
}

inline void ReconstructedPhysicsEvent::setEventNo(int64_t eventNo) {
   m_eventNo = eventNo;
}

inline int ReconstructedPhysicsEvent::getRunNo() const {
   return m_runNo;
}

inline void ReconstructedPhysicsEvent::setRunNo(int runNo) {
   m_runNo = runNo;
}

inline const void *ReconstructedPhysicsEvent::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "eventNo") {
      if (atype != 0)
         *atype = k_hddm_long;
      return &m_eventNo;
   }
   if (name == "runNo") {
      if (atype != 0)
         *atype = k_hddm_int;
      return &m_runNo;
   }
   return m_parent->getAttribute(name, atype);
}

inline Comment &ReconstructedPhysicsEvent::getComment(int index) {
   return m_comment_list(index);
}

inline CommentList &ReconstructedPhysicsEvent::getComments() {
   return m_comment_list;
}

inline CommentList ReconstructedPhysicsEvent::addComments(int count, int start) {
   return m_comment_list.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteComments(int count, int start) {
   m_comment_list.del(count,start);
}

inline DataVersionString &ReconstructedPhysicsEvent::getDataVersionString(int index) {
   return m_dataVersionString_list(index);
}

inline DataVersionStringList &ReconstructedPhysicsEvent::getDataVersionStrings() {
   return m_dataVersionString_list;
}

inline DataVersionStringList ReconstructedPhysicsEvent::addDataVersionStrings(int count, int start) {
   return m_dataVersionString_list.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteDataVersionStrings(int count, int start) {
   m_dataVersionString_list.del(count,start);
}

inline CcdbContext &ReconstructedPhysicsEvent::getCcdbContext(int index) {
   return m_ccdbContext_list(index);
}

inline CcdbContextList &ReconstructedPhysicsEvent::getCcdbContexts() {
   return m_ccdbContext_list;
}

inline CcdbContextList ReconstructedPhysicsEvent::addCcdbContexts(int count, int start) {
   return m_ccdbContext_list.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteCcdbContexts(int count, int start) {
   m_ccdbContext_list.del(count,start);
}

inline Reaction &ReconstructedPhysicsEvent::getReaction(int index) {
   return m_reaction_list(index);
}

inline ReactionList &ReconstructedPhysicsEvent::getReactions() {
   return m_reaction_list;
}

inline ReactionList ReconstructedPhysicsEvent::addReactions(int count, int start) {
   return m_reaction_list.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteReactions(int count, int start) {
   m_reaction_list.del(count,start);
}

inline TagmBeamPhoton &ReconstructedPhysicsEvent::getTagmBeamPhoton(int index) {
   return m_tagmBeamPhoton_list(index);
}

inline TagmBeamPhotonList &ReconstructedPhysicsEvent::getTagmBeamPhotons() {
   return m_tagmBeamPhoton_list;
}

inline TagmBeamPhotonList ReconstructedPhysicsEvent::addTagmBeamPhotons(int count, int start) {
   return m_tagmBeamPhoton_list.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteTagmBeamPhotons(int count, int start) {
   m_tagmBeamPhoton_list.del(count,start);
}

inline TaghBeamPhoton &ReconstructedPhysicsEvent::getTaghBeamPhoton(int index) {
   return m_taghBeamPhoton_list(index);
}

inline TaghBeamPhotonList &ReconstructedPhysicsEvent::getTaghBeamPhotons() {
   return m_taghBeamPhoton_list;
}

inline TaghBeamPhotonList ReconstructedPhysicsEvent::addTaghBeamPhotons(int count, int start) {
   return m_taghBeamPhoton_list.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteTaghBeamPhotons(int count, int start) {
   m_taghBeamPhoton_list.del(count,start);
}

inline FcalShower &ReconstructedPhysicsEvent::getFcalShower(int index) {
   return m_fcalShower_list(index);
}

inline FcalShowerList &ReconstructedPhysicsEvent::getFcalShowers() {
   return m_fcalShower_list;
}

inline FcalShowerList ReconstructedPhysicsEvent::addFcalShowers(int count, int start) {
   return m_fcalShower_list.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteFcalShowers(int count, int start) {
   m_fcalShower_list.del(count,start);
}

inline BcalShower &ReconstructedPhysicsEvent::getBcalShower(int index) {
   return m_bcalShower_list(index);
}

inline BcalShowerList &ReconstructedPhysicsEvent::getBcalShowers() {
   return m_bcalShower_list;
}

inline BcalShowerList ReconstructedPhysicsEvent::addBcalShowers(int count, int start) {
   return m_bcalShower_list.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteBcalShowers(int count, int start) {
   m_bcalShower_list.del(count,start);
}

inline CcalShower &ReconstructedPhysicsEvent::getCcalShower(int index) {
   return m_ccalShower_list(index);
}

inline CcalShowerList &ReconstructedPhysicsEvent::getCcalShowers() {
   return m_ccalShower_list;
}

inline CcalShowerList ReconstructedPhysicsEvent::addCcalShowers(int count, int start) {
   return m_ccalShower_list.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteCcalShowers(int count, int start) {
   m_ccalShower_list.del(count,start);
}

inline ChargedTrack &ReconstructedPhysicsEvent::getChargedTrack(int index) {
   return m_chargedTrack_list(index);
}

inline ChargedTrackList &ReconstructedPhysicsEvent::getChargedTracks() {
   return m_chargedTrack_list;
}

inline ChargedTrackList ReconstructedPhysicsEvent::addChargedTracks(int count, int start) {
   return m_chargedTrack_list.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteChargedTracks(int count, int start) {
   m_chargedTrack_list.del(count,start);
}

inline StartHit &ReconstructedPhysicsEvent::getStartHit(int index) {
   return m_startHit_list(index);
}

inline StartHitList &ReconstructedPhysicsEvent::getStartHits() {
   return m_startHit_list;
}

inline StartHitList ReconstructedPhysicsEvent::addStartHits(int count, int start) {
   return m_startHit_list.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteStartHits(int count, int start) {
   m_startHit_list.del(count,start);
}

inline TofPoint &ReconstructedPhysicsEvent::getTofPoint(int index) {
   return m_tofPoint_list(index);
}

inline TofPointList &ReconstructedPhysicsEvent::getTofPoints() {
   return m_tofPoint_list;
}

inline TofPointList ReconstructedPhysicsEvent::addTofPoints(int count, int start) {
   return m_tofPoint_list.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteTofPoints(int count, int start) {
   m_tofPoint_list.del(count,start);
}

inline DircHit &ReconstructedPhysicsEvent::getDircHit(int index) {
   return m_dircHit_list(index);
}

inline DircHitList &ReconstructedPhysicsEvent::getDircHits() {
   return m_dircHit_list;
}

inline DircHitList ReconstructedPhysicsEvent::addDircHits(int count, int start) {
   return m_dircHit_list.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteDircHits(int count, int start) {
   m_dircHit_list.del(count,start);
}

inline RFtime &ReconstructedPhysicsEvent::getRFtime() {
   return m_RFtime_link.front();
}

inline RFtimeList &ReconstructedPhysicsEvent::getRFtimes() {
   return m_RFtime_link;
}

inline RFtimeList ReconstructedPhysicsEvent::addRFtimes(int count, int start) {
   return m_RFtime_link.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteRFtimes(int count, int start) {
   m_RFtime_link.del(count,start);
}

inline Trigger &ReconstructedPhysicsEvent::getTrigger() {
   return m_trigger_link.front();
}

inline TriggerList &ReconstructedPhysicsEvent::getTriggers() {
   return m_trigger_link;
}

inline TriggerList ReconstructedPhysicsEvent::addTriggers(int count, int start) {
   return m_trigger_link.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteTriggers(int count, int start) {
   m_trigger_link.del(count,start);
}

inline DetectorMatches &ReconstructedPhysicsEvent::getDetectorMatches() {
   return m_detectorMatches_link.front();
}

inline DetectorMatchesList &ReconstructedPhysicsEvent::getDetectorMatcheses() {
   return m_detectorMatches_link;
}

inline DetectorMatchesList ReconstructedPhysicsEvent::addDetectorMatcheses(int count, int start) {
   return m_detectorMatches_link.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteDetectorMatcheses(int count, int start) {
   m_detectorMatches_link.del(count,start);
}

inline HitStatistics &ReconstructedPhysicsEvent::getHitStatistics() {
   return m_hitStatistics_link.front();
}

inline HitStatisticsList &ReconstructedPhysicsEvent::getHitStatisticses() {
   return m_hitStatistics_link;
}

inline HitStatisticsList ReconstructedPhysicsEvent::addHitStatisticses(int count, int start) {
   return m_hitStatistics_link.add(count,start);
}

inline void ReconstructedPhysicsEvent::deleteHitStatisticses(int count, int start) {
   m_hitStatistics_link.del(count,start);
}

inline HDDM::HDDM()
 : HDDM_Element(),
   m_reconstructedPhysicsEvent_plist(),
   m_reconstructedPhysicsEvent_link(&this->m_reconstructedPhysicsEvent_plist,
               this->m_reconstructedPhysicsEvent_plist.end(),
               this->m_reconstructedPhysicsEvent_plist.end(),
               this)
{
   m_host = this;
}

inline HDDM::~HDDM() {
   deleteReconstructedPhysicsEvents();
}

inline std::string HDDM::getClass() const {
   return "r";
}

inline std::string HDDM::getVersion() const {
   return "1.1.0";
}

inline std::string HDDM::getXmlns() const {
   return "http://www.gluex.org/hddm";
}

inline void HDDM::clear() {
   deleteReconstructedPhysicsEvents();
}

inline const void *HDDM::getAttribute(const std::string &name,
                                                   hddm_type *atype) const {
   if (name == "class") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_class = getClass();
      return &m_class;
   }
   if (name == "version") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_version = getVersion();
      return &m_version;
   }
   if (name == "xmlns") {
      if (atype != 0)
         *atype = k_hddm_unknown;
      static std::string m_xmlns = getXmlns();
      return &m_xmlns;
   }
   return 0;
}

inline ReconstructedPhysicsEvent &HDDM::getReconstructedPhysicsEvent() {
   return m_reconstructedPhysicsEvent_link.front();
}

inline ReconstructedPhysicsEventList &HDDM::getReconstructedPhysicsEvents() {
   return m_reconstructedPhysicsEvent_link;
}

inline ReconstructedPhysicsEventList HDDM::addReconstructedPhysicsEvents(int count, int start) {
   return m_reconstructedPhysicsEvent_link.add(count,start);
}

inline void HDDM::deleteReconstructedPhysicsEvents(int count, int start) {
   m_reconstructedPhysicsEvent_link.del(count,start);
}

inline CDCAmpdEdxList HDDM::getCDCAmpdEdxs() {
   return CDCAmpdEdxList(&m_CDCAmpdEdx_plist,
                   m_CDCAmpdEdx_plist.begin(),
                   m_CDCAmpdEdx_plist.end());
}

inline RFtimeList HDDM::getRFtimes() {
   return RFtimeList(&m_RFtime_plist,
                   m_RFtime_plist.begin(),
                   m_RFtime_plist.end());
}

inline BcalCellsList HDDM::getBcalCellses() {
   return BcalCellsList(&m_bcalCells_plist,
                   m_bcalCells_plist.begin(),
                   m_bcalCells_plist.end());
}

inline BcalClusterList HDDM::getBcalClusters() {
   return BcalClusterList(&m_bcalCluster_plist,
                   m_bcalCluster_plist.begin(),
                   m_bcalCluster_plist.end());
}

inline BcalCorrelationsList HDDM::getBcalCorrelationses() {
   return BcalCorrelationsList(&m_bcalCorrelations_plist,
                   m_bcalCorrelations_plist.begin(),
                   m_bcalCorrelations_plist.end());
}

inline BcalDOCAtoTrackList HDDM::getBcalDOCAtoTracks() {
   return BcalDOCAtoTrackList(&m_bcalDOCAtoTrack_plist,
                   m_bcalDOCAtoTrack_plist.begin(),
                   m_bcalDOCAtoTrack_plist.end());
}

inline BcalLayersList HDDM::getBcalLayerses() {
   return BcalLayersList(&m_bcalLayers_plist,
                   m_bcalLayers_plist.begin(),
                   m_bcalLayers_plist.end());
}

inline BcalMatchParamsList HDDM::getBcalMatchParamses() {
   return BcalMatchParamsList(&m_bcalMatchParams_plist,
                   m_bcalMatchParams_plist.begin(),
                   m_bcalMatchParams_plist.end());
}

inline BcalShowerList HDDM::getBcalShowers() {
   return BcalShowerList(&m_bcalShower_plist,
                   m_bcalShower_plist.begin(),
                   m_bcalShower_plist.end());
}

inline CcalBlocksList HDDM::getCcalBlockses() {
   return CcalBlocksList(&m_ccalBlocks_plist,
                   m_ccalBlocks_plist.begin(),
                   m_ccalBlocks_plist.end());
}

inline CcalShowerList HDDM::getCcalShowers() {
   return CcalShowerList(&m_ccalShower_plist,
                   m_ccalShower_plist.begin(),
                   m_ccalShower_plist.end());
}

inline CcdbContextList HDDM::getCcdbContexts() {
   return CcdbContextList(&m_ccdbContext_plist,
                   m_ccdbContext_plist.begin(),
                   m_ccdbContext_plist.end());
}

inline CdcStrawsList HDDM::getCdcStrawses() {
   return CdcStrawsList(&m_cdcStraws_plist,
                   m_cdcStraws_plist.begin(),
                   m_cdcStraws_plist.end());
}

inline ChargedTrackList HDDM::getChargedTracks() {
   return ChargedTrackList(&m_chargedTrack_plist,
                   m_chargedTrack_plist.begin(),
                   m_chargedTrack_plist.end());
}

inline CommentList HDDM::getComments() {
   return CommentList(&m_comment_plist,
                   m_comment_plist.begin(),
                   m_comment_plist.end());
}

inline DEdxDCList HDDM::getDEdxDCs() {
   return DEdxDCList(&m_dEdxDC_plist,
                   m_dEdxDC_plist.begin(),
                   m_dEdxDC_plist.end());
}

inline DataVersionStringList HDDM::getDataVersionStrings() {
   return DataVersionStringList(&m_dataVersionString_plist,
                   m_dataVersionString_plist.begin(),
                   m_dataVersionString_plist.end());
}

inline DetectorMatchesList HDDM::getDetectorMatcheses() {
   return DetectorMatchesList(&m_detectorMatches_plist,
                   m_detectorMatches_plist.begin(),
                   m_detectorMatches_plist.end());
}

inline DircHitList HDDM::getDircHits() {
   return DircHitList(&m_dircHit_plist,
                   m_dircHit_plist.begin(),
                   m_dircHit_plist.end());
}

inline DircMatchHitList HDDM::getDircMatchHits() {
   return DircMatchHitList(&m_dircMatchHit_plist,
                   m_dircMatchHit_plist.begin(),
                   m_dircMatchHit_plist.end());
}

inline DircMatchParamsList HDDM::getDircMatchParamses() {
   return DircMatchParamsList(&m_dircMatchParams_plist,
                   m_dircMatchParams_plist.begin(),
                   m_dircMatchParams_plist.end());
}

inline DircPMTsList HDDM::getDircPMTses() {
   return DircPMTsList(&m_dircPMTs_plist,
                   m_dircPMTs_plist.begin(),
                   m_dircPMTs_plist.end());
}

inline ExitParamsList HDDM::getExitParamses() {
   return ExitParamsList(&m_exitParams_plist,
                   m_exitParams_plist.begin(),
                   m_exitParams_plist.end());
}

inline ExpectedhitsList HDDM::getExpectedhitses() {
   return ExpectedhitsList(&m_expectedhits_plist,
                   m_expectedhits_plist.begin(),
                   m_expectedhits_plist.end());
}

inline FcalBlocksList HDDM::getFcalBlockses() {
   return FcalBlocksList(&m_fcalBlocks_plist,
                   m_fcalBlocks_plist.begin(),
                   m_fcalBlocks_plist.end());
}

inline FcalCorrelationsList HDDM::getFcalCorrelationses() {
   return FcalCorrelationsList(&m_fcalCorrelations_plist,
                   m_fcalCorrelations_plist.begin(),
                   m_fcalCorrelations_plist.end());
}

inline FcalDOCAtoTrackList HDDM::getFcalDOCAtoTracks() {
   return FcalDOCAtoTrackList(&m_fcalDOCAtoTrack_plist,
                   m_fcalDOCAtoTrack_plist.begin(),
                   m_fcalDOCAtoTrack_plist.end());
}

inline FcalMatchParamsList HDDM::getFcalMatchParamses() {
   return FcalMatchParamsList(&m_fcalMatchParams_plist,
                   m_fcalMatchParams_plist.begin(),
                   m_fcalMatchParams_plist.end());
}

inline FcalShowerList HDDM::getFcalShowers() {
   return FcalShowerList(&m_fcalShower_plist,
                   m_fcalShower_plist.begin(),
                   m_fcalShower_plist.end());
}

inline FcalShowerClassificationList HDDM::getFcalShowerClassifications() {
   return FcalShowerClassificationList(&m_fcalShowerClassification_plist,
                   m_fcalShowerClassification_plist.begin(),
                   m_fcalShowerClassification_plist.end());
}

inline FcalShowerNBlocksList HDDM::getFcalShowerNBlockses() {
   return FcalShowerNBlocksList(&m_fcalShowerNBlocks_plist,
                   m_fcalShowerNBlocks_plist.begin(),
                   m_fcalShowerNBlocks_plist.end());
}

inline FcalShowerPropertiesList HDDM::getFcalShowerPropertiesList() {
   return FcalShowerPropertiesList(&m_fcalShowerProperties_plist,
                   m_fcalShowerProperties_plist.begin(),
                   m_fcalShowerProperties_plist.end());
}

inline FdcPseudosList HDDM::getFdcPseudoses() {
   return FdcPseudosList(&m_fdcPseudos_plist,
                   m_fdcPseudos_plist.begin(),
                   m_fdcPseudos_plist.end());
}

inline HitStatisticsList HDDM::getHitStatisticses() {
   return HitStatisticsList(&m_hitStatistics_plist,
                   m_hitStatistics_plist.begin(),
                   m_hitStatistics_plist.end());
}

inline HitlayersList HDDM::getHitlayerses() {
   return HitlayersList(&m_hitlayers_plist,
                   m_hitlayers_plist.begin(),
                   m_hitlayers_plist.end());
}

inline McmatchList HDDM::getMcmatchs() {
   return McmatchList(&m_mcmatch_plist,
                   m_mcmatch_plist.begin(),
                   m_mcmatch_plist.end());
}

inline MomentumList HDDM::getMomenta() {
   return MomentumList(&m_momentum_plist,
                   m_momentum_plist.begin(),
                   m_momentum_plist.end());
}

inline OriginList HDDM::getOrigins() {
   return OriginList(&m_origin_plist,
                   m_origin_plist.begin(),
                   m_origin_plist.end());
}

inline PreshowerList HDDM::getPreshowers() {
   return PreshowerList(&m_preshower_plist,
                   m_preshower_plist.begin(),
                   m_preshower_plist.end());
}

inline ProductList HDDM::getProducts() {
   return ProductList(&m_product_plist,
                   m_product_plist.begin(),
                   m_product_plist.end());
}

inline ReactionList HDDM::getReactions() {
   return ReactionList(&m_reaction_plist,
                   m_reaction_plist.begin(),
                   m_reaction_plist.end());
}

inline ScMatchParamsList HDDM::getScMatchParamses() {
   return ScMatchParamsList(&m_scMatchParams_plist,
                   m_scMatchParams_plist.begin(),
                   m_scMatchParams_plist.end());
}

inline StartCountersList HDDM::getStartCounterses() {
   return StartCountersList(&m_startCounters_plist,
                   m_startCounters_plist.begin(),
                   m_startCounters_plist.end());
}

inline StartHitList HDDM::getStartHits() {
   return StartHitList(&m_startHit_plist,
                   m_startHit_plist.begin(),
                   m_startHit_plist.end());
}

inline TaghBeamPhotonList HDDM::getTaghBeamPhotons() {
   return TaghBeamPhotonList(&m_taghBeamPhoton_plist,
                   m_taghBeamPhoton_plist.begin(),
                   m_taghBeamPhoton_plist.end());
}

inline TagmBeamPhotonList HDDM::getTagmBeamPhotons() {
   return TagmBeamPhotonList(&m_tagmBeamPhoton_plist,
                   m_tagmBeamPhoton_plist.begin(),
                   m_tagmBeamPhoton_plist.end());
}

inline TflightPCorrelationList HDDM::getTflightPCorrelations() {
   return TflightPCorrelationList(&m_tflightPCorrelation_plist,
                   m_tflightPCorrelation_plist.begin(),
                   m_tflightPCorrelation_plist.end());
}

inline TofDedxList HDDM::getTofDedxs() {
   return TofDedxList(&m_tofDedx_plist,
                   m_tofDedx_plist.begin(),
                   m_tofDedx_plist.end());
}

inline TofEnergyDepositionList HDDM::getTofEnergyDepositions() {
   return TofEnergyDepositionList(&m_tofEnergyDeposition_plist,
                   m_tofEnergyDeposition_plist.begin(),
                   m_tofEnergyDeposition_plist.end());
}

inline TofMatchParamsList HDDM::getTofMatchParamses() {
   return TofMatchParamsList(&m_tofMatchParams_plist,
                   m_tofMatchParams_plist.begin(),
                   m_tofMatchParams_plist.end());
}

inline TofPaddlesList HDDM::getTofPaddleses() {
   return TofPaddlesList(&m_tofPaddles_plist,
                   m_tofPaddles_plist.begin(),
                   m_tofPaddles_plist.end());
}

inline TofPointList HDDM::getTofPoints() {
   return TofPointList(&m_tofPoint_plist,
                   m_tofPoint_plist.begin(),
                   m_tofPoint_plist.end());
}

inline TofStatusList HDDM::getTofStatuses() {
   return TofStatusList(&m_tofStatus_plist,
                   m_tofStatus_plist.begin(),
                   m_tofStatus_plist.end());
}

inline TrackFitList HDDM::getTrackFits() {
   return TrackFitList(&m_trackFit_plist,
                   m_trackFit_plist.begin(),
                   m_trackFit_plist.end());
}

inline TrackFlagsList HDDM::getTrackFlagses() {
   return TrackFlagsList(&m_trackFlags_plist,
                   m_trackFlags_plist.begin(),
                   m_trackFlags_plist.end());
}

inline TriggerList HDDM::getTriggers() {
   return TriggerList(&m_trigger_plist,
                   m_trigger_plist.begin(),
                   m_trigger_plist.end());
}

inline TriggerEnergySumsList HDDM::getTriggerEnergySumses() {
   return TriggerEnergySumsList(&m_triggerEnergySums_plist,
                   m_triggerEnergySums_plist.begin(),
                   m_triggerEnergySums_plist.end());
}

inline VertexList HDDM::getVertices() {
   return VertexList(&m_vertex_plist,
                   m_vertex_plist.begin(),
                   m_vertex_plist.end());
}

inline WidthList HDDM::getWidths() {
   return WidthList(&m_width_plist,
                   m_width_plist.begin(),
                   m_width_plist.end());
}

inline void Comment::streamer(istream &istr) {
   *istr.getXDRistream() >> m_text;
}

inline void Comment::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_text;
}

inline void DataVersionString::streamer(istream &istr) {
   *istr.getXDRistream() >> m_text;
}

inline void DataVersionString::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_text;
}

inline void CcdbContext::streamer(istream &istr) {
   *istr.getXDRistream() >> m_text;
}

inline void CcdbContext::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_text;
}

inline void Origin::streamer(istream &istr) {
   *istr.getXDRistream() >> m_t >> m_vx >> m_vy >> m_vz;
}

inline void Origin::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_t << m_vx << m_vy << m_vz;
}

inline void Momentum::streamer(istream &istr) {
   *istr.getXDRistream() >> m_E >> m_px >> m_py >> m_pz;
}

inline void Momentum::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_E << m_px << m_py << m_pz;
}

inline void Product::streamer(istream &istr) {
   *istr.getXDRistream() >> m_id >> m_parentId >> m_pdgtype;
   istr >> m_momentum_link;
}

inline void Product::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_id << m_parentId << m_pdgtype;
   ostr << m_momentum_link;
}

inline void Vertex::streamer(istream &istr) {
   istr >> m_origin_link >> m_product_list;
}

inline void Vertex::streamer(ostream &ostr) {
   ostr << m_origin_link << m_product_list;
}

inline void Reaction::streamer(istream &istr) {
   *istr.getXDRistream() >> m_Ebeam >> m_jtag >> m_targetType >> m_type >> m_weight;
   istr >> m_vertex_list;
}

inline void Reaction::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_Ebeam << m_jtag << m_targetType << m_type << m_weight;
   ostr << m_vertex_list;
}

inline void TagmBeamPhoton::streamer(istream &istr) {
   *istr.getXDRistream() >> m_E >> m_jtag >> m_t;
}

inline void TagmBeamPhoton::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_E << m_jtag << m_t;
}

inline void TaghBeamPhoton::streamer(istream &istr) {
   *istr.getXDRistream() >> m_E >> m_jtag >> m_t;
}

inline void TaghBeamPhoton::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_E << m_jtag << m_t;
}

inline void FcalCorrelations::streamer(istream &istr) {
   *istr.getXDRistream() >> m_Etcorr >> m_Excorr >> m_Eycorr >> m_txcorr >> m_tycorr;
}

inline void FcalCorrelations::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_Etcorr << m_Excorr << m_Eycorr << m_txcorr << m_tycorr;
}

inline void FcalShowerClassification::streamer(istream &istr) {
   *istr.getXDRistream() >> m_classifierOuput;
}

inline void FcalShowerClassification::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_classifierOuput;
}

inline void FcalShowerProperties::streamer(istream &istr) {
   *istr.getXDRistream() >> m_E1E9 >> m_E9E25 >> m_docaTrack >> m_sumU >> m_sumV >> m_timeTrack;
}

inline void FcalShowerProperties::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_E1E9 << m_E9E25 << m_docaTrack << m_sumU << m_sumV << m_timeTrack;
}

inline void FcalShowerNBlocks::streamer(istream &istr) {
   *istr.getXDRistream() >> m_numBlocks;
}

inline void FcalShowerNBlocks::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_numBlocks;
}

inline void FcalShower::streamer(istream &istr) {
   *istr.getXDRistream() >> m_E >> m_Eerr >> m_Ezcorr >> m_jtag >> m_t >> m_terr >> m_tzcorr >> m_x >> m_xerr >> m_xycorr >> m_xzcorr >> m_y >> m_yerr >> m_yzcorr >> m_z >> m_zerr;
   istr >> m_fcalCorrelations_link >> m_fcalShowerClassification_link >> m_fcalShowerProperties_link >> m_fcalShowerNBlocks_link;
}

inline void FcalShower::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_E << m_Eerr << m_Ezcorr << m_jtag << m_t << m_terr << m_tzcorr << m_x << m_xerr << m_xycorr << m_xzcorr << m_y << m_yerr << m_yzcorr << m_z << m_zerr;
   ostr << m_fcalCorrelations_link << m_fcalShowerClassification_link << m_fcalShowerProperties_link << m_fcalShowerNBlocks_link;
}

inline void Preshower::streamer(istream &istr) {
   *istr.getXDRistream() >> m_preshowerE;
}

inline void Preshower::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_preshowerE;
}

inline void Width::streamer(istream &istr) {
   *istr.getXDRistream() >> m_sigLong >> m_sigTheta >> m_sigTrans;
}

inline void Width::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_sigLong << m_sigTheta << m_sigTrans;
}

inline void BcalCluster::streamer(istream &istr) {
   *istr.getXDRistream() >> m_ncell;
}

inline void BcalCluster::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_ncell;
}

inline void BcalCorrelations::streamer(istream &istr) {
   *istr.getXDRistream() >> m_Etcorr >> m_Excorr >> m_Eycorr >> m_txcorr >> m_tycorr;
}

inline void BcalCorrelations::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_Etcorr << m_Excorr << m_Eycorr << m_txcorr << m_tycorr;
}

inline void BcalLayers::streamer(istream &istr) {
   *istr.getXDRistream() >> m_E_L2 >> m_E_L3 >> m_E_L4 >> m_rmsTime;
}

inline void BcalLayers::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_E_L2 << m_E_L3 << m_E_L4 << m_rmsTime;
}

inline void BcalShower::streamer(istream &istr) {
   *istr.getXDRistream() >> m_E >> m_Eerr >> m_Ezcorr >> m_jtag >> m_t >> m_terr >> m_tzcorr >> m_x >> m_xerr >> m_xycorr >> m_xzcorr >> m_y >> m_yerr >> m_yzcorr >> m_z >> m_zerr;
   istr >> m_preshower_link >> m_width_link >> m_bcalCluster_link >> m_bcalCorrelations_link >> m_bcalLayers_link;
}

inline void BcalShower::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_E << m_Eerr << m_Ezcorr << m_jtag << m_t << m_terr << m_tzcorr << m_x << m_xerr << m_xycorr << m_xzcorr << m_y << m_yerr << m_yzcorr << m_z << m_zerr;
   ostr << m_preshower_link << m_width_link << m_bcalCluster_link << m_bcalCorrelations_link << m_bcalLayers_link;
}

inline void CcalShower::streamer(istream &istr) {
   *istr.getXDRistream() >> m_E >> m_Eerr >> m_Emax >> m_chi2 >> m_dime >> m_id >> m_idmax >> m_jtag >> m_t >> m_terr >> m_type >> m_x >> m_x1 >> m_y >> m_y1 >> m_z;
}

inline void CcalShower::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_E << m_Eerr << m_Emax << m_chi2 << m_dime << m_id << m_idmax << m_jtag << m_t << m_terr << m_type << m_x << m_x1 << m_y << m_y1 << m_z;
}

inline void TrackFit::streamer(istream &istr) {
   *istr.getXDRistream() >> m_Ndof >> m_chisq >> m_e11 >> m_e12 >> m_e13 >> m_e14 >> m_e15 >> m_e22 >> m_e23 >> m_e24 >> m_e25 >> m_e33 >> m_e34 >> m_e35 >> m_e44 >> m_e45 >> m_e55 >> m_px >> m_py >> m_pz >> m_t0 >> m_t0det >> m_t0err >> m_x0 >> m_y0 >> m_z0;
}

inline void TrackFit::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_Ndof << m_chisq << m_e11 << m_e12 << m_e13 << m_e14 << m_e15 << m_e22 << m_e23 << m_e24 << m_e25 << m_e33 << m_e34 << m_e35 << m_e44 << m_e45 << m_e55 << m_px << m_py << m_pz << m_t0 << m_t0det << m_t0err << m_x0 << m_y0 << m_z0;
}

inline void TrackFlags::streamer(istream &istr) {
   *istr.getXDRistream() >> m_flags;
}

inline void TrackFlags::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_flags;
}

inline void Hitlayers::streamer(istream &istr) {
   *istr.getXDRistream() >> m_CDCrings >> m_FDCplanes;
}

inline void Hitlayers::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_CDCrings << m_FDCplanes;
}

inline void Expectedhits::streamer(istream &istr) {
   *istr.getXDRistream() >> m_expectedCDChits >> m_expectedFDChits >> m_measuredCDChits >> m_measuredFDChits;
}

inline void Expectedhits::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_expectedCDChits << m_expectedFDChits << m_measuredCDChits << m_measuredFDChits;
}

inline void Mcmatch::streamer(istream &istr) {
   *istr.getXDRistream() >> m_ithrown >> m_numhitsmatch;
}

inline void Mcmatch::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_ithrown << m_numhitsmatch;
}

inline void CDCAmpdEdx::streamer(istream &istr) {
   *istr.getXDRistream() >> m_dEdxCDCAmp >> m_dxCDCAmp;
}

inline void CDCAmpdEdx::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_dEdxCDCAmp << m_dxCDCAmp;
}

inline void DEdxDC::streamer(istream &istr) {
   *istr.getXDRistream() >> m_NsampleCDC >> m_NsampleFDC >> m_dEdxCDC >> m_dEdxFDC >> m_dxCDC >> m_dxFDC;
   istr >> m_CDCAmpdEdx_link;
}

inline void DEdxDC::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_NsampleCDC << m_NsampleFDC << m_dEdxCDC << m_dEdxFDC << m_dxCDC << m_dxFDC;
   ostr << m_CDCAmpdEdx_link;
}

inline void ExitParams::streamer(istream &istr) {
   *istr.getXDRistream() >> m_px1 >> m_py1 >> m_pz1 >> m_t1 >> m_x1 >> m_y1 >> m_z1;
}

inline void ExitParams::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_px1 << m_py1 << m_pz1 << m_t1 << m_x1 << m_y1 << m_z1;
}

inline void ChargedTrack::streamer(istream &istr) {
   *istr.getXDRistream() >> m_candidateId >> m_jtag >> m_ptype;
   istr >> m_trackFit_link >> m_trackFlags_link >> m_hitlayers_link >> m_expectedhits_link >> m_mcmatch_link >> m_dEdxDC_link >> m_exitParams_link;
}

inline void ChargedTrack::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_candidateId << m_jtag << m_ptype;
   ostr << m_trackFit_link << m_trackFlags_link << m_hitlayers_link << m_expectedhits_link << m_mcmatch_link << m_dEdxDC_link << m_exitParams_link;
}

inline void StartHit::streamer(istream &istr) {
   *istr.getXDRistream() >> m_dE >> m_jtag >> m_sector >> m_t;
}

inline void StartHit::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_dE << m_jtag << m_sector << m_t;
}

inline void TofStatus::streamer(istream &istr) {
   *istr.getXDRistream() >> m_status;
}

inline void TofStatus::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_status;
}

inline void TofEnergyDeposition::streamer(istream &istr) {
   *istr.getXDRistream() >> m_dE1 >> m_dE2;
}

inline void TofEnergyDeposition::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_dE1 << m_dE2;
}

inline void TofPoint::streamer(istream &istr) {
   *istr.getXDRistream() >> m_dE >> m_jtag >> m_t >> m_terr >> m_x >> m_y >> m_z;
   istr >> m_tofStatus_link >> m_tofEnergyDeposition_link;
}

inline void TofPoint::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_dE << m_jtag << m_t << m_terr << m_x << m_y << m_z;
   ostr << m_tofStatus_link << m_tofEnergyDeposition_link;
}

inline void DircHit::streamer(istream &istr) {
   *istr.getXDRistream() >> m_ch >> m_jtag >> m_t >> m_tot;
}

inline void DircHit::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_ch << m_jtag << m_t << m_tot;
}

inline void RFtime::streamer(istream &istr) {
   *istr.getXDRistream() >> m_jtag >> m_tsync;
}

inline void RFtime::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_jtag << m_tsync;
}

inline void TriggerEnergySums::streamer(istream &istr) {
   *istr.getXDRistream() >> m_BCALEnergySum >> m_FCALEnergySum;
}

inline void TriggerEnergySums::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_BCALEnergySum << m_FCALEnergySum;
}

inline void Trigger::streamer(istream &istr) {
   *istr.getXDRistream() >> m_jtag >> m_l1_fp_trig_bits >> m_l1_trig_bits;
   istr >> m_triggerEnergySums_link;
}

inline void Trigger::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_jtag << m_l1_fp_trig_bits << m_l1_trig_bits;
   ostr << m_triggerEnergySums_link;
}

inline void BcalMatchParams::streamer(istream &istr) {
   *istr.getXDRistream() >> m_deltaphi >> m_deltaz >> m_dx >> m_pathlength >> m_shower >> m_tflight >> m_tflightvar >> m_track;
}

inline void BcalMatchParams::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_deltaphi << m_deltaz << m_dx << m_pathlength << m_shower << m_tflight << m_tflightvar << m_track;
}

inline void FcalMatchParams::streamer(istream &istr) {
   *istr.getXDRistream() >> m_doca >> m_dx >> m_pathlength >> m_shower >> m_tflight >> m_tflightvar >> m_track;
}

inline void FcalMatchParams::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_doca << m_dx << m_pathlength << m_shower << m_tflight << m_tflightvar << m_track;
}

inline void TofDedx::streamer(istream &istr) {
   *istr.getXDRistream() >> m_dEdx1 >> m_dEdx2;
}

inline void TofDedx::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_dEdx1 << m_dEdx2;
}

inline void TofMatchParams::streamer(istream &istr) {
   *istr.getXDRistream() >> m_dEdx >> m_deltax >> m_deltay >> m_ehit >> m_hit >> m_pathlength >> m_tflight >> m_tflightvar >> m_thit >> m_thitvar >> m_track;
   istr >> m_tofDedx_link;
}

inline void TofMatchParams::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_dEdx << m_deltax << m_deltay << m_ehit << m_hit << m_pathlength << m_tflight << m_tflightvar << m_thit << m_thitvar << m_track;
   ostr << m_tofDedx_link;
}

inline void ScMatchParams::streamer(istream &istr) {
   *istr.getXDRistream() >> m_dEdx >> m_deltaphi >> m_ehit >> m_hit >> m_pathlength >> m_tflight >> m_tflightvar >> m_thit >> m_thitvar >> m_track;
}

inline void ScMatchParams::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_dEdx << m_deltaphi << m_ehit << m_hit << m_pathlength << m_tflight << m_tflightvar << m_thit << m_thitvar << m_track;
}

inline void DircMatchParams::streamer(istream &istr) {
   *istr.getXDRistream() >> m_deltat >> m_expectthetac >> m_lele >> m_lk >> m_lp >> m_lpi >> m_nphotons >> m_px >> m_py >> m_pz >> m_t >> m_thetac >> m_track >> m_x >> m_y >> m_z;
}

inline void DircMatchParams::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_deltat << m_expectthetac << m_lele << m_lk << m_lp << m_lpi << m_nphotons << m_px << m_py << m_pz << m_t << m_thetac << m_track << m_x << m_y << m_z;
}

inline void DircMatchHit::streamer(istream &istr) {
   *istr.getXDRistream() >> m_hit >> m_track;
}

inline void DircMatchHit::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_hit << m_track;
}

inline void BcalDOCAtoTrack::streamer(istream &istr) {
   *istr.getXDRistream() >> m_deltaphi >> m_deltaz >> m_shower;
}

inline void BcalDOCAtoTrack::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_deltaphi << m_deltaz << m_shower;
}

inline void FcalDOCAtoTrack::streamer(istream &istr) {
   *istr.getXDRistream() >> m_doca >> m_shower;
}

inline void FcalDOCAtoTrack::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_doca << m_shower;
}

inline void TflightPCorrelation::streamer(istream &istr) {
   *istr.getXDRistream() >> m_correlation >> m_system >> m_track;
}

inline void TflightPCorrelation::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_correlation << m_system << m_track;
}

inline void DetectorMatches::streamer(istream &istr) {
   *istr.getXDRistream() >> m_jtag;
   istr >> m_bcalMatchParams_list >> m_fcalMatchParams_list >> m_tofMatchParams_list >> m_scMatchParams_list >> m_dircMatchParams_list >> m_dircMatchHit_list >> m_bcalDOCAtoTrack_list >> m_fcalDOCAtoTrack_list >> m_tflightPCorrelation_list;
}

inline void DetectorMatches::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_jtag;
   ostr << m_bcalMatchParams_list << m_fcalMatchParams_list << m_tofMatchParams_list << m_scMatchParams_list << m_dircMatchParams_list << m_dircMatchHit_list << m_bcalDOCAtoTrack_list << m_fcalDOCAtoTrack_list << m_tflightPCorrelation_list;
}

inline void StartCounters::streamer(istream &istr) {
   *istr.getXDRistream() >> m_count;
}

inline void StartCounters::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_count;
}

inline void CdcStraws::streamer(istream &istr) {
   *istr.getXDRistream() >> m_count;
}

inline void CdcStraws::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_count;
}

inline void FdcPseudos::streamer(istream &istr) {
   *istr.getXDRistream() >> m_count;
}

inline void FdcPseudos::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_count;
}

inline void BcalCells::streamer(istream &istr) {
   *istr.getXDRistream() >> m_count;
}

inline void BcalCells::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_count;
}

inline void FcalBlocks::streamer(istream &istr) {
   *istr.getXDRistream() >> m_count;
}

inline void FcalBlocks::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_count;
}

inline void TofPaddles::streamer(istream &istr) {
   *istr.getXDRistream() >> m_count;
}

inline void TofPaddles::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_count;
}

inline void CcalBlocks::streamer(istream &istr) {
   *istr.getXDRistream() >> m_count;
}

inline void CcalBlocks::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_count;
}

inline void DircPMTs::streamer(istream &istr) {
   *istr.getXDRistream() >> m_count;
}

inline void DircPMTs::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_count;
}

inline void HitStatistics::streamer(istream &istr) {
   *istr.getXDRistream() >> m_jtag;
   istr >> m_startCounters_link >> m_cdcStraws_link >> m_fdcPseudos_link >> m_bcalCells_link >> m_fcalBlocks_link >> m_tofPaddles_link >> m_ccalBlocks_link >> m_dircPMTs_link;
}

inline void HitStatistics::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_jtag;
   ostr << m_startCounters_link << m_cdcStraws_link << m_fdcPseudos_link << m_bcalCells_link << m_fcalBlocks_link << m_tofPaddles_link << m_ccalBlocks_link << m_dircPMTs_link;
}

inline void ReconstructedPhysicsEvent::streamer(istream &istr) {
   *istr.getXDRistream() >> m_eventNo >> m_runNo;
   istr >> m_comment_list >> m_dataVersionString_list >> m_ccdbContext_list >> m_reaction_list >> m_tagmBeamPhoton_list >> m_taghBeamPhoton_list >> m_fcalShower_list >> m_bcalShower_list >> m_ccalShower_list >> m_chargedTrack_list >> m_startHit_list >> m_tofPoint_list >> m_dircHit_list >> m_RFtime_link >> m_trigger_link >> m_detectorMatches_link >> m_hitStatistics_link;
}

inline void ReconstructedPhysicsEvent::streamer(ostream &ostr) {
   *ostr.getXDRostream() << m_eventNo << m_runNo;
   ostr << m_comment_list << m_dataVersionString_list << m_ccdbContext_list << m_reaction_list << m_tagmBeamPhoton_list << m_taghBeamPhoton_list << m_fcalShower_list << m_bcalShower_list << m_ccalShower_list << m_chargedTrack_list << m_startHit_list << m_tofPoint_list << m_dircHit_list << m_RFtime_link << m_trigger_link << m_detectorMatches_link << m_hitStatistics_link;
}

inline void HDDM::streamer(istream &istr) {
   istr >> m_reconstructedPhysicsEvent_link;
}

inline void HDDM::streamer(ostream &ostr) {
   ostr << m_reconstructedPhysicsEvent_link;
}

inline std::string HDDM::DocumentString() {
   return std::string(
"<HDDM class=\"r\" version=\"1.1.0\" xmlns=\"http://www.gluex.org/hddm\">\n"
"  <reconstructedPhysicsEvent eventNo=\"long\" runNo=\"int\">\n"
"    <comment maxOccurs=\"unbounded\" minOccurs=\"0\" text=\"string\" />\n"
"    <dataVersionString maxOccurs=\"unbounded\" minOccurs=\"0\" text=\"string\" />\n"
"    <ccdbContext maxOccurs=\"unbounded\" minOccurs=\"0\" text=\"string\" />\n"
"    <reaction Ebeam=\"float\" Eunit=\"GeV\" jtag=\"string\" maxOccurs=\"unbounded\" minOccurs=\"0\" targetType=\"Particle_t\" type=\"int\" weight=\"float\">\n"
"      <vertex maxOccurs=\"unbounded\">\n"
"        <origin lunit=\"cm\" t=\"float\" vx=\"float\" vy=\"float\" vz=\"float\" />\n"
"        <product id=\"int\" maxOccurs=\"unbounded\" parentId=\"int\" pdgtype=\"int\">\n"
"          <momentum E=\"float\" Eunit=\"GeV\" punit=\"GeV/c\" px=\"float\" py=\"float\" pz=\"float\" />\n"
"        </product>\n"
"      </vertex>\n"
"    </reaction>\n"
"    <tagmBeamPhoton E=\"float\" Eunit=\"GeV\" jtag=\"string\" maxOccurs=\"unbounded\" minOccurs=\"0\" t=\"float\" tunit=\"ns\" />\n"
"    <taghBeamPhoton E=\"float\" Eunit=\"GeV\" jtag=\"string\" maxOccurs=\"unbounded\" minOccurs=\"0\" t=\"float\" tunit=\"ns\" />\n"
"    <fcalShower E=\"float\" Eerr=\"float\" Eunit=\"GeV\" Ezcorr=\"float\" jtag=\"string\" lunit=\"cm\" maxOccurs=\"unbounded\" minOccurs=\"0\" t=\"float\" terr=\"float\" tunit=\"ns\" tzcorr=\"float\" x=\"float\" xerr=\"float\" xycorr=\"float\" xzcorr=\"float\" y=\"float\" yerr=\"float\" yzcorr=\"float\" z=\"float\" zerr=\"float\">\n"
"      <fcalCorrelations Etcorr=\"float\" Excorr=\"float\" Eycorr=\"float\" maxOccurs=\"1\" minOccurs=\"0\" txcorr=\"float\" tycorr=\"float\" />\n"
"      <fcalShowerClassification classifierOuput=\"float\" minOccurs=\"0\" />\n"
"      <fcalShowerProperties E1E9=\"float\" E9E25=\"float\" docaTrack=\"float\" maxOccurs=\"1\" minOccurs=\"0\" sumU=\"float\" sumV=\"float\" timeTrack=\"float\" />\n"
"      <fcalShowerNBlocks minOccurs=\"0\" numBlocks=\"int\" />\n"
"    </fcalShower>\n"
"    <bcalShower E=\"float\" Eerr=\"float\" Eunit=\"GeV\" Ezcorr=\"float\" jtag=\"string\" lunit=\"cm\" maxOccurs=\"unbounded\" minOccurs=\"0\" t=\"float\" terr=\"float\" tunit=\"ns\" tzcorr=\"float\" x=\"float\" xerr=\"float\" xycorr=\"float\" xzcorr=\"float\" y=\"float\" yerr=\"float\" yzcorr=\"float\" z=\"float\" zerr=\"float\">\n"
"      <preshower maxOccurs=\"1\" minOccurs=\"0\" preshowerE=\"float\" />\n"
"      <width maxOccurs=\"1\" minOccurs=\"0\" sigLong=\"float\" sigTheta=\"float\" sigTrans=\"float\" />\n"
"      <bcalCluster maxOccurs=\"1\" minOccurs=\"0\" ncell=\"int\" />\n"
"      <bcalCorrelations Etcorr=\"float\" Excorr=\"float\" Eycorr=\"float\" maxOccurs=\"1\" minOccurs=\"0\" txcorr=\"float\" tycorr=\"float\" />\n"
"      <bcalLayers E_L2=\"float\" E_L3=\"float\" E_L4=\"float\" maxOccurs=\"1\" minOccurs=\"0\" rmsTime=\"float\" />\n"
"    </bcalShower>\n"
"    <ccalShower E=\"float\" Eerr=\"float\" Emax=\"float\" Eunit=\"GeV\" chi2=\"float\" dime=\"int\" id=\"int\" idmax=\"int\" jtag=\"string\" lunit=\"cm\" maxOccurs=\"unbounded\" minOccurs=\"0\" t=\"float\" terr=\"float\" tunit=\"ns\" type=\"int\" x=\"float\" x1=\"float\" y=\"float\" y1=\"float\" z=\"float\">\n"
"    </ccalShower>\n"
"    <chargedTrack candidateId=\"int\" jtag=\"string\" maxOccurs=\"unbounded\" minOccurs=\"0\" ptype=\"Particle_t\">\n"
"      <trackFit Ndof=\"int\" chisq=\"float\" e11=\"float\" e12=\"float\" e13=\"float\" e14=\"float\" e15=\"float\" e22=\"float\" e23=\"float\" e24=\"float\" e25=\"float\" e33=\"float\" e34=\"float\" e35=\"float\" e44=\"float\" e45=\"float\" e55=\"float\" lunit=\"cm\" punit=\"GeV/c\" px=\"float\" py=\"float\" pz=\"float\" t0=\"float\" t0det=\"int\" t0err=\"float\" tunit=\"ns\" x0=\"float\" y0=\"float\" z0=\"float\" />\n"
"      <trackFlags flags=\"int\" maxOccurs=\"1\" minOccurs=\"0\" />\n"
"      <hitlayers CDCrings=\"int\" FDCplanes=\"int\" maxOccurs=\"1\" minOccurs=\"0\" />\n"
"      <expectedhits expectedCDChits=\"int\" expectedFDChits=\"int\" maxOccurs=\"1\" measuredCDChits=\"int\" measuredFDChits=\"int\" minOccurs=\"0\" />\n"
"      <mcmatch ithrown=\"int\" maxOccurs=\"1\" minOccurs=\"0\" numhitsmatch=\"int\" />\n"
"      <dEdxDC NsampleCDC=\"int\" NsampleFDC=\"int\" dEdxCDC=\"float\" dEdxFDC=\"float\" dEdx_unit=\"GeV/cm\" dxCDC=\"float\" dxFDC=\"float\" lunit=\"cm\" minOccurs=\"0\">\n"
"        <CDCAmpdEdx dEdxCDCAmp=\"float\" dxCDCAmp=\"float\" minOccurs=\"0\" />\n"
"      </dEdxDC>\n"
"      <exitParams lunit=\"cm\" maxOccurs=\"1\" minOccurs=\"0\" punit=\"GeV/c\" px1=\"float\" py1=\"float\" pz1=\"float\" t1=\"float\" tunit=\"ns\" x1=\"float\" y1=\"float\" z1=\"float\" />\n"
"    </chargedTrack>\n"
"    <startHit Eunit=\"GeV\" dE=\"float\" jtag=\"string\" maxOccurs=\"unbounded\" minOccurs=\"0\" sector=\"int\" t=\"float\" tunit=\"ns\" />\n"
"    <tofPoint Eunit=\"GeV\" dE=\"float\" jtag=\"string\" lunit=\"cm\" maxOccurs=\"unbounded\" minOccurs=\"0\" t=\"float\" terr=\"float\" tunit=\"ns\" x=\"float\" y=\"float\" z=\"float\">\n"
"      <tofStatus maxOccurs=\"1\" minOccurs=\"0\" status=\"int\" />\n"
"      <tofEnergyDeposition dE1=\"float\" dE2=\"float\" maxOccurs=\"1\" minOccurs=\"0\" />\n"
"    </tofPoint>\n"
"    <dircHit ch=\"int\" jtag=\"string\" maxOccurs=\"unbounded\" minOccurs=\"0\" t=\"float\" tot=\"float\" tunit=\"ns\" />\n"
"    <RFtime jtag=\"string\" minOccurs=\"0\" tsync=\"float\" tunit=\"ns\" />\n"
"    <trigger jtag=\"string\" l1_fp_trig_bits=\"int\" l1_trig_bits=\"int\" maxOccurs=\"1\" minOccurs=\"0\">\n"
"      <triggerEnergySums BCALEnergySum=\"float\" FCALEnergySum=\"float\" minOccurs=\"0\" />\n"
"    </trigger>\n"
"    <detectorMatches jtag=\"string\" maxOccurs=\"1\" minOccurs=\"1\">\n"
"      <bcalMatchParams deltaphi=\"float\" deltaz=\"float\" dx=\"float\" lunit=\"cm\" maxOccurs=\"unbounded\" minOccurs=\"0\" pathlength=\"float\" shower=\"int\" tflight=\"float\" tflightvar=\"float\" track=\"int\" tunit=\"ns\" />\n"
"      <fcalMatchParams doca=\"float\" dx=\"float\" lunit=\"cm\" maxOccurs=\"unbounded\" minOccurs=\"0\" pathlength=\"float\" shower=\"int\" tflight=\"float\" tflightvar=\"float\" track=\"int\" tunit=\"ns\" />\n"
"      <tofMatchParams dEdx=\"float\" dEdx_unit=\"GeV/cm\" deltax=\"float\" deltay=\"float\" ehit=\"float\" hit=\"int\" lunit=\"cm\" maxOccurs=\"unbounded\" minOccurs=\"0\" pathlength=\"float\" tflight=\"float\" tflightvar=\"float\" thit=\"float\" thitvar=\"float\" track=\"int\" tunit=\"ns\">\n"
"        <tofDedx dEdx1=\"float\" dEdx2=\"float\" maxOccurs=\"1\" minOccurs=\"0\" />\n"
"      </tofMatchParams>\n"
"      <scMatchParams Eunit=\"GeV\" aunit=\"rad\" dEdx=\"float\" dEdx_unit=\"GeV/cm\" deltaphi=\"float\" ehit=\"float\" hit=\"int\" lunit=\"cm\" maxOccurs=\"unbounded\" minOccurs=\"0\" pathlength=\"float\" tflight=\"float\" tflightvar=\"float\" thit=\"float\" thitvar=\"float\" track=\"int\" tunit=\"ns\" />\n"
"      <dircMatchParams deltat=\"float\" expectthetac=\"float\" lele=\"float\" lk=\"float\" lp=\"float\" lpi=\"float\" maxOccurs=\"unbounded\" minOccurs=\"0\" nphotons=\"int\" px=\"float\" py=\"float\" pz=\"float\" t=\"float\" thetac=\"float\" track=\"int\" x=\"float\" y=\"float\" z=\"float\" />\n"
"      <dircMatchHit hit=\"int\" maxOccurs=\"unbounded\" minOccurs=\"0\" track=\"int\" />\n"
"      <bcalDOCAtoTrack deltaphi=\"float\" deltaz=\"float\" lunit=\"cm\" maxOccurs=\"unbounded\" minOccurs=\"0\" shower=\"int\" />\n"
"      <fcalDOCAtoTrack doca=\"float\" lunit=\"cm\" maxOccurs=\"unbounded\" minOccurs=\"0\" shower=\"int\" />\n"
"      <tflightPCorrelation correlation=\"float\" maxOccurs=\"unbounded\" minOccurs=\"0\" punit=\"GeV/c\" system=\"int\" track=\"int\" tunit=\"ns\" />\n"
"    </detectorMatches>\n"
"    <hitStatistics jtag=\"string\" minOccurs=\"0\">\n"
"      <startCounters count=\"int\" minOccurs=\"0\" />\n"
"      <cdcStraws count=\"int\" minOccurs=\"0\" />\n"
"      <fdcPseudos count=\"int\" minOccurs=\"0\" />\n"
"      <bcalCells count=\"int\" minOccurs=\"0\" />\n"
"      <fcalBlocks count=\"int\" minOccurs=\"0\" />\n"
"      <tofPaddles count=\"int\" minOccurs=\"0\" />\n"
"      <ccalBlocks count=\"int\" minOccurs=\"0\" />\n"
"      <dircPMTs count=\"int\" minOccurs=\"0\" />\n"
"    </hitStatistics>\n"
"  </reconstructedPhysicsEvent>\n"
"</HDDM>\n"
   );
}

}
#endif /* SAW_r_HDDM */
